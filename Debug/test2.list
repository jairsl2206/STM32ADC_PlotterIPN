
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005ec0  08005ec0  00006ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006120  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000314  2000005c  2000005c  0000805c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  0000805c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a8c7  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001809  00000000  00000000  00012953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00014160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061b  00000000  00000000  00014948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201a4  00000000  00000000  00014f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6d5  00000000  00000000  00035107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1213  00000000  00000000  000407dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001019ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002804  00000000  00000000  00101a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00104238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ea8 	.word	0x08005ea8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005ea8 	.word	0x08005ea8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr
 80009ec:	0000      	movs	r0, r0
	...

080009f0 <main>:

uint32_t adcValue;
char buffer[64];

int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fba7 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f897 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f9c1 	bl	8000d84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a02:	f000 f98f 	bl	8000d24 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a06:	f000 f8ed 	bl	8000be4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a0a:	f000 f95b 	bl	8000cc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  int sim_value = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  bool Simulacion = false; //true para simular, false para obtener datos del puerto ADC
 8000a12:	2300      	movs	r3, #0
 8000a14:	74fb      	strb	r3, [r7, #19]

  HAL_Init();
 8000a16:	f000 fb97 	bl	8001148 <HAL_Init>
  SystemClock_Config();
 8000a1a:	f000 f887 	bl	8000b2c <SystemClock_Config>
  MX_GPIO_Init();
 8000a1e:	f000 f9b1 	bl	8000d84 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a22:	f000 f8df 	bl	8000be4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 f97d 	bl	8000d24 <MX_USART2_UART_Init>

  HAL_ADC_Start(&hadc1); // Inicia ADC
 8000a2a:	4837      	ldr	r0, [pc, #220]	@ (8000b08 <main+0x118>)
 8000a2c:	f000 fda8 	bl	8001580 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */


	  if(Simulacion){
 8000a30:	7cfb      	ldrb	r3, [r7, #19]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d043      	beq.n	8000abe <main+0xce>
      //Datos Simulados Onda seno
	  static float angle = 0;
      sim_value = (uint16_t)((sin(angle) + 1.0f) * 2047);  // 0-4095
 8000a36:	4b35      	ldr	r3, [pc, #212]	@ (8000b0c <main+0x11c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff feae 	bl	800079c <__aeabi_f2d>
 8000a40:	4602      	mov	r2, r0
 8000a42:	460b      	mov	r3, r1
 8000a44:	ec43 2b10 	vmov	d0, r2, r3
 8000a48:	f004 fa0a 	bl	8004e60 <sin>
 8000a4c:	ec51 0b10 	vmov	r0, r1, d0
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <main+0x120>)
 8000a56:	f7ff fd43 	bl	80004e0 <__adddf3>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	a327      	add	r3, pc, #156	@ (adr r3, 8000b00 <main+0x110>)
 8000a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a68:	f7ff fc0a 	bl	8000280 <__aeabi_dmul>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	460b      	mov	r3, r1
 8000a70:	4610      	mov	r0, r2
 8000a72:	4619      	mov	r1, r3
 8000a74:	f7ff ff9a 	bl	80009ac <__aeabi_d2uiz>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	617b      	str	r3, [r7, #20]
      angle += 0.025f;
 8000a7e:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <main+0x11c>)
 8000a80:	edd3 7a00 	vldr	s15, [r3]
 8000a84:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000b14 <main+0x124>
 8000a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <main+0x11c>)
 8000a8e:	edc3 7a00 	vstr	s15, [r3]

      char buffer[16];
      sprintf(buffer, "%u\n", sim_value);  // convierte el número en texto + newline
 8000a92:	463b      	mov	r3, r7
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	4920      	ldr	r1, [pc, #128]	@ (8000b18 <main+0x128>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fd3f 	bl	800451c <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb95 	bl	80001d0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4639      	mov	r1, r7
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	481a      	ldr	r0, [pc, #104]	@ (8000b1c <main+0x12c>)
 8000ab2:	f003 f957 	bl	8003d64 <HAL_UART_Transmit>
      HAL_Delay(10);
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f000 fbac 	bl	8001214 <HAL_Delay>
 8000abc:	e7b8      	b.n	8000a30 <main+0x40>
	  }
	  else{
	  //Datos de ADC de la tarjeta
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000abe:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac2:	4811      	ldr	r0, [pc, #68]	@ (8000b08 <main+0x118>)
 8000ac4:	f000 fe12 	bl	80016ec <HAL_ADC_PollForConversion>
	  adcValue = HAL_ADC_GetValue(&hadc1);
 8000ac8:	480f      	ldr	r0, [pc, #60]	@ (8000b08 <main+0x118>)
 8000aca:	f000 fedd 	bl	8001888 <HAL_ADC_GetValue>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a13      	ldr	r2, [pc, #76]	@ (8000b20 <main+0x130>)
 8000ad2:	6013      	str	r3, [r2, #0]

	  // Enviar por UART
	  sprintf(buffer, "%lu\n", adcValue);
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <main+0x130>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4912      	ldr	r1, [pc, #72]	@ (8000b24 <main+0x134>)
 8000adc:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <main+0x138>)
 8000ade:	f003 fd1d 	bl	800451c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ae2:	4811      	ldr	r0, [pc, #68]	@ (8000b28 <main+0x138>)
 8000ae4:	f7ff fb74 	bl	80001d0 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <main+0x138>)
 8000af2:	480a      	ldr	r0, [pc, #40]	@ (8000b1c <main+0x12c>)
 8000af4:	f003 f936 	bl	8003d64 <HAL_UART_Transmit>
	  if(Simulacion){
 8000af8:	e79a      	b.n	8000a30 <main+0x40>
 8000afa:	bf00      	nop
 8000afc:	f3af 8000 	nop.w
 8000b00:	00000000 	.word	0x00000000
 8000b04:	409ffc00 	.word	0x409ffc00
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	2000021c 	.word	0x2000021c
 8000b10:	3ff00000 	.word	0x3ff00000
 8000b14:	3ccccccd 	.word	0x3ccccccd
 8000b18:	08005ec0 	.word	0x08005ec0
 8000b1c:	20000150 	.word	0x20000150
 8000b20:	200001d8 	.word	0x200001d8
 8000b24:	08005ec4 	.word	0x08005ec4
 8000b28:	200001dc 	.word	0x200001dc

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b096      	sub	sp, #88	@ 0x58
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b36:	2228      	movs	r2, #40	@ 0x28
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fd10 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
 8000b5e:	615a      	str	r2, [r3, #20]
 8000b60:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b62:	2302      	movs	r3, #2
 8000b64:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	2301      	movs	r3, #1
 8000b68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b72:	2300      	movs	r3, #0
 8000b74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b76:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000b7a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fd4d 	bl	8002620 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b8c:	f000 f960 	bl	8000e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fd45 	bl	800363c <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000bb8:	f000 f94a 	bl	8000e50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000bbc:	2381      	movs	r3, #129	@ 0x81
 8000bbe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 ff47 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000bd8:	f000 f93a 	bl	8000e50 <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3758      	adds	r7, #88	@ 0x58
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c06:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c08:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c62:	f000 fafb 	bl	800125c <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c6c:	f000 f8f0 	bl	8000e50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000c7c:	f001 f8d0 	bl	8001e20 <HAL_ADCEx_MultiModeConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c86:	f000 f8e3 	bl	8000e50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000c92:	2301      	movs	r3, #1
 8000c94:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <MX_ADC1_Init+0xdc>)
 8000ca8:	f000 fdfc 	bl	80018a4 <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000cb2:	f000 f8cd 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000078 	.word	0x20000078

08000cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	@ (8000d20 <MX_USART1_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d08:	f002 ffde 	bl	8003cc8 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f000 f89d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000c8 	.word	0x200000c8
 8000d20:	40013800 	.word	0x40013800

08000d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	@ (8000d80 <MX_USART2_UART_Init+0x5c>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_USART2_UART_Init+0x58>)
 8000d68:	f002 ffae 	bl	8003cc8 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 f86d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000150 	.word	0x20000150
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000da0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000db8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dbc:	6153      	str	r3, [r2, #20]
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a18      	ldr	r2, [pc, #96]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_GPIO_Init+0xc4>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f001 fbf5 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000e1e:	f001 fa75 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e22:	2320      	movs	r3, #32
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f001 fa66 	bl	800230c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	@ 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000800 	.word	0x48000800

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <Error_Handler+0x8>

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e92:	2007      	movs	r0, #7
 8000e94:	f001 fa06 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	@ 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ec4:	d124      	bne.n	8000f10 <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f001 f9fe 	bl	800230c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	@ 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000

08000f1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	@ 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <HAL_UART_MspInit+0xdc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12a      	bne.n	8000f94 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4a2e      	ldr	r2, [pc, #184]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f48:	6193      	str	r3, [r2, #24]
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f80:	2307      	movs	r3, #7
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8e:	f001 f9bd 	bl	800230c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f92:	e02d      	b.n	8000ff0 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0xe4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d128      	bne.n	8000ff0 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a16      	ldr	r2, [pc, #88]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a10      	ldr	r2, [pc, #64]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_UART_MspInit+0xe0>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f001 f98e 	bl	800230c <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	@ 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40004400 	.word	0x40004400

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <NMI_Handler+0x4>

0800100c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <UsageFault_Handler+0x4>

0800102c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 f8bb 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f003 fa6c 	bl	8004570 <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20003000 	.word	0x20003000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	20000220 	.word	0x20000220
 80010cc:	20000370 	.word	0x20000370

080010d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800112c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f8:	f7ff ffea 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	@ (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	@ (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <LoopForever+0xe>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	@ (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001122:	f003 fa2b 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001126:	f7ff fc63 	bl	80009f0 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800112c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001138:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 800113c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001140:	20000370 	.word	0x20000370

08001144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_2_IRQHandler>
	...

08001148 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_Init+0x28>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_Init+0x28>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f001 f8a3 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f808 	bl	8001174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fe7a 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000

08001174 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x54>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x58>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f8ad 	bl	80022f2 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e00e      	b.n	80011c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d80a      	bhi.n	80011be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f001 f883 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_InitTick+0x5c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e000      	b.n	80011c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000224 	.word	0x20000224

080011fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000224 	.word	0x20000224

08001214 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b09a      	sub	sp, #104	@ 0x68
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e172      	b.n	8001562 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d176      	bne.n	800137c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d152      	bne.n	800133c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fdf7 	bl	8000ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d13b      	bne.n	800133c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fed5 	bl	8002074 <ADC_Disable>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d12f      	bne.n	800133c <HAL_ADC_Init+0xe0>
 80012dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12b      	bne.n	800133c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012ec:	f023 0302 	bic.w	r3, r3, #2
 80012f0:	f043 0202 	orr.w	r2, r3, #2
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001306:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001316:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001318:	4b94      	ldr	r3, [pc, #592]	@ (800156c <HAL_ADC_Init+0x310>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a94      	ldr	r2, [pc, #592]	@ (8001570 <HAL_ADC_Init+0x314>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9a      	lsrs	r2, r3, #18
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800132e:	e002      	b.n	8001336 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	3b01      	subs	r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f9      	bne.n	8001330 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001358:	d110      	bne.n	800137c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f023 0312 	bic.w	r3, r3, #18
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 80df 	bne.w	8001548 <HAL_ADC_Init+0x2ec>
 800138a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 80da 	bne.w	8001548 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 80d2 	bne.w	8001548 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013ac:	f043 0202 	orr.w	r2, r3, #2
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001574 <HAL_ADC_Init+0x318>)
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013c0:	d102      	bne.n	80013c8 <HAL_ADC_Init+0x16c>
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <HAL_ADC_Init+0x31c>)
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e002      	b.n	80013ce <HAL_ADC_Init+0x172>
 80013c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d108      	bne.n	80013ee <HAL_ADC_Init+0x192>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Init+0x192>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_ADC_Init+0x194>
 80013ee:	2300      	movs	r3, #0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11c      	bne.n	800142e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d010      	beq.n	800141c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d107      	bne.n	8001416 <HAL_ADC_Init+0x1ba>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Init+0x1ba>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_ADC_Init+0x1bc>
 8001416:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001418:	2b00      	cmp	r3, #0
 800141a:	d108      	bne.n	800142e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800141c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	431a      	orrs	r2, r3
 800142a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800142c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7e5b      	ldrb	r3, [r3, #25]
 8001432:	035b      	lsls	r3, r3, #13
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001438:	2a01      	cmp	r2, #1
 800143a:	d002      	beq.n	8001442 <HAL_ADC_Init+0x1e6>
 800143c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001440:	e000      	b.n	8001444 <HAL_ADC_Init+0x1e8>
 8001442:	2200      	movs	r2, #0
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4313      	orrs	r3, r2
 8001452:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d11b      	bne.n	800149a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7e5b      	ldrb	r3, [r3, #25]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	3b01      	subs	r3, #1
 8001470:	045a      	lsls	r2, r3, #17
 8001472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001474:	4313      	orrs	r3, r2
 8001476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147a:	663b      	str	r3, [r7, #96]	@ 0x60
 800147c:	e00d      	b.n	800149a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	4313      	orrs	r3, r2
 80014ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014ae:	4313      	orrs	r3, r2
 80014b0:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d114      	bne.n	80014ea <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014ce:	f023 0302 	bic.w	r3, r3, #2
 80014d2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7e1b      	ldrb	r3, [r3, #24]
 80014d8:	039a      	lsls	r2, r3, #14
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4313      	orrs	r3, r2
 80014e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014e6:	4313      	orrs	r3, r2
 80014e8:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <HAL_ADC_Init+0x320>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80014fa:	430b      	orrs	r3, r1
 80014fc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10c      	bne.n	8001520 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	f023 010f 	bic.w	r1, r3, #15
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30
 800151e:	e007      	b.n	8001530 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 020f 	bic.w	r2, r2, #15
 800152e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40
 8001546:	e00a      	b.n	800155e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f023 0312 	bic.w	r3, r3, #18
 8001550:	f043 0210 	orr.w	r2, r3, #16
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001558:	2301      	movs	r3, #1
 800155a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800155e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001562:	4618      	mov	r0, r3
 8001564:	3768      	adds	r7, #104	@ 0x68
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83
 8001574:	50000300 	.word	0x50000300
 8001578:	50000100 	.word	0x50000100
 800157c:	fff0c007 	.word	0xfff0c007

08001580 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 809c 	bne.w	80016d4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Start+0x2a>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e097      	b.n	80016da <HAL_ADC_Start+0x15a>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fcfa 	bl	8001fac <ADC_Enable>
 80015b8:	4603      	mov	r3, r0
 80015ba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 8083 	bne.w	80016ca <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015d8:	4b42      	ldr	r3, [pc, #264]	@ (80016e4 <HAL_ADC_Start+0x164>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <HAL_ADC_Start+0x6e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ec:	d115      	bne.n	800161a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d027      	beq.n	8001658 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001610:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001618:	e01e      	b.n	8001658 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800162e:	d004      	beq.n	800163a <HAL_ADC_Start+0xba>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2c      	ldr	r2, [pc, #176]	@ (80016e8 <HAL_ADC_Start+0x168>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10e      	bne.n	8001658 <HAL_ADC_Start+0xd8>
 800163a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001650:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001664:	d106      	bne.n	8001674 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f023 0206 	bic.w	r2, r3, #6
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	645a      	str	r2, [r3, #68]	@ 0x44
 8001672:	e002      	b.n	800167a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	221c      	movs	r2, #28
 8001688:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <HAL_ADC_Start+0x164>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_ADC_Start+0x138>
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <HAL_ADC_Start+0x164>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 031f 	and.w	r3, r3, #31
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d00a      	beq.n	80016b8 <HAL_ADC_Start+0x138>
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_ADC_Start+0x164>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	2b09      	cmp	r3, #9
 80016ac:	d004      	beq.n	80016b8 <HAL_ADC_Start+0x138>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016b6:	d10f      	bne.n	80016d8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0204 	orr.w	r2, r2, #4
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80016d2:	e001      	b.n	80016d8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016d4:	2302      	movs	r3, #2
 80016d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	50000300 	.word	0x50000300
 80016e8:	50000100 	.word	0x50000100

080016ec <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d102      	bne.n	8001708 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001702:	2308      	movs	r3, #8
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e02e      	b.n	8001766 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001708:	4b5e      	ldr	r3, [pc, #376]	@ (8001884 <HAL_ADC_PollForConversion+0x198>)
 800170a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	2b00      	cmp	r3, #0
 8001716:	d112      	bne.n	800173e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d11d      	bne.n	8001762 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f043 0220 	orr.w	r2, r3, #32
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e09d      	b.n	800187a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e08b      	b.n	800187a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001762:	230c      	movs	r3, #12
 8001764:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001766:	4b47      	ldr	r3, [pc, #284]	@ (8001884 <HAL_ADC_PollForConversion+0x198>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_ADC_PollForConversion+0x90>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800177a:	d104      	bne.n	8001786 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e003      	b.n	800178e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001786:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800178e:	f7ff fd35 	bl	80011fc <HAL_GetTick>
 8001792:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001794:	e021      	b.n	80017da <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179c:	d01d      	beq.n	80017da <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_ADC_PollForConversion+0xc8>
 80017a4:	f7ff fd2a 	bl	80011fc <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d212      	bcs.n	80017da <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0d6      	beq.n	8001796 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d131      	bne.n	8001866 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d12c      	bne.n	8001866 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b08      	cmp	r3, #8
 8001818:	d125      	bne.n	8001866 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d112      	bne.n	800184e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d112      	bne.n	8001866 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	@ 0x40
 800184c:	e00b      	b.n	8001866 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f043 0220 	orr.w	r2, r3, #32
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	50000300 	.word	0x50000300

08001888 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b09b      	sub	sp, #108	@ 0x6c
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x22>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e2a1      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x566>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 8285 	bne.w	8001de8 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d81c      	bhi.n	8001920 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	461a      	mov	r2, r3
 80018fa:	231f      	movs	r3, #31
 80018fc:	4093      	lsls	r3, r2
 80018fe:	43db      	mvns	r3, r3
 8001900:	4019      	ands	r1, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa00 f203 	lsl.w	r2, r0, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
 800191e:	e063      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d81e      	bhi.n	8001966 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	3b1e      	subs	r3, #30
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	4019      	ands	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	3b1e      	subs	r3, #30
 8001958:	fa00 f203 	lsl.w	r2, r0, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	635a      	str	r2, [r3, #52]	@ 0x34
 8001964:	e040      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b0e      	cmp	r3, #14
 800196c:	d81e      	bhi.n	80019ac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	3b3c      	subs	r3, #60	@ 0x3c
 8001982:	221f      	movs	r2, #31
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	4019      	ands	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	3b3c      	subs	r3, #60	@ 0x3c
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80019aa:	e01d      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	3b5a      	subs	r3, #90	@ 0x5a
 80019c0:	221f      	movs	r2, #31
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4019      	ands	r1, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	3b5a      	subs	r3, #90	@ 0x5a
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 80e5 	bne.w	8001bc2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d91c      	bls.n	8001a3a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6999      	ldr	r1, [r3, #24]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b1e      	subs	r3, #30
 8001a12:	2207      	movs	r2, #7
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4019      	ands	r1, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6898      	ldr	r0, [r3, #8]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b1e      	subs	r3, #30
 8001a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]
 8001a38:	e019      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6959      	ldr	r1, [r3, #20]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4019      	ands	r1, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6898      	ldr	r0, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d84f      	bhi.n	8001b30 <HAL_ADC_ConfigChannel+0x28c>
 8001a90:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a96:	bf00      	nop
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001acb 	.word	0x08001acb
 8001aa0:	08001aed 	.word	0x08001aed
 8001aa4:	08001b0f 	.word	0x08001b0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aae:	4b9c      	ldr	r3, [pc, #624]	@ (8001d20 <HAL_ADC_ConfigChannel+0x47c>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	0691      	lsls	r1, r2, #26
 8001ab8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aba:	430a      	orrs	r2, r1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ac6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ac8:	e07b      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ad0:	4b93      	ldr	r3, [pc, #588]	@ (8001d20 <HAL_ADC_ConfigChannel+0x47c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	0691      	lsls	r1, r2, #26
 8001ada:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001adc:	430a      	orrs	r2, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ae8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aea:	e06a      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001af2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d20 <HAL_ADC_ConfigChannel+0x47c>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	0691      	lsls	r1, r2, #26
 8001afc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001afe:	430a      	orrs	r2, r1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b0a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b0c:	e059      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b14:	4b82      	ldr	r3, [pc, #520]	@ (8001d20 <HAL_ADC_ConfigChannel+0x47c>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	0691      	lsls	r1, r2, #26
 8001b1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b20:	430a      	orrs	r2, r1
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b2c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b2e:	e048      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	069b      	lsls	r3, r3, #26
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b52:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	069b      	lsls	r3, r3, #26
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d107      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b76:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b9a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ba2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	069b      	lsls	r3, r3, #26
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d107      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001bc0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d108      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x33e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x33e>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x340>
 8001be2:	2300      	movs	r3, #0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 810a 	bne.w	8001dfe <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d00f      	beq.n	8001c12 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43da      	mvns	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001c10:	e049      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d91c      	bls.n	8001c6e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6999      	ldr	r1, [r3, #24]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	3b1b      	subs	r3, #27
 8001c46:	2207      	movs	r2, #7
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4019      	ands	r1, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b1b      	subs	r3, #27
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	619a      	str	r2, [r3, #24]
 8001c6c:	e01b      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6959      	ldr	r1, [r3, #20]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	2207      	movs	r2, #7
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4019      	ands	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6898      	ldr	r0, [r3, #8]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_ADC_ConfigChannel+0x480>)
 8001ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cc2:	2b11      	cmp	r3, #17
 8001cc4:	d105      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	f040 8091 	bne.w	8001dfe <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 808a 	bne.w	8001dfe <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cf2:	d102      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x456>
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_ADC_ConfigChannel+0x484>)
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x45c>
 8001cfa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cfe:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10e      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x488>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d107      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x488>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e006      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x48a>
 8001d20:	83fff000 	.word	0x83fff000
 8001d24:	50000300 	.word	0x50000300
 8001d28:	50000100 	.word	0x50000100
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d150      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d32:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d010      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x4b0>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x4b0>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x4b2>
 8001d54:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d13c      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d11d      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x4fa>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d6a:	d118      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d76:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d78:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <HAL_ADC_ConfigChannel+0x574>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a27      	ldr	r2, [pc, #156]	@ (8001e1c <HAL_ADC_ConfigChannel+0x578>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9a      	lsrs	r2, r3, #18
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8e:	e002      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f9      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d9c:	e02e      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b11      	cmp	r3, #17
 8001da4:	d10b      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x51a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dae:	d106      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001db0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dbc:	e01e      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b12      	cmp	r3, #18
 8001dc4:	d11a      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dd0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dd2:	e013      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f043 0220 	orr.w	r2, r3, #32
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001de6:	e00a      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dfc:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001e06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	376c      	adds	r7, #108	@ 0x6c
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	431bde83 	.word	0x431bde83

08001e20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b099      	sub	sp, #100	@ 0x64
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e38:	d102      	bne.n	8001e40 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	e002      	b.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e40:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e44:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0a2      	b.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e09b      	b.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d17f      	bne.n	8001f74 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d179      	bne.n	8001f74 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e80:	4b49      	ldr	r3, [pc, #292]	@ (8001fa8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e82:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d040      	beq.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e9e:	035b      	lsls	r3, r3, #13
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ea6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d15c      	bne.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001eea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d14b      	bne.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ef8:	f023 030f 	bic.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	6811      	ldr	r1, [r2, #0]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	6892      	ldr	r2, [r2, #8]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f0a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f0c:	e03c      	b.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d123      	bne.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f5c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d112      	bne.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f6a:	f023 030f 	bic.w	r3, r3, #15
 8001f6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f70:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f72:	e009      	b.n	8001f88 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001f86:	e000      	b.n	8001f8a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f88:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001f96:	4618      	mov	r0, r3
 8001f98:	3764      	adds	r7, #100	@ 0x64
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	50000100 	.word	0x50000100
 8001fa8:	50000300 	.word	0x50000300

08001fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <ADC_Enable+0x2c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <ADC_Enable+0x2c>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <ADC_Enable+0x2e>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d143      	bne.n	8002066 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <ADC_Enable+0xc4>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e02f      	b.n	8002068 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002018:	f7ff f8f0 	bl	80011fc <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800201e:	e01b      	b.n	8002058 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002020:	f7ff f8ec 	bl	80011fc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d914      	bls.n	8002058 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d00d      	beq.n	8002058 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f043 0210 	orr.w	r2, r3, #16
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f043 0201 	orr.w	r2, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d1dc      	bne.n	8002020 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	8000003f 	.word	0x8000003f

08002074 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d108      	bne.n	80020a0 <ADC_Disable+0x2c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <ADC_Disable+0x2c>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <ADC_Disable+0x2e>
 80020a0:	2300      	movs	r3, #0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d047      	beq.n	8002136 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030d 	and.w	r3, r3, #13
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10f      	bne.n	80020d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0202 	orr.w	r2, r2, #2
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2203      	movs	r2, #3
 80020ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f896 	bl	80011fc <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020d2:	e029      	b.n	8002128 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e023      	b.n	8002138 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f0:	f7ff f884 	bl	80011fc <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d914      	bls.n	8002128 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d10d      	bne.n	8002128 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f043 0210 	orr.w	r2, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e007      	b.n	8002138 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d0dc      	beq.n	80020f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	6039      	str	r1, [r7, #0]
 80021ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	db0a      	blt.n	80021ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	490c      	ldr	r1, [pc, #48]	@ (80021f0 <__NVIC_SetPriority+0x4c>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021cc:	e00a      	b.n	80021e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4908      	ldr	r1, [pc, #32]	@ (80021f4 <__NVIC_SetPriority+0x50>)
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3b04      	subs	r3, #4
 80021dc:	0112      	lsls	r2, r2, #4
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	440b      	add	r3, r1
 80021e2:	761a      	strb	r2, [r3, #24]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000e100 	.word	0xe000e100
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	@ 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f1c3 0307 	rsb	r3, r3, #7
 8002212:	2b04      	cmp	r3, #4
 8002214:	bf28      	it	cs
 8002216:	2304      	movcs	r3, #4
 8002218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3304      	adds	r3, #4
 800221e:	2b06      	cmp	r3, #6
 8002220:	d902      	bls.n	8002228 <NVIC_EncodePriority+0x30>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b03      	subs	r3, #3
 8002226:	e000      	b.n	800222a <NVIC_EncodePriority+0x32>
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	401a      	ands	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002240:	f04f 31ff 	mov.w	r1, #4294967295
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	43d9      	mvns	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	4313      	orrs	r3, r2
         );
}
 8002252:	4618      	mov	r0, r3
 8002254:	3724      	adds	r7, #36	@ 0x24
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff8e 	bl	80021a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff47 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff5c 	bl	8002188 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff8e 	bl	80021f8 <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5d 	bl	80021a4 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffb0 	bl	8002260 <SysTick_Config>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	e14e      	b.n	80025ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8140 	beq.w	80025b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d005      	beq.n	800234c <HAL_GPIO_Init+0x40>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d130      	bne.n	80023ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002382:	2201      	movs	r2, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0201 	and.w	r2, r3, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d017      	beq.n	80023ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2203      	movs	r2, #3
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d123      	bne.n	800243e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0203 	and.w	r2, r3, #3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 809a 	beq.w	80025b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_GPIO_Init+0x2cc>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a54      	ldr	r2, [pc, #336]	@ (80025d8 <HAL_GPIO_Init+0x2cc>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b52      	ldr	r3, [pc, #328]	@ (80025d8 <HAL_GPIO_Init+0x2cc>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002498:	4a50      	ldr	r2, [pc, #320]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024c2:	d013      	beq.n	80024ec <HAL_GPIO_Init+0x1e0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a46      	ldr	r2, [pc, #280]	@ (80025e0 <HAL_GPIO_Init+0x2d4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00d      	beq.n	80024e8 <HAL_GPIO_Init+0x1dc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a45      	ldr	r2, [pc, #276]	@ (80025e4 <HAL_GPIO_Init+0x2d8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <HAL_GPIO_Init+0x1d8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a44      	ldr	r2, [pc, #272]	@ (80025e8 <HAL_GPIO_Init+0x2dc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_GPIO_Init+0x1d4>
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_GPIO_Init+0x1e2>
 80024e0:	2305      	movs	r3, #5
 80024e2:	e004      	b.n	80024ee <HAL_GPIO_Init+0x1e2>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e002      	b.n	80024ee <HAL_GPIO_Init+0x1e2>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_GPIO_Init+0x1e2>
 80024ec:	2300      	movs	r3, #0
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	f002 0203 	and.w	r2, r2, #3
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	4093      	lsls	r3, r2
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024fe:	4937      	ldr	r1, [pc, #220]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250c:	4b37      	ldr	r3, [pc, #220]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002530:	4a2e      	ldr	r2, [pc, #184]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002536:	4b2d      	ldr	r3, [pc, #180]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800255a:	4a24      	ldr	r2, [pc, #144]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002560:	4b22      	ldr	r3, [pc, #136]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002584:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025ae:	4a0f      	ldr	r2, [pc, #60]	@ (80025ec <HAL_GPIO_Init+0x2e0>)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f aea9 	bne.w	800231c <HAL_GPIO_Init+0x10>
  }
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010000 	.word	0x40010000
 80025e0:	48000400 	.word	0x48000400
 80025e4:	48000800 	.word	0x48000800
 80025e8:	48000c00 	.word	0x48000c00
 80025ec:	40010400 	.word	0x40010400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800260c:	e002      	b.n	8002614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002626:	af00      	add	r7, sp, #0
 8002628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002630:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f000 bff4 	b.w	800362e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 816d 	beq.w	8002936 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800265c:	4bb4      	ldr	r3, [pc, #720]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b04      	cmp	r3, #4
 8002666:	d00c      	beq.n	8002682 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002668:	4bb1      	ldr	r3, [pc, #708]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d157      	bne.n	8002724 <HAL_RCC_OscConfig+0x104>
 8002674:	4bae      	ldr	r3, [pc, #696]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002680:	d150      	bne.n	8002724 <HAL_RCC_OscConfig+0x104>
 8002682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002686:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002696:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80026a2:	d802      	bhi.n	80026aa <HAL_RCC_OscConfig+0x8a>
 80026a4:	4ba2      	ldr	r3, [pc, #648]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e015      	b.n	80026d6 <HAL_RCC_OscConfig+0xb6>
 80026aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026ae:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80026be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80026c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80026d2:	4b97      	ldr	r3, [pc, #604]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026da:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80026de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80026ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8114 	beq.w	8002934 <HAL_RCC_OscConfig+0x314>
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 810b 	bne.w	8002934 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f000 bf85 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002734:	d106      	bne.n	8002744 <HAL_RCC_OscConfig+0x124>
 8002736:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7d      	ldr	r2, [pc, #500]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e036      	b.n	80027b2 <HAL_RCC_OscConfig+0x192>
 8002744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10c      	bne.n	800276e <HAL_RCC_OscConfig+0x14e>
 8002754:	4b76      	ldr	r3, [pc, #472]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a75      	ldr	r2, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a72      	ldr	r2, [pc, #456]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e021      	b.n	80027b2 <HAL_RCC_OscConfig+0x192>
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800277e:	d10c      	bne.n	800279a <HAL_RCC_OscConfig+0x17a>
 8002780:	4b6b      	ldr	r3, [pc, #428]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6a      	ldr	r2, [pc, #424]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b68      	ldr	r3, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a67      	ldr	r2, [pc, #412]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e00b      	b.n	80027b2 <HAL_RCC_OscConfig+0x192>
 800279a:	4b65      	ldr	r3, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a64      	ldr	r2, [pc, #400]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80027a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a61      	ldr	r2, [pc, #388]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	f023 020f 	bic.w	r2, r3, #15
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	495a      	ldr	r1, [pc, #360]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d054      	beq.n	8002886 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7fe fd0e 	bl	80011fc <HAL_GetTick>
 80027e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e6:	f7fe fd09 	bl	80011fc <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d902      	bls.n	80027fc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	f000 bf19 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
 80027fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002800:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002810:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b3f      	cmp	r3, #63	@ 0x3f
 800281c:	d802      	bhi.n	8002824 <HAL_RCC_OscConfig+0x204>
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	e015      	b.n	8002850 <HAL_RCC_OscConfig+0x230>
 8002824:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002828:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002838:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800283c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002840:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800284c:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002854:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002858:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800285c:	fa92 f2a2 	rbit	r2, r2
 8002860:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002864:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f042 0220 	orr.w	r2, r2, #32
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0b0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1c6>
 8002884:	e057      	b.n	8002936 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fcb9 	bl	80011fc <HAL_GetTick>
 800288a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fcb4 	bl	80011fc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b64      	cmp	r3, #100	@ 0x64
 800289e:	d902      	bls.n	80028a6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	f000 bec4 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
 80028a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028aa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80028ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028c6:	d802      	bhi.n	80028ce <HAL_RCC_OscConfig+0x2ae>
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x2da>
 80028ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028d2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80028e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80028ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_RCC_OscConfig+0x310>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028fe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002902:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800290e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002912:	fab2 f282 	clz	r2, r2
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f002 021f 	and.w	r2, r2, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1b0      	bne.n	8002890 <HAL_RCC_OscConfig+0x270>
 800292e:	e002      	b.n	8002936 <HAL_RCC_OscConfig+0x316>
 8002930:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 816c 	beq.w	8002c24 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800294c:	4bcc      	ldr	r3, [pc, #816]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002958:	4bc9      	ldr	r3, [pc, #804]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b08      	cmp	r3, #8
 8002962:	d16d      	bne.n	8002a40 <HAL_RCC_OscConfig+0x420>
 8002964:	4bc6      	ldr	r3, [pc, #792]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d167      	bne.n	8002a40 <HAL_RCC_OscConfig+0x420>
 8002970:	2302      	movs	r3, #2
 8002972:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002982:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b3f      	cmp	r3, #63	@ 0x3f
 800298e:	d802      	bhi.n	8002996 <HAL_RCC_OscConfig+0x376>
 8002990:	4bbb      	ldr	r3, [pc, #748]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e013      	b.n	80029be <HAL_RCC_OscConfig+0x39e>
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80029ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80029ba:	4bb1      	ldr	r3, [pc, #708]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2202      	movs	r2, #2
 80029c0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80029c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80029c8:	fa92 f2a2 	rbit	r2, r2
 80029cc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80029d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80029d4:	fab2 f282 	clz	r2, r2
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f042 0220 	orr.w	r2, r2, #32
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	f002 021f 	and.w	r2, r2, #31
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCC_OscConfig+0x3e6>
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d002      	beq.n	8002a06 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f000 be14 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b9e      	ldr	r3, [pc, #632]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	21f8      	movs	r1, #248	@ 0xf8
 8002a1c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a24:	fa91 f1a1 	rbit	r1, r1
 8002a28:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a2c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a30:	fab1 f181 	clz	r1, r1
 8002a34:	b2c9      	uxtb	r1, r1
 8002a36:	408b      	lsls	r3, r1
 8002a38:	4991      	ldr	r1, [pc, #580]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	e0f1      	b.n	8002c24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8083 	beq.w	8002b58 <HAL_RCC_OscConfig+0x538>
 8002a52:	2301      	movs	r3, #1
 8002a54:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002a64:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fbbd 	bl	80011fc <HAL_GetTick>
 8002a82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7fe fbb8 	bl	80011fc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f000 bdc8 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ab0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b3f      	cmp	r3, #63	@ 0x3f
 8002abc:	d802      	bhi.n	8002ac4 <HAL_RCC_OscConfig+0x4a4>
 8002abe:	4b70      	ldr	r3, [pc, #448]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e013      	b.n	8002aec <HAL_RCC_OscConfig+0x4cc>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002adc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	2202      	movs	r2, #2
 8002aee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002af2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002af6:	fa92 f2a2 	rbit	r2, r2
 8002afa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002afe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b02:	fab2 f282 	clz	r2, r2
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f042 0220 	orr.w	r2, r2, #32
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f002 021f 	and.w	r2, r2, #31
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0b4      	beq.n	8002a88 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b58      	ldr	r3, [pc, #352]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	21f8      	movs	r1, #248	@ 0xf8
 8002b34:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002b3c:	fa91 f1a1 	rbit	r1, r1
 8002b40:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002b44:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002b48:	fab1 f181 	clz	r1, r1
 8002b4c:	b2c9      	uxtb	r1, r1
 8002b4e:	408b      	lsls	r3, r1
 8002b50:	494b      	ldr	r1, [pc, #300]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
 8002b56:	e065      	b.n	8002c24 <HAL_RCC_OscConfig+0x604>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2300      	movs	r3, #0
 8002b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fb3a 	bl	80011fc <HAL_GetTick>
 8002b88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fb35 	bl	80011fc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d902      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	f000 bd45 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bc2:	d802      	bhi.n	8002bca <HAL_RCC_OscConfig+0x5aa>
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e013      	b.n	8002bf2 <HAL_RCC_OscConfig+0x5d2>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002be2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bee:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <HAL_RCC_OscConfig+0x660>)
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002bf8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c04:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f042 0220 	orr.w	r2, r2, #32
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f002 021f 	and.w	r2, r2, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1b4      	bne.n	8002b8e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8115 	beq.w	8002e64 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d07e      	beq.n	8002d48 <HAL_RCC_OscConfig+0x728>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCC_OscConfig+0x664>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2301      	movs	r3, #1
 8002c72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe fac2 	bl	80011fc <HAL_GetTick>
 8002c78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7c:	e00f      	b.n	8002c9e <HAL_RCC_OscConfig+0x67e>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fe fab8 	bl	80011fc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d902      	bls.n	8002c9e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f000 bcc8 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cb8:	2202      	movs	r2, #2
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	fa93 f2a3 	rbit	r2, r3
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002cdc:	2202      	movs	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002cf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf8:	4bb0      	ldr	r3, [pc, #704]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d04:	2102      	movs	r1, #2
 8002d06:	6019      	str	r1, [r3, #0]
 8002d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f1a3 	rbit	r1, r3
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d1e:	6019      	str	r1, [r3, #0]
  return result;
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0a0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x668>
 8002d46:	e08d      	b.n	8002e64 <HAL_RCC_OscConfig+0x844>
 8002d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d6a:	601a      	str	r2, [r3, #0]
  return result;
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002d74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b90      	ldr	r3, [pc, #576]	@ (8002fc0 <HAL_RCC_OscConfig+0x9a0>)
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	461a      	mov	r2, r3
 8002d86:	2300      	movs	r3, #0
 8002d88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fa37 	bl	80011fc <HAL_GetTick>
 8002d8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fe fa32 	bl	80011fc <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d902      	bls.n	8002daa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f000 bc42 	b.w	800362e <HAL_RCC_OscConfig+0x100e>
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002db2:	2202      	movs	r2, #2
 8002db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fa93 f2a3 	rbit	r2, r3
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f2a3 	rbit	r2, r3
 8002e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e16:	4b69      	ldr	r3, [pc, #420]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e22:	2102      	movs	r1, #2
 8002e24:	6019      	str	r1, [r3, #0]
 8002e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f1a3 	rbit	r1, r3
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e3c:	6019      	str	r1, [r3, #0]
  return result;
 8002e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d197      	bne.n	8002d94 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 819e 	beq.w	80031b6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e80:	4b4e      	ldr	r3, [pc, #312]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	61d3      	str	r3, [r2, #28]
 8002e98:	4b48      	ldr	r3, [pc, #288]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002eb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <HAL_RCC_OscConfig+0x9a4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11a      	bne.n	8002efc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc4 <HAL_RCC_OscConfig+0x9a4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc4 <HAL_RCC_OscConfig+0x9a4>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f993 	bl	80011fc <HAL_GetTick>
 8002ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	e009      	b.n	8002ef0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7fe f98e 	bl	80011fc <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b64      	cmp	r3, #100	@ 0x64
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e39e      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <HAL_RCC_OscConfig+0x9a4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ef      	beq.n	8002edc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x8fa>
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e035      	b.n	8002f86 <HAL_RCC_OscConfig+0x966>
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x924>
 8002f2a:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a23      	ldr	r2, [pc, #140]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6213      	str	r3, [r2, #32]
 8002f36:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a20      	ldr	r2, [pc, #128]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	e020      	b.n	8002f86 <HAL_RCC_OscConfig+0x966>
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x94e>
 8002f54:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	4b16      	ldr	r3, [pc, #88]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x966>
 8002f6e:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fbc <HAL_RCC_OscConfig+0x99c>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8087 	beq.w	80030a6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fe f930 	bl	80011fc <HAL_GetTick>
 8002f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	e012      	b.n	8002fc8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe f92b 	bl	80011fc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e339      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	10908120 	.word	0x10908120
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800300e:	601a      	str	r2, [r3, #0]
  return result;
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003018:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0xa10>
 800302a:	4b98      	ldr	r3, [pc, #608]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0xa38>
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003038:	2202      	movs	r2, #2
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b8d      	ldr	r3, [pc, #564]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800305c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003060:	2102      	movs	r1, #2
 8003062:	6011      	str	r1, [r2, #0]
 8003064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003068:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	fa92 f1a2 	rbit	r1, r2
 8003072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003076:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800307a:	6011      	str	r1, [r2, #0]
  return result;
 800307c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003080:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f002 021f 	and.w	r2, r2, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f43f af7f 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x982>
 80030a4:	e07d      	b.n	80031a2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fe f8a9 	bl	80011fc <HAL_GetTick>
 80030aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe f8a4 	bl	80011fc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e2b2      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
 80030c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030cc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030d0:	2202      	movs	r2, #2
 80030d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80030f4:	2202      	movs	r2, #2
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800310e:	601a      	str	r2, [r3, #0]
  return result;
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003118:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_RCC_OscConfig+0xb10>
 800312a:	4b58      	ldr	r3, [pc, #352]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	e013      	b.n	8003158 <HAL_RCC_OscConfig+0xb38>
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003140:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	4b4d      	ldr	r3, [pc, #308]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800315c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003160:	2102      	movs	r1, #2
 8003162:	6011      	str	r1, [r2, #0]
 8003164:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003168:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	fa92 f1a2 	rbit	r1, r2
 8003172:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003176:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800317a:	6011      	str	r1, [r2, #0]
  return result;
 800317c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003180:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	fab2 f282 	clz	r2, r2
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f002 021f 	and.w	r2, r2, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d186      	bne.n	80030b0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b38      	ldr	r3, [pc, #224]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	4a37      	ldr	r2, [pc, #220]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8232 	beq.w	800362c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c8:	4b30      	ldr	r3, [pc, #192]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 030c 	and.w	r3, r3, #12
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	f000 8201 	beq.w	80035d8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	f040 8157 	bne.w	8003496 <HAL_RCC_OscConfig+0xe76>
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fa93 f2a3 	rbit	r2, r3
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800320c:	601a      	str	r2, [r3, #0]
  return result;
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003216:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003222:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	2300      	movs	r3, #0
 800322c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7fd ffe5 	bl	80011fc <HAL_GetTick>
 8003232:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	e009      	b.n	800324c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fd ffe0 	bl	80011fc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e1f0      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003254:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003270:	601a      	str	r2, [r3, #0]
  return result;
 8003272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003276:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800327a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b3f      	cmp	r3, #63	@ 0x3f
 8003284:	d804      	bhi.n	8003290 <HAL_RCC_OscConfig+0xc70>
 8003286:	4b01      	ldr	r3, [pc, #4]	@ (800328c <HAL_RCC_OscConfig+0xc6c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	e029      	b.n	80032e0 <HAL_RCC_OscConfig+0xcc0>
 800328c:	40021000 	.word	0x40021000
 8003290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003294:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003298:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800329c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	4bc3      	ldr	r3, [pc, #780]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032e4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032ec:	6011      	str	r1, [r2, #0]
 80032ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	fa92 f1a2 	rbit	r1, r2
 80032fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003300:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003304:	6011      	str	r1, [r2, #0]
  return result;
 8003306:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d185      	bne.n	8003238 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	4baf      	ldr	r3, [pc, #700]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	430b      	orrs	r3, r1
 800334e:	49a7      	ldr	r1, [pc, #668]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800335c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003378:	601a      	str	r2, [r3, #0]
  return result;
 800337a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003382:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800338e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	461a      	mov	r2, r3
 8003396:	2301      	movs	r3, #1
 8003398:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fd ff2f 	bl	80011fc <HAL_GetTick>
 800339e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a2:	e009      	b.n	80033b8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fd ff2a 	bl	80011fc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e13a      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
 80033b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	fa93 f2a3 	rbit	r2, r3
 80033d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033dc:	601a      	str	r2, [r3, #0]
  return result;
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80033e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80033f0:	d802      	bhi.n	80033f8 <HAL_RCC_OscConfig+0xdd8>
 80033f2:	4b7e      	ldr	r3, [pc, #504]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	e027      	b.n	8003448 <HAL_RCC_OscConfig+0xe28>
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	fa93 f2a3 	rbit	r2, r3
 8003414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003418:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	4b69      	ldr	r3, [pc, #420]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800344c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003450:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003454:	6011      	str	r1, [r2, #0]
 8003456:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800345a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	fa92 f1a2 	rbit	r1, r2
 8003464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003468:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800346c:	6011      	str	r1, [r2, #0]
  return result;
 800346e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003472:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	fab2 f282 	clz	r2, r2
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	f042 0220 	orr.w	r2, r2, #32
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	f002 021f 	and.w	r2, r2, #31
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f202 	lsl.w	r2, r1, r2
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d087      	beq.n	80033a4 <HAL_RCC_OscConfig+0xd84>
 8003494:	e0ca      	b.n	800362c <HAL_RCC_OscConfig+0x100c>
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800349e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	fa93 f2a3 	rbit	r2, r3
 80034b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034ba:	601a      	str	r2, [r3, #0]
  return result;
 80034bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80034c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	461a      	mov	r2, r3
 80034d8:	2300      	movs	r3, #0
 80034da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fd fe8e 	bl	80011fc <HAL_GetTick>
 80034e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	e009      	b.n	80034fa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd fe89 	bl	80011fc <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e099      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003502:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800351e:	601a      	str	r2, [r3, #0]
  return result;
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b3f      	cmp	r3, #63	@ 0x3f
 8003532:	d802      	bhi.n	800353a <HAL_RCC_OscConfig+0xf1a>
 8003534:	4b2d      	ldr	r3, [pc, #180]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	e027      	b.n	800358a <HAL_RCC_OscConfig+0xf6a>
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003542:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003564:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003568:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_RCC_OscConfig+0xfcc>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003592:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003596:	6011      	str	r1, [r2, #0]
 8003598:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800359c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	fa92 f1a2 	rbit	r1, r2
 80035a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035ae:	6011      	str	r1, [r2, #0]
  return result;
 80035b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	fab2 f282 	clz	r2, r2
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f042 0220 	orr.w	r2, r2, #32
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	f002 021f 	and.w	r2, r2, #31
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d187      	bne.n	80034e6 <HAL_RCC_OscConfig+0xec6>
 80035d6:	e029      	b.n	800362c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d103      	bne.n	80035f0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e020      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
 80035ec:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035f0:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <HAL_RCC_OscConfig+0x1018>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80035fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	d10b      	bne.n	8003628 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003610:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003614:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000

0800363c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b09e      	sub	sp, #120	@ 0x78
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e154      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b89      	ldr	r3, [pc, #548]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b86      	ldr	r3, [pc, #536]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4984      	ldr	r1, [pc, #528]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b82      	ldr	r3, [pc, #520]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e13c      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b7b      	ldr	r3, [pc, #492]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4978      	ldr	r1, [pc, #480]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80cd 	beq.w	800384a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d137      	bne.n	8003728 <HAL_RCC_ClockConfig+0xec>
 80036b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80036c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80036d0:	d802      	bhi.n	80036d8 <HAL_RCC_ClockConfig+0x9c>
 80036d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	e00f      	b.n	80036f8 <HAL_RCC_ClockConfig+0xbc>
 80036d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80036e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80036ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036f4:	4b62      	ldr	r3, [pc, #392]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003700:	fa92 f2a2 	rbit	r2, r2
 8003704:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003706:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003708:	fab2 f282 	clz	r2, r2
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	f042 0220 	orr.w	r2, r2, #32
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	f002 021f 	and.w	r2, r2, #31
 8003718:	2101      	movs	r1, #1
 800371a:	fa01 f202 	lsl.w	r2, r1, r2
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d171      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0ea      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d137      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x164>
 8003730:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003734:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800373e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b3f      	cmp	r3, #63	@ 0x3f
 8003748:	d802      	bhi.n	8003750 <HAL_RCC_ClockConfig+0x114>
 800374a:	4b4d      	ldr	r3, [pc, #308]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e00f      	b.n	8003770 <HAL_RCC_ClockConfig+0x134>
 8003750:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003754:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	647b      	str	r3, [r7, #68]	@ 0x44
 800375e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003762:	643b      	str	r3, [r7, #64]	@ 0x40
 8003764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003766:	fa93 f3a3 	rbit	r3, r3
 800376a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800376c:	4b44      	ldr	r3, [pc, #272]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003774:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003778:	fa92 f2a2 	rbit	r2, r2
 800377c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800377e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003780:	fab2 f282 	clz	r2, r2
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f042 0220 	orr.w	r2, r2, #32
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	f002 021f 	and.w	r2, r2, #31
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f202 	lsl.w	r2, r1, r2
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d135      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0ae      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
 80037a0:	2302      	movs	r3, #2
 80037a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80037b6:	d802      	bhi.n	80037be <HAL_RCC_ClockConfig+0x182>
 80037b8:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e00d      	b.n	80037da <HAL_RCC_ClockConfig+0x19e>
 80037be:	2302      	movs	r3, #2
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	2302      	movs	r3, #2
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	2202      	movs	r2, #2
 80037dc:	61ba      	str	r2, [r7, #24]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	fa92 f2a2 	rbit	r2, r2
 80037e4:	617a      	str	r2, [r7, #20]
  return result;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	fab2 f282 	clz	r2, r2
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	f042 0220 	orr.w	r2, r2, #32
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f002 021f 	and.w	r2, r2, #31
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e07a      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 0203 	bic.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	491a      	ldr	r1, [pc, #104]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800381a:	f7fd fcef 	bl	80011fc <HAL_GetTick>
 800381e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003820:	e00a      	b.n	8003838 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003822:	f7fd fceb 	bl	80011fc <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e062      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_ClockConfig+0x244>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 020c 	and.w	r2, r3, #12
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	429a      	cmp	r2, r3
 8003848:	d1eb      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384a:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d215      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003858:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 0207 	bic.w	r2, r3, #7
 8003860:	4906      	ldr	r1, [pc, #24]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <HAL_RCC_ClockConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d006      	beq.n	8003884 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e041      	b.n	80038fe <HAL_RCC_ClockConfig+0x2c2>
 800387a:	bf00      	nop
 800387c:	40022000 	.word	0x40022000
 8003880:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <HAL_RCC_ClockConfig+0x2cc>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	491a      	ldr	r1, [pc, #104]	@ (8003908 <HAL_RCC_ClockConfig+0x2cc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ae:	4b16      	ldr	r3, [pc, #88]	@ (8003908 <HAL_RCC_ClockConfig+0x2cc>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4912      	ldr	r1, [pc, #72]	@ (8003908 <HAL_RCC_ClockConfig+0x2cc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038c2:	f000 f829 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038c6:	4601      	mov	r1, r0
 80038c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <HAL_RCC_ClockConfig+0x2cc>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d0:	22f0      	movs	r2, #240	@ 0xf0
 80038d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	60fa      	str	r2, [r7, #12]
  return result;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	40d3      	lsrs	r3, r2
 80038e6:	4a09      	ldr	r2, [pc, #36]	@ (800390c <HAL_RCC_ClockConfig+0x2d0>)
 80038e8:	5cd3      	ldrb	r3, [r2, r3]
 80038ea:	fa21 f303 	lsr.w	r3, r1, r3
 80038ee:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <HAL_RCC_ClockConfig+0x2d4>)
 80038f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038f2:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <HAL_RCC_ClockConfig+0x2d8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fc3c 	bl	8001174 <HAL_InitTick>
  
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3778      	adds	r7, #120	@ 0x78
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	08005ecc 	.word	0x08005ecc
 8003910:	20000000 	.word	0x20000000
 8003914:	20000004 	.word	0x20000004

08003918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x30>
 8003942:	2b08      	cmp	r3, #8
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x36>
 8003946:	e026      	b.n	8003996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003948:	4b19      	ldr	r3, [pc, #100]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800394a:	613b      	str	r3, [r7, #16]
      break;
 800394c:	e026      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0c9b      	lsrs	r3, r3, #18
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4a17      	ldr	r2, [pc, #92]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x94>)
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	4a14      	ldr	r2, [pc, #80]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003966:	5cd3      	ldrb	r3, [r2, r3]
 8003968:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003974:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	fbb2 f2f3 	udiv	r2, r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e004      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a0c      	ldr	r2, [pc, #48]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
      break;
 8003994:	e002      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003998:	613b      	str	r3, [r7, #16]
      break;
 800399a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399c:	693b      	ldr	r3, [r7, #16]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	007a1200 	.word	0x007a1200
 80039b4:	08005ee4 	.word	0x08005ee4
 80039b8:	08005ef4 	.word	0x08005ef4
 80039bc:	003d0900 	.word	0x003d0900

080039c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c4:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000000 	.word	0x20000000

080039d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80039de:	f7ff ffef 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 80039e2:	4601      	mov	r1, r0
 80039e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039ec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	fa92 f2a2 	rbit	r2, r2
 80039f8:	603a      	str	r2, [r7, #0]
  return result;
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	fab2 f282 	clz	r2, r2
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	40d3      	lsrs	r3, r2
 8003a04:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08005edc 	.word	0x08005edc

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a22:	f7ff ffcd 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8003a26:	4601      	mov	r1, r0
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003a30:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003a34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	fa92 f2a2 	rbit	r2, r2
 8003a3c:	603a      	str	r2, [r7, #0]
  return result;
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	fab2 f282 	clz	r2, r2
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	40d3      	lsrs	r3, r2
 8003a48:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	08005edc 	.word	0x08005edc

08003a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b092      	sub	sp, #72	@ 0x48
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80cb 	beq.w	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a84:	4b8d      	ldr	r3, [pc, #564]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10e      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	4b8a      	ldr	r3, [pc, #552]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a89      	ldr	r2, [pc, #548]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	61d3      	str	r3, [r2, #28]
 8003a9c:	4b87      	ldr	r3, [pc, #540]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aae:	4b84      	ldr	r3, [pc, #528]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d118      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aba:	4b81      	ldr	r3, [pc, #516]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a80      	ldr	r2, [pc, #512]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fb99 	bl	80011fc <HAL_GetTick>
 8003aca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	e008      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ace:	f7fd fb95 	bl	80011fc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b64      	cmp	r3, #100	@ 0x64
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0e8      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae0:	4b77      	ldr	r3, [pc, #476]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aec:	4b73      	ldr	r3, [pc, #460]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d07b      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d074      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b65      	ldr	r3, [pc, #404]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	461a      	mov	r2, r3
 8003b34:	2301      	movs	r3, #1
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4b5c      	ldr	r3, [pc, #368]	@ (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b5c:	4a57      	ldr	r2, [pc, #348]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b60:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d043      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fb46 	bl	80011fc <HAL_GetTick>
 8003b70:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fd fb42 	bl	80011fc <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e093      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b96:	2302      	movs	r3, #2
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	61fb      	str	r3, [r7, #28]
  return result;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	fab3 f383 	clz	r3, r3
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003bb4:	4b41      	ldr	r3, [pc, #260]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	e007      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	2202      	movs	r2, #2
 8003bcc:	613a      	str	r2, [r7, #16]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0bf      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003bf4:	4b31      	ldr	r3, [pc, #196]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	492e      	ldr	r1, [pc, #184]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4a2a      	ldr	r2, [pc, #168]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c18:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c26:	4b25      	ldr	r3, [pc, #148]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4922      	ldr	r1, [pc, #136]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c44:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	f023 0210 	bic.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	491a      	ldr	r1, [pc, #104]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	4913      	ldr	r1, [pc, #76]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	490b      	ldr	r1, [pc, #44]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c9e:	4b07      	ldr	r3, [pc, #28]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	4904      	ldr	r1, [pc, #16]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3748      	adds	r7, #72	@ 0x48
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	10908100 	.word	0x10908100

08003cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e040      	b.n	8003d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f916 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9e8 	bl	80040e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8af 	bl	8003e78 <UART_SetConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e01b      	b.n	8003d5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fa67 	bl	8004228 <UART_CheckIdleState>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d177      	bne.n	8003e6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <HAL_UART_Transmit+0x24>
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e070      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2221      	movs	r2, #33	@ 0x21
 8003d98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9a:	f7fd fa2f 	bl	80011fc <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	88fa      	ldrh	r2, [r7, #6]
 8003da4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	88fa      	ldrh	r2, [r7, #6]
 8003dac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003db8:	d108      	bne.n	8003dcc <HAL_UART_Transmit+0x68>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	e003      	b.n	8003dd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dd4:	e02f      	b.n	8003e36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fac9 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e03b      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	3302      	adds	r3, #2
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e007      	b.n	8003e24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3301      	adds	r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1c9      	bne.n	8003dd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2140      	movs	r1, #64	@ 0x40
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fa93 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e005      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b8a      	ldr	r3, [pc, #552]	@ (80040cc <UART_SetConfig+0x254>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	6979      	ldr	r1, [r7, #20]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a78      	ldr	r2, [pc, #480]	@ (80040d0 <UART_SetConfig+0x258>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d120      	bne.n	8003f36 <UART_SetConfig+0xbe>
 8003ef4:	4b77      	ldr	r3, [pc, #476]	@ (80040d4 <UART_SetConfig+0x25c>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d817      	bhi.n	8003f30 <UART_SetConfig+0xb8>
 8003f00:	a201      	add	r2, pc, #4	@ (adr r2, 8003f08 <UART_SetConfig+0x90>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f25 	.word	0x08003f25
 8003f10:	08003f2b 	.word	0x08003f2b
 8003f14:	08003f1f 	.word	0x08003f1f
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e01d      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e01a      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e017      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e014      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e011      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a67      	ldr	r2, [pc, #412]	@ (80040d8 <UART_SetConfig+0x260>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d102      	bne.n	8003f46 <UART_SetConfig+0xce>
 8003f40:	2300      	movs	r3, #0
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e009      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a64      	ldr	r2, [pc, #400]	@ (80040dc <UART_SetConfig+0x264>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d102      	bne.n	8003f56 <UART_SetConfig+0xde>
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e001      	b.n	8003f5a <UART_SetConfig+0xe2>
 8003f56:	2310      	movs	r3, #16
 8003f58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f62:	d15a      	bne.n	800401a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003f64:	7ffb      	ldrb	r3, [r7, #31]
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d827      	bhi.n	8003fba <UART_SetConfig+0x142>
 8003f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f70 <UART_SetConfig+0xf8>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003f9d 	.word	0x08003f9d
 8003f78:	08003fa5 	.word	0x08003fa5
 8003f7c:	08003fbb 	.word	0x08003fbb
 8003f80:	08003fab 	.word	0x08003fab
 8003f84:	08003fbb 	.word	0x08003fbb
 8003f88:	08003fbb 	.word	0x08003fbb
 8003f8c:	08003fbb 	.word	0x08003fbb
 8003f90:	08003fb3 	.word	0x08003fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f94:	f7ff fd20 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8003f98:	61b8      	str	r0, [r7, #24]
        break;
 8003f9a:	e013      	b.n	8003fc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f9c:	f7ff fd3e 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8003fa0:	61b8      	str	r0, [r7, #24]
        break;
 8003fa2:	e00f      	b.n	8003fc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80040e0 <UART_SetConfig+0x268>)
 8003fa6:	61bb      	str	r3, [r7, #24]
        break;
 8003fa8:	e00c      	b.n	8003fc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003faa:	f7ff fcb5 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8003fae:	61b8      	str	r0, [r7, #24]
        break;
 8003fb0:	e008      	b.n	8003fc4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fb6:	61bb      	str	r3, [r7, #24]
        break;
 8003fb8:	e004      	b.n	8003fc4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d074      	beq.n	80040b4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	005a      	lsls	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	d916      	bls.n	8004014 <UART_SetConfig+0x19c>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fec:	d212      	bcs.n	8004014 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f023 030f 	bic.w	r3, r3, #15
 8003ff6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	b29a      	uxth	r2, r3
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	4313      	orrs	r3, r2
 8004008:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	89fa      	ldrh	r2, [r7, #14]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e04f      	b.n	80040b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	77bb      	strb	r3, [r7, #30]
 8004018:	e04c      	b.n	80040b4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800401a:	7ffb      	ldrb	r3, [r7, #31]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d828      	bhi.n	8004072 <UART_SetConfig+0x1fa>
 8004020:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <UART_SetConfig+0x1b0>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800404d 	.word	0x0800404d
 800402c:	08004055 	.word	0x08004055
 8004030:	0800405d 	.word	0x0800405d
 8004034:	08004073 	.word	0x08004073
 8004038:	08004063 	.word	0x08004063
 800403c:	08004073 	.word	0x08004073
 8004040:	08004073 	.word	0x08004073
 8004044:	08004073 	.word	0x08004073
 8004048:	0800406b 	.word	0x0800406b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800404c:	f7ff fcc4 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8004050:	61b8      	str	r0, [r7, #24]
        break;
 8004052:	e013      	b.n	800407c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004054:	f7ff fce2 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8004058:	61b8      	str	r0, [r7, #24]
        break;
 800405a:	e00f      	b.n	800407c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800405c:	4b20      	ldr	r3, [pc, #128]	@ (80040e0 <UART_SetConfig+0x268>)
 800405e:	61bb      	str	r3, [r7, #24]
        break;
 8004060:	e00c      	b.n	800407c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004062:	f7ff fc59 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8004066:	61b8      	str	r0, [r7, #24]
        break;
 8004068:	e008      	b.n	800407c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800406e:	61bb      	str	r3, [r7, #24]
        break;
 8004070:	e004      	b.n	800407c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	77bb      	strb	r3, [r7, #30]
        break;
 800407a:	bf00      	nop
    }

    if (pclk != 0U)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d018      	beq.n	80040b4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	085a      	lsrs	r2, r3, #1
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d909      	bls.n	80040b0 <UART_SetConfig+0x238>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a2:	d205      	bcs.n	80040b0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	e001      	b.n	80040b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80040c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	efff69f3 	.word	0xefff69f3
 80040d0:	40013800 	.word	0x40013800
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40004400 	.word	0x40004400
 80040dc:	40004800 	.word	0x40004800
 80040e0:	007a1200 	.word	0x007a1200

080040e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01a      	beq.n	80041fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e2:	d10a      	bne.n	80041fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b098      	sub	sp, #96	@ 0x60
 800422c:	af02      	add	r7, sp, #8
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004238:	f7fc ffe0 	bl	80011fc <HAL_GetTick>
 800423c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b08      	cmp	r3, #8
 800424a:	d12e      	bne.n	80042aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800424c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004254:	2200      	movs	r2, #0
 8004256:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f88c 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d021      	beq.n	80042aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427a:	653b      	str	r3, [r7, #80]	@ 0x50
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004284:	647b      	str	r3, [r7, #68]	@ 0x44
 8004286:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800428a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e6      	bne.n	8004266 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e062      	b.n	8004370 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d149      	bne.n	800434c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f856 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03c      	beq.n	800434c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	623b      	str	r3, [r7, #32]
   return(result);
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e6      	bne.n	80042d2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	60fb      	str	r3, [r7, #12]
   return(result);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004324:	61fa      	str	r2, [r7, #28]
 8004326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	69b9      	ldr	r1, [r7, #24]
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	617b      	str	r3, [r7, #20]
   return(result);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e011      	b.n	8004370 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3758      	adds	r7, #88	@ 0x58
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004388:	e04f      	b.n	800442a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d04b      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fc ff33 	bl	80011fc <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e04e      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d037      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b80      	cmp	r3, #128	@ 0x80
 80043be:	d034      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b40      	cmp	r3, #64	@ 0x40
 80043c4:	d031      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d110      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2208      	movs	r2, #8
 80043da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f838 	bl	8004452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2208      	movs	r2, #8
 80043e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e029      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004404:	d111      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800440e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f81e 	bl	8004452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00f      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4013      	ands	r3, r2
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	429a      	cmp	r2, r3
 8004446:	d0a0      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b095      	sub	sp, #84	@ 0x54
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004478:	643b      	str	r3, [r7, #64]	@ 0x40
 800447a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800447e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e6      	bne.n	800445a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	61fb      	str	r3, [r7, #28]
   return(result);
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e5      	bne.n	800448c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d118      	bne.n	80044fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 0310 	bic.w	r3, r3, #16
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6979      	ldr	r1, [r7, #20]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	613b      	str	r3, [r7, #16]
   return(result);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e6      	bne.n	80044c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800450e:	bf00      	nop
 8004510:	3754      	adds	r7, #84	@ 0x54
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <siprintf>:
 800451c:	b40e      	push	{r1, r2, r3}
 800451e:	b510      	push	{r4, lr}
 8004520:	b09d      	sub	sp, #116	@ 0x74
 8004522:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004524:	9002      	str	r0, [sp, #8]
 8004526:	9006      	str	r0, [sp, #24]
 8004528:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800452c:	480a      	ldr	r0, [pc, #40]	@ (8004558 <siprintf+0x3c>)
 800452e:	9107      	str	r1, [sp, #28]
 8004530:	9104      	str	r1, [sp, #16]
 8004532:	490a      	ldr	r1, [pc, #40]	@ (800455c <siprintf+0x40>)
 8004534:	f853 2b04 	ldr.w	r2, [r3], #4
 8004538:	9105      	str	r1, [sp, #20]
 800453a:	2400      	movs	r4, #0
 800453c:	a902      	add	r1, sp, #8
 800453e:	6800      	ldr	r0, [r0, #0]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004544:	f000 f994 	bl	8004870 <_svfiprintf_r>
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	701c      	strb	r4, [r3, #0]
 800454c:	b01d      	add	sp, #116	@ 0x74
 800454e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004552:	b003      	add	sp, #12
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	2000000c 	.word	0x2000000c
 800455c:	ffff0208 	.word	0xffff0208

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	@ (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000000c 	.word	0x2000000c

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	@ (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	@ (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	@ (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	@ (80045c0 <__libc_init_array+0x44>)
 8004590:	f001 fc8a 	bl	8005ea8 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08006118 	.word	0x08006118
 80045b8:	08006118 	.word	0x08006118
 80045bc:	08006118 	.word	0x08006118
 80045c0:	0800611c 	.word	0x0800611c

080045c4 <__retarget_lock_acquire_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <__retarget_lock_release_recursive>:
 80045c6:	4770      	bx	lr

080045c8 <_free_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4605      	mov	r5, r0
 80045cc:	2900      	cmp	r1, #0
 80045ce:	d041      	beq.n	8004654 <_free_r+0x8c>
 80045d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d4:	1f0c      	subs	r4, r1, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfb8      	it	lt
 80045da:	18e4      	addlt	r4, r4, r3
 80045dc:	f000 f8e0 	bl	80047a0 <__malloc_lock>
 80045e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <_free_r+0x90>)
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	b933      	cbnz	r3, 80045f4 <_free_r+0x2c>
 80045e6:	6063      	str	r3, [r4, #4]
 80045e8:	6014      	str	r4, [r2, #0]
 80045ea:	4628      	mov	r0, r5
 80045ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f0:	f000 b8dc 	b.w	80047ac <__malloc_unlock>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d908      	bls.n	800460a <_free_r+0x42>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	1821      	adds	r1, r4, r0
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf01      	itttt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	1809      	addeq	r1, r1, r0
 8004606:	6021      	streq	r1, [r4, #0]
 8004608:	e7ed      	b.n	80045e6 <_free_r+0x1e>
 800460a:	461a      	mov	r2, r3
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b10b      	cbz	r3, 8004614 <_free_r+0x4c>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d9fa      	bls.n	800460a <_free_r+0x42>
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	1850      	adds	r0, r2, r1
 8004618:	42a0      	cmp	r0, r4
 800461a:	d10b      	bne.n	8004634 <_free_r+0x6c>
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	4401      	add	r1, r0
 8004620:	1850      	adds	r0, r2, r1
 8004622:	4283      	cmp	r3, r0
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	d1e0      	bne.n	80045ea <_free_r+0x22>
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	6053      	str	r3, [r2, #4]
 800462e:	4408      	add	r0, r1
 8004630:	6010      	str	r0, [r2, #0]
 8004632:	e7da      	b.n	80045ea <_free_r+0x22>
 8004634:	d902      	bls.n	800463c <_free_r+0x74>
 8004636:	230c      	movs	r3, #12
 8004638:	602b      	str	r3, [r5, #0]
 800463a:	e7d6      	b.n	80045ea <_free_r+0x22>
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	1821      	adds	r1, r4, r0
 8004640:	428b      	cmp	r3, r1
 8004642:	bf04      	itt	eq
 8004644:	6819      	ldreq	r1, [r3, #0]
 8004646:	685b      	ldreq	r3, [r3, #4]
 8004648:	6063      	str	r3, [r4, #4]
 800464a:	bf04      	itt	eq
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	6054      	str	r4, [r2, #4]
 8004652:	e7ca      	b.n	80045ea <_free_r+0x22>
 8004654:	bd38      	pop	{r3, r4, r5, pc}
 8004656:	bf00      	nop
 8004658:	2000036c 	.word	0x2000036c

0800465c <sbrk_aligned>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4e0f      	ldr	r6, [pc, #60]	@ (800469c <sbrk_aligned+0x40>)
 8004660:	460c      	mov	r4, r1
 8004662:	6831      	ldr	r1, [r6, #0]
 8004664:	4605      	mov	r5, r0
 8004666:	b911      	cbnz	r1, 800466e <sbrk_aligned+0x12>
 8004668:	f000 fba4 	bl	8004db4 <_sbrk_r>
 800466c:	6030      	str	r0, [r6, #0]
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 fb9f 	bl	8004db4 <_sbrk_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d103      	bne.n	8004682 <sbrk_aligned+0x26>
 800467a:	f04f 34ff 	mov.w	r4, #4294967295
 800467e:	4620      	mov	r0, r4
 8004680:	bd70      	pop	{r4, r5, r6, pc}
 8004682:	1cc4      	adds	r4, r0, #3
 8004684:	f024 0403 	bic.w	r4, r4, #3
 8004688:	42a0      	cmp	r0, r4
 800468a:	d0f8      	beq.n	800467e <sbrk_aligned+0x22>
 800468c:	1a21      	subs	r1, r4, r0
 800468e:	4628      	mov	r0, r5
 8004690:	f000 fb90 	bl	8004db4 <_sbrk_r>
 8004694:	3001      	adds	r0, #1
 8004696:	d1f2      	bne.n	800467e <sbrk_aligned+0x22>
 8004698:	e7ef      	b.n	800467a <sbrk_aligned+0x1e>
 800469a:	bf00      	nop
 800469c:	20000368 	.word	0x20000368

080046a0 <_malloc_r>:
 80046a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a4:	1ccd      	adds	r5, r1, #3
 80046a6:	f025 0503 	bic.w	r5, r5, #3
 80046aa:	3508      	adds	r5, #8
 80046ac:	2d0c      	cmp	r5, #12
 80046ae:	bf38      	it	cc
 80046b0:	250c      	movcc	r5, #12
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	4606      	mov	r6, r0
 80046b6:	db01      	blt.n	80046bc <_malloc_r+0x1c>
 80046b8:	42a9      	cmp	r1, r5
 80046ba:	d904      	bls.n	80046c6 <_malloc_r+0x26>
 80046bc:	230c      	movs	r3, #12
 80046be:	6033      	str	r3, [r6, #0]
 80046c0:	2000      	movs	r0, #0
 80046c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800479c <_malloc_r+0xfc>
 80046ca:	f000 f869 	bl	80047a0 <__malloc_lock>
 80046ce:	f8d8 3000 	ldr.w	r3, [r8]
 80046d2:	461c      	mov	r4, r3
 80046d4:	bb44      	cbnz	r4, 8004728 <_malloc_r+0x88>
 80046d6:	4629      	mov	r1, r5
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff ffbf 	bl	800465c <sbrk_aligned>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	4604      	mov	r4, r0
 80046e2:	d158      	bne.n	8004796 <_malloc_r+0xf6>
 80046e4:	f8d8 4000 	ldr.w	r4, [r8]
 80046e8:	4627      	mov	r7, r4
 80046ea:	2f00      	cmp	r7, #0
 80046ec:	d143      	bne.n	8004776 <_malloc_r+0xd6>
 80046ee:	2c00      	cmp	r4, #0
 80046f0:	d04b      	beq.n	800478a <_malloc_r+0xea>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	4639      	mov	r1, r7
 80046f6:	4630      	mov	r0, r6
 80046f8:	eb04 0903 	add.w	r9, r4, r3
 80046fc:	f000 fb5a 	bl	8004db4 <_sbrk_r>
 8004700:	4581      	cmp	r9, r0
 8004702:	d142      	bne.n	800478a <_malloc_r+0xea>
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	1a6d      	subs	r5, r5, r1
 8004708:	4629      	mov	r1, r5
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff ffa6 	bl	800465c <sbrk_aligned>
 8004710:	3001      	adds	r0, #1
 8004712:	d03a      	beq.n	800478a <_malloc_r+0xea>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	442b      	add	r3, r5
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	f8d8 3000 	ldr.w	r3, [r8]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	bb62      	cbnz	r2, 800477c <_malloc_r+0xdc>
 8004722:	f8c8 7000 	str.w	r7, [r8]
 8004726:	e00f      	b.n	8004748 <_malloc_r+0xa8>
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	1b52      	subs	r2, r2, r5
 800472c:	d420      	bmi.n	8004770 <_malloc_r+0xd0>
 800472e:	2a0b      	cmp	r2, #11
 8004730:	d917      	bls.n	8004762 <_malloc_r+0xc2>
 8004732:	1961      	adds	r1, r4, r5
 8004734:	42a3      	cmp	r3, r4
 8004736:	6025      	str	r5, [r4, #0]
 8004738:	bf18      	it	ne
 800473a:	6059      	strne	r1, [r3, #4]
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	bf08      	it	eq
 8004740:	f8c8 1000 	streq.w	r1, [r8]
 8004744:	5162      	str	r2, [r4, r5]
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f82f 	bl	80047ac <__malloc_unlock>
 800474e:	f104 000b 	add.w	r0, r4, #11
 8004752:	1d23      	adds	r3, r4, #4
 8004754:	f020 0007 	bic.w	r0, r0, #7
 8004758:	1ac2      	subs	r2, r0, r3
 800475a:	bf1c      	itt	ne
 800475c:	1a1b      	subne	r3, r3, r0
 800475e:	50a3      	strne	r3, [r4, r2]
 8004760:	e7af      	b.n	80046c2 <_malloc_r+0x22>
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	42a3      	cmp	r3, r4
 8004766:	bf0c      	ite	eq
 8004768:	f8c8 2000 	streq.w	r2, [r8]
 800476c:	605a      	strne	r2, [r3, #4]
 800476e:	e7eb      	b.n	8004748 <_malloc_r+0xa8>
 8004770:	4623      	mov	r3, r4
 8004772:	6864      	ldr	r4, [r4, #4]
 8004774:	e7ae      	b.n	80046d4 <_malloc_r+0x34>
 8004776:	463c      	mov	r4, r7
 8004778:	687f      	ldr	r7, [r7, #4]
 800477a:	e7b6      	b.n	80046ea <_malloc_r+0x4a>
 800477c:	461a      	mov	r2, r3
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	42a3      	cmp	r3, r4
 8004782:	d1fb      	bne.n	800477c <_malloc_r+0xdc>
 8004784:	2300      	movs	r3, #0
 8004786:	6053      	str	r3, [r2, #4]
 8004788:	e7de      	b.n	8004748 <_malloc_r+0xa8>
 800478a:	230c      	movs	r3, #12
 800478c:	6033      	str	r3, [r6, #0]
 800478e:	4630      	mov	r0, r6
 8004790:	f000 f80c 	bl	80047ac <__malloc_unlock>
 8004794:	e794      	b.n	80046c0 <_malloc_r+0x20>
 8004796:	6005      	str	r5, [r0, #0]
 8004798:	e7d6      	b.n	8004748 <_malloc_r+0xa8>
 800479a:	bf00      	nop
 800479c:	2000036c 	.word	0x2000036c

080047a0 <__malloc_lock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	@ (80047a8 <__malloc_lock+0x8>)
 80047a2:	f7ff bf0f 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 80047a6:	bf00      	nop
 80047a8:	20000364 	.word	0x20000364

080047ac <__malloc_unlock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	@ (80047b4 <__malloc_unlock+0x8>)
 80047ae:	f7ff bf0a 	b.w	80045c6 <__retarget_lock_release_recursive>
 80047b2:	bf00      	nop
 80047b4:	20000364 	.word	0x20000364

080047b8 <__ssputs_r>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	688e      	ldr	r6, [r1, #8]
 80047be:	461f      	mov	r7, r3
 80047c0:	42be      	cmp	r6, r7
 80047c2:	680b      	ldr	r3, [r1, #0]
 80047c4:	4682      	mov	sl, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4690      	mov	r8, r2
 80047ca:	d82d      	bhi.n	8004828 <__ssputs_r+0x70>
 80047cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047d4:	d026      	beq.n	8004824 <__ssputs_r+0x6c>
 80047d6:	6965      	ldr	r5, [r4, #20]
 80047d8:	6909      	ldr	r1, [r1, #16]
 80047da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047de:	eba3 0901 	sub.w	r9, r3, r1
 80047e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047e6:	1c7b      	adds	r3, r7, #1
 80047e8:	444b      	add	r3, r9
 80047ea:	106d      	asrs	r5, r5, #1
 80047ec:	429d      	cmp	r5, r3
 80047ee:	bf38      	it	cc
 80047f0:	461d      	movcc	r5, r3
 80047f2:	0553      	lsls	r3, r2, #21
 80047f4:	d527      	bpl.n	8004846 <__ssputs_r+0x8e>
 80047f6:	4629      	mov	r1, r5
 80047f8:	f7ff ff52 	bl	80046a0 <_malloc_r>
 80047fc:	4606      	mov	r6, r0
 80047fe:	b360      	cbz	r0, 800485a <__ssputs_r+0xa2>
 8004800:	6921      	ldr	r1, [r4, #16]
 8004802:	464a      	mov	r2, r9
 8004804:	f000 fae6 	bl	8004dd4 <memcpy>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	6126      	str	r6, [r4, #16]
 8004816:	6165      	str	r5, [r4, #20]
 8004818:	444e      	add	r6, r9
 800481a:	eba5 0509 	sub.w	r5, r5, r9
 800481e:	6026      	str	r6, [r4, #0]
 8004820:	60a5      	str	r5, [r4, #8]
 8004822:	463e      	mov	r6, r7
 8004824:	42be      	cmp	r6, r7
 8004826:	d900      	bls.n	800482a <__ssputs_r+0x72>
 8004828:	463e      	mov	r6, r7
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	4632      	mov	r2, r6
 800482e:	4641      	mov	r1, r8
 8004830:	f000 faa6 	bl	8004d80 <memmove>
 8004834:	68a3      	ldr	r3, [r4, #8]
 8004836:	1b9b      	subs	r3, r3, r6
 8004838:	60a3      	str	r3, [r4, #8]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	4433      	add	r3, r6
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	2000      	movs	r0, #0
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	462a      	mov	r2, r5
 8004848:	f000 fad2 	bl	8004df0 <_realloc_r>
 800484c:	4606      	mov	r6, r0
 800484e:	2800      	cmp	r0, #0
 8004850:	d1e0      	bne.n	8004814 <__ssputs_r+0x5c>
 8004852:	6921      	ldr	r1, [r4, #16]
 8004854:	4650      	mov	r0, sl
 8004856:	f7ff feb7 	bl	80045c8 <_free_r>
 800485a:	230c      	movs	r3, #12
 800485c:	f8ca 3000 	str.w	r3, [sl]
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	e7e9      	b.n	8004842 <__ssputs_r+0x8a>
	...

08004870 <_svfiprintf_r>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	4698      	mov	r8, r3
 8004876:	898b      	ldrh	r3, [r1, #12]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	b09d      	sub	sp, #116	@ 0x74
 800487c:	4607      	mov	r7, r0
 800487e:	460d      	mov	r5, r1
 8004880:	4614      	mov	r4, r2
 8004882:	d510      	bpl.n	80048a6 <_svfiprintf_r+0x36>
 8004884:	690b      	ldr	r3, [r1, #16]
 8004886:	b973      	cbnz	r3, 80048a6 <_svfiprintf_r+0x36>
 8004888:	2140      	movs	r1, #64	@ 0x40
 800488a:	f7ff ff09 	bl	80046a0 <_malloc_r>
 800488e:	6028      	str	r0, [r5, #0]
 8004890:	6128      	str	r0, [r5, #16]
 8004892:	b930      	cbnz	r0, 80048a2 <_svfiprintf_r+0x32>
 8004894:	230c      	movs	r3, #12
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b01d      	add	sp, #116	@ 0x74
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a2:	2340      	movs	r3, #64	@ 0x40
 80048a4:	616b      	str	r3, [r5, #20]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048aa:	2320      	movs	r3, #32
 80048ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048b4:	2330      	movs	r3, #48	@ 0x30
 80048b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a54 <_svfiprintf_r+0x1e4>
 80048ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048be:	f04f 0901 	mov.w	r9, #1
 80048c2:	4623      	mov	r3, r4
 80048c4:	469a      	mov	sl, r3
 80048c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ca:	b10a      	cbz	r2, 80048d0 <_svfiprintf_r+0x60>
 80048cc:	2a25      	cmp	r2, #37	@ 0x25
 80048ce:	d1f9      	bne.n	80048c4 <_svfiprintf_r+0x54>
 80048d0:	ebba 0b04 	subs.w	fp, sl, r4
 80048d4:	d00b      	beq.n	80048ee <_svfiprintf_r+0x7e>
 80048d6:	465b      	mov	r3, fp
 80048d8:	4622      	mov	r2, r4
 80048da:	4629      	mov	r1, r5
 80048dc:	4638      	mov	r0, r7
 80048de:	f7ff ff6b 	bl	80047b8 <__ssputs_r>
 80048e2:	3001      	adds	r0, #1
 80048e4:	f000 80a7 	beq.w	8004a36 <_svfiprintf_r+0x1c6>
 80048e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048ea:	445a      	add	r2, fp
 80048ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80048ee:	f89a 3000 	ldrb.w	r3, [sl]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 809f 	beq.w	8004a36 <_svfiprintf_r+0x1c6>
 80048f8:	2300      	movs	r3, #0
 80048fa:	f04f 32ff 	mov.w	r2, #4294967295
 80048fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004902:	f10a 0a01 	add.w	sl, sl, #1
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	9307      	str	r3, [sp, #28]
 800490a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800490e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004910:	4654      	mov	r4, sl
 8004912:	2205      	movs	r2, #5
 8004914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004918:	484e      	ldr	r0, [pc, #312]	@ (8004a54 <_svfiprintf_r+0x1e4>)
 800491a:	f7fb fc61 	bl	80001e0 <memchr>
 800491e:	9a04      	ldr	r2, [sp, #16]
 8004920:	b9d8      	cbnz	r0, 800495a <_svfiprintf_r+0xea>
 8004922:	06d0      	lsls	r0, r2, #27
 8004924:	bf44      	itt	mi
 8004926:	2320      	movmi	r3, #32
 8004928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800492c:	0711      	lsls	r1, r2, #28
 800492e:	bf44      	itt	mi
 8004930:	232b      	movmi	r3, #43	@ 0x2b
 8004932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004936:	f89a 3000 	ldrb.w	r3, [sl]
 800493a:	2b2a      	cmp	r3, #42	@ 0x2a
 800493c:	d015      	beq.n	800496a <_svfiprintf_r+0xfa>
 800493e:	9a07      	ldr	r2, [sp, #28]
 8004940:	4654      	mov	r4, sl
 8004942:	2000      	movs	r0, #0
 8004944:	f04f 0c0a 	mov.w	ip, #10
 8004948:	4621      	mov	r1, r4
 800494a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800494e:	3b30      	subs	r3, #48	@ 0x30
 8004950:	2b09      	cmp	r3, #9
 8004952:	d94b      	bls.n	80049ec <_svfiprintf_r+0x17c>
 8004954:	b1b0      	cbz	r0, 8004984 <_svfiprintf_r+0x114>
 8004956:	9207      	str	r2, [sp, #28]
 8004958:	e014      	b.n	8004984 <_svfiprintf_r+0x114>
 800495a:	eba0 0308 	sub.w	r3, r0, r8
 800495e:	fa09 f303 	lsl.w	r3, r9, r3
 8004962:	4313      	orrs	r3, r2
 8004964:	9304      	str	r3, [sp, #16]
 8004966:	46a2      	mov	sl, r4
 8004968:	e7d2      	b.n	8004910 <_svfiprintf_r+0xa0>
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	1d19      	adds	r1, r3, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	9103      	str	r1, [sp, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfbb      	ittet	lt
 8004976:	425b      	neglt	r3, r3
 8004978:	f042 0202 	orrlt.w	r2, r2, #2
 800497c:	9307      	strge	r3, [sp, #28]
 800497e:	9307      	strlt	r3, [sp, #28]
 8004980:	bfb8      	it	lt
 8004982:	9204      	strlt	r2, [sp, #16]
 8004984:	7823      	ldrb	r3, [r4, #0]
 8004986:	2b2e      	cmp	r3, #46	@ 0x2e
 8004988:	d10a      	bne.n	80049a0 <_svfiprintf_r+0x130>
 800498a:	7863      	ldrb	r3, [r4, #1]
 800498c:	2b2a      	cmp	r3, #42	@ 0x2a
 800498e:	d132      	bne.n	80049f6 <_svfiprintf_r+0x186>
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	1d1a      	adds	r2, r3, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	9203      	str	r2, [sp, #12]
 8004998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800499c:	3402      	adds	r4, #2
 800499e:	9305      	str	r3, [sp, #20]
 80049a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a64 <_svfiprintf_r+0x1f4>
 80049a4:	7821      	ldrb	r1, [r4, #0]
 80049a6:	2203      	movs	r2, #3
 80049a8:	4650      	mov	r0, sl
 80049aa:	f7fb fc19 	bl	80001e0 <memchr>
 80049ae:	b138      	cbz	r0, 80049c0 <_svfiprintf_r+0x150>
 80049b0:	9b04      	ldr	r3, [sp, #16]
 80049b2:	eba0 000a 	sub.w	r0, r0, sl
 80049b6:	2240      	movs	r2, #64	@ 0x40
 80049b8:	4082      	lsls	r2, r0
 80049ba:	4313      	orrs	r3, r2
 80049bc:	3401      	adds	r4, #1
 80049be:	9304      	str	r3, [sp, #16]
 80049c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c4:	4824      	ldr	r0, [pc, #144]	@ (8004a58 <_svfiprintf_r+0x1e8>)
 80049c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049ca:	2206      	movs	r2, #6
 80049cc:	f7fb fc08 	bl	80001e0 <memchr>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d036      	beq.n	8004a42 <_svfiprintf_r+0x1d2>
 80049d4:	4b21      	ldr	r3, [pc, #132]	@ (8004a5c <_svfiprintf_r+0x1ec>)
 80049d6:	bb1b      	cbnz	r3, 8004a20 <_svfiprintf_r+0x1b0>
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	3307      	adds	r3, #7
 80049dc:	f023 0307 	bic.w	r3, r3, #7
 80049e0:	3308      	adds	r3, #8
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e6:	4433      	add	r3, r6
 80049e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ea:	e76a      	b.n	80048c2 <_svfiprintf_r+0x52>
 80049ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f0:	460c      	mov	r4, r1
 80049f2:	2001      	movs	r0, #1
 80049f4:	e7a8      	b.n	8004948 <_svfiprintf_r+0xd8>
 80049f6:	2300      	movs	r3, #0
 80049f8:	3401      	adds	r4, #1
 80049fa:	9305      	str	r3, [sp, #20]
 80049fc:	4619      	mov	r1, r3
 80049fe:	f04f 0c0a 	mov.w	ip, #10
 8004a02:	4620      	mov	r0, r4
 8004a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a08:	3a30      	subs	r2, #48	@ 0x30
 8004a0a:	2a09      	cmp	r2, #9
 8004a0c:	d903      	bls.n	8004a16 <_svfiprintf_r+0x1a6>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0c6      	beq.n	80049a0 <_svfiprintf_r+0x130>
 8004a12:	9105      	str	r1, [sp, #20]
 8004a14:	e7c4      	b.n	80049a0 <_svfiprintf_r+0x130>
 8004a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e7f0      	b.n	8004a02 <_svfiprintf_r+0x192>
 8004a20:	ab03      	add	r3, sp, #12
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	462a      	mov	r2, r5
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <_svfiprintf_r+0x1f0>)
 8004a28:	a904      	add	r1, sp, #16
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f3af 8000 	nop.w
 8004a30:	1c42      	adds	r2, r0, #1
 8004a32:	4606      	mov	r6, r0
 8004a34:	d1d6      	bne.n	80049e4 <_svfiprintf_r+0x174>
 8004a36:	89ab      	ldrh	r3, [r5, #12]
 8004a38:	065b      	lsls	r3, r3, #25
 8004a3a:	f53f af2d 	bmi.w	8004898 <_svfiprintf_r+0x28>
 8004a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a40:	e72c      	b.n	800489c <_svfiprintf_r+0x2c>
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <_svfiprintf_r+0x1f0>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f000 f879 	bl	8004b44 <_printf_i>
 8004a52:	e7ed      	b.n	8004a30 <_svfiprintf_r+0x1c0>
 8004a54:	08005f04 	.word	0x08005f04
 8004a58:	08005f0e 	.word	0x08005f0e
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	080047b9 	.word	0x080047b9
 8004a64:	08005f0a 	.word	0x08005f0a

08004a68 <_printf_common>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4698      	mov	r8, r3
 8004a70:	688a      	ldr	r2, [r1, #8]
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bfb8      	it	lt
 8004a7c:	4613      	movlt	r3, r2
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a84:	4607      	mov	r7, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	b10a      	cbz	r2, 8004a8e <_printf_common+0x26>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0699      	lsls	r1, r3, #26
 8004a92:	bf42      	ittt	mi
 8004a94:	6833      	ldrmi	r3, [r6, #0]
 8004a96:	3302      	addmi	r3, #2
 8004a98:	6033      	strmi	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d106      	bne.n	8004ab0 <_printf_common+0x48>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	6832      	ldr	r2, [r6, #0]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dc26      	bgt.n	8004afe <_printf_common+0x96>
 8004ab0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	3b00      	subs	r3, #0
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	0692      	lsls	r2, r2, #26
 8004abe:	d42b      	bmi.n	8004b18 <_printf_common+0xb0>
 8004ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ac4:	4641      	mov	r1, r8
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c8      	blx	r9
 8004aca:	3001      	adds	r0, #1
 8004acc:	d01e      	beq.n	8004b0c <_printf_common+0xa4>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf02      	ittt	eq
 8004ada:	68e5      	ldreq	r5, [r4, #12]
 8004adc:	6833      	ldreq	r3, [r6, #0]
 8004ade:	1aed      	subeq	r5, r5, r3
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	bf0c      	ite	eq
 8004ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae8:	2500      	movne	r5, #0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bfc4      	itt	gt
 8004aee:	1a9b      	subgt	r3, r3, r2
 8004af0:	18ed      	addgt	r5, r5, r3
 8004af2:	2600      	movs	r6, #0
 8004af4:	341a      	adds	r4, #26
 8004af6:	42b5      	cmp	r5, r6
 8004af8:	d11a      	bne.n	8004b30 <_printf_common+0xc8>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e008      	b.n	8004b10 <_printf_common+0xa8>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4652      	mov	r2, sl
 8004b02:	4641      	mov	r1, r8
 8004b04:	4638      	mov	r0, r7
 8004b06:	47c8      	blx	r9
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d103      	bne.n	8004b14 <_printf_common+0xac>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	3501      	adds	r5, #1
 8004b16:	e7c6      	b.n	8004aa6 <_printf_common+0x3e>
 8004b18:	18e1      	adds	r1, r4, r3
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	2030      	movs	r0, #48	@ 0x30
 8004b1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b22:	4422      	add	r2, r4
 8004b24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	e7c7      	b.n	8004ac0 <_printf_common+0x58>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4622      	mov	r2, r4
 8004b34:	4641      	mov	r1, r8
 8004b36:	4638      	mov	r0, r7
 8004b38:	47c8      	blx	r9
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d0e6      	beq.n	8004b0c <_printf_common+0xa4>
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7d9      	b.n	8004af6 <_printf_common+0x8e>
	...

08004b44 <_printf_i>:
 8004b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	7e0f      	ldrb	r7, [r1, #24]
 8004b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b4c:	2f78      	cmp	r7, #120	@ 0x78
 8004b4e:	4691      	mov	r9, r2
 8004b50:	4680      	mov	r8, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	469a      	mov	sl, r3
 8004b56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b5a:	d807      	bhi.n	8004b6c <_printf_i+0x28>
 8004b5c:	2f62      	cmp	r7, #98	@ 0x62
 8004b5e:	d80a      	bhi.n	8004b76 <_printf_i+0x32>
 8004b60:	2f00      	cmp	r7, #0
 8004b62:	f000 80d1 	beq.w	8004d08 <_printf_i+0x1c4>
 8004b66:	2f58      	cmp	r7, #88	@ 0x58
 8004b68:	f000 80b8 	beq.w	8004cdc <_printf_i+0x198>
 8004b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b74:	e03a      	b.n	8004bec <_printf_i+0xa8>
 8004b76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b7a:	2b15      	cmp	r3, #21
 8004b7c:	d8f6      	bhi.n	8004b6c <_printf_i+0x28>
 8004b7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b84 <_printf_i+0x40>)
 8004b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004b6d 	.word	0x08004b6d
 8004b90:	08004b6d 	.word	0x08004b6d
 8004b94:	08004b6d 	.word	0x08004b6d
 8004b98:	08004b6d 	.word	0x08004b6d
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004b6d 	.word	0x08004b6d
 8004ba4:	08004b6d 	.word	0x08004b6d
 8004ba8:	08004b6d 	.word	0x08004b6d
 8004bac:	08004b6d 	.word	0x08004b6d
 8004bb0:	08004cef 	.word	0x08004cef
 8004bb4:	08004c1b 	.word	0x08004c1b
 8004bb8:	08004ca9 	.word	0x08004ca9
 8004bbc:	08004b6d 	.word	0x08004b6d
 8004bc0:	08004b6d 	.word	0x08004b6d
 8004bc4:	08004d11 	.word	0x08004d11
 8004bc8:	08004b6d 	.word	0x08004b6d
 8004bcc:	08004c1b 	.word	0x08004c1b
 8004bd0:	08004b6d 	.word	0x08004b6d
 8004bd4:	08004b6d 	.word	0x08004b6d
 8004bd8:	08004cb1 	.word	0x08004cb1
 8004bdc:	6833      	ldr	r3, [r6, #0]
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6032      	str	r2, [r6, #0]
 8004be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004be8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bec:	2301      	movs	r3, #1
 8004bee:	e09c      	b.n	8004d2a <_printf_i+0x1e6>
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	6820      	ldr	r0, [r4, #0]
 8004bf4:	1d19      	adds	r1, r3, #4
 8004bf6:	6031      	str	r1, [r6, #0]
 8004bf8:	0606      	lsls	r6, r0, #24
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0xbc>
 8004bfc:	681d      	ldr	r5, [r3, #0]
 8004bfe:	e003      	b.n	8004c08 <_printf_i+0xc4>
 8004c00:	0645      	lsls	r5, r0, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0xb8>
 8004c04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	da03      	bge.n	8004c14 <_printf_i+0xd0>
 8004c0c:	232d      	movs	r3, #45	@ 0x2d
 8004c0e:	426d      	negs	r5, r5
 8004c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c14:	4858      	ldr	r0, [pc, #352]	@ (8004d78 <_printf_i+0x234>)
 8004c16:	230a      	movs	r3, #10
 8004c18:	e011      	b.n	8004c3e <_printf_i+0xfa>
 8004c1a:	6821      	ldr	r1, [r4, #0]
 8004c1c:	6833      	ldr	r3, [r6, #0]
 8004c1e:	0608      	lsls	r0, r1, #24
 8004c20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c24:	d402      	bmi.n	8004c2c <_printf_i+0xe8>
 8004c26:	0649      	lsls	r1, r1, #25
 8004c28:	bf48      	it	mi
 8004c2a:	b2ad      	uxthmi	r5, r5
 8004c2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c2e:	4852      	ldr	r0, [pc, #328]	@ (8004d78 <_printf_i+0x234>)
 8004c30:	6033      	str	r3, [r6, #0]
 8004c32:	bf14      	ite	ne
 8004c34:	230a      	movne	r3, #10
 8004c36:	2308      	moveq	r3, #8
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c3e:	6866      	ldr	r6, [r4, #4]
 8004c40:	60a6      	str	r6, [r4, #8]
 8004c42:	2e00      	cmp	r6, #0
 8004c44:	db05      	blt.n	8004c52 <_printf_i+0x10e>
 8004c46:	6821      	ldr	r1, [r4, #0]
 8004c48:	432e      	orrs	r6, r5
 8004c4a:	f021 0104 	bic.w	r1, r1, #4
 8004c4e:	6021      	str	r1, [r4, #0]
 8004c50:	d04b      	beq.n	8004cea <_printf_i+0x1a6>
 8004c52:	4616      	mov	r6, r2
 8004c54:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c58:	fb03 5711 	mls	r7, r3, r1, r5
 8004c5c:	5dc7      	ldrb	r7, [r0, r7]
 8004c5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c62:	462f      	mov	r7, r5
 8004c64:	42bb      	cmp	r3, r7
 8004c66:	460d      	mov	r5, r1
 8004c68:	d9f4      	bls.n	8004c54 <_printf_i+0x110>
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d10b      	bne.n	8004c86 <_printf_i+0x142>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	07df      	lsls	r7, r3, #31
 8004c72:	d508      	bpl.n	8004c86 <_printf_i+0x142>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	6861      	ldr	r1, [r4, #4]
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	bfde      	ittt	le
 8004c7c:	2330      	movle	r3, #48	@ 0x30
 8004c7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c86:	1b92      	subs	r2, r2, r6
 8004c88:	6122      	str	r2, [r4, #16]
 8004c8a:	f8cd a000 	str.w	sl, [sp]
 8004c8e:	464b      	mov	r3, r9
 8004c90:	aa03      	add	r2, sp, #12
 8004c92:	4621      	mov	r1, r4
 8004c94:	4640      	mov	r0, r8
 8004c96:	f7ff fee7 	bl	8004a68 <_printf_common>
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d14a      	bne.n	8004d34 <_printf_i+0x1f0>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	b004      	add	sp, #16
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	f043 0320 	orr.w	r3, r3, #32
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	4832      	ldr	r0, [pc, #200]	@ (8004d7c <_printf_i+0x238>)
 8004cb2:	2778      	movs	r7, #120	@ 0x78
 8004cb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	6831      	ldr	r1, [r6, #0]
 8004cbc:	061f      	lsls	r7, r3, #24
 8004cbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cc2:	d402      	bmi.n	8004cca <_printf_i+0x186>
 8004cc4:	065f      	lsls	r7, r3, #25
 8004cc6:	bf48      	it	mi
 8004cc8:	b2ad      	uxthmi	r5, r5
 8004cca:	6031      	str	r1, [r6, #0]
 8004ccc:	07d9      	lsls	r1, r3, #31
 8004cce:	bf44      	itt	mi
 8004cd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd4:	6023      	strmi	r3, [r4, #0]
 8004cd6:	b11d      	cbz	r5, 8004ce0 <_printf_i+0x19c>
 8004cd8:	2310      	movs	r3, #16
 8004cda:	e7ad      	b.n	8004c38 <_printf_i+0xf4>
 8004cdc:	4826      	ldr	r0, [pc, #152]	@ (8004d78 <_printf_i+0x234>)
 8004cde:	e7e9      	b.n	8004cb4 <_printf_i+0x170>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f023 0320 	bic.w	r3, r3, #32
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	e7f6      	b.n	8004cd8 <_printf_i+0x194>
 8004cea:	4616      	mov	r6, r2
 8004cec:	e7bd      	b.n	8004c6a <_printf_i+0x126>
 8004cee:	6833      	ldr	r3, [r6, #0]
 8004cf0:	6825      	ldr	r5, [r4, #0]
 8004cf2:	6961      	ldr	r1, [r4, #20]
 8004cf4:	1d18      	adds	r0, r3, #4
 8004cf6:	6030      	str	r0, [r6, #0]
 8004cf8:	062e      	lsls	r6, r5, #24
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	d501      	bpl.n	8004d02 <_printf_i+0x1be>
 8004cfe:	6019      	str	r1, [r3, #0]
 8004d00:	e002      	b.n	8004d08 <_printf_i+0x1c4>
 8004d02:	0668      	lsls	r0, r5, #25
 8004d04:	d5fb      	bpl.n	8004cfe <_printf_i+0x1ba>
 8004d06:	8019      	strh	r1, [r3, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	4616      	mov	r6, r2
 8004d0e:	e7bc      	b.n	8004c8a <_printf_i+0x146>
 8004d10:	6833      	ldr	r3, [r6, #0]
 8004d12:	1d1a      	adds	r2, r3, #4
 8004d14:	6032      	str	r2, [r6, #0]
 8004d16:	681e      	ldr	r6, [r3, #0]
 8004d18:	6862      	ldr	r2, [r4, #4]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7fb fa5f 	bl	80001e0 <memchr>
 8004d22:	b108      	cbz	r0, 8004d28 <_printf_i+0x1e4>
 8004d24:	1b80      	subs	r0, r0, r6
 8004d26:	6060      	str	r0, [r4, #4]
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d32:	e7aa      	b.n	8004c8a <_printf_i+0x146>
 8004d34:	6923      	ldr	r3, [r4, #16]
 8004d36:	4632      	mov	r2, r6
 8004d38:	4649      	mov	r1, r9
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	47d0      	blx	sl
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d0ad      	beq.n	8004c9e <_printf_i+0x15a>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	079b      	lsls	r3, r3, #30
 8004d46:	d413      	bmi.n	8004d70 <_printf_i+0x22c>
 8004d48:	68e0      	ldr	r0, [r4, #12]
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	4298      	cmp	r0, r3
 8004d4e:	bfb8      	it	lt
 8004d50:	4618      	movlt	r0, r3
 8004d52:	e7a6      	b.n	8004ca2 <_printf_i+0x15e>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4632      	mov	r2, r6
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	47d0      	blx	sl
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d09d      	beq.n	8004c9e <_printf_i+0x15a>
 8004d62:	3501      	adds	r5, #1
 8004d64:	68e3      	ldr	r3, [r4, #12]
 8004d66:	9903      	ldr	r1, [sp, #12]
 8004d68:	1a5b      	subs	r3, r3, r1
 8004d6a:	42ab      	cmp	r3, r5
 8004d6c:	dcf2      	bgt.n	8004d54 <_printf_i+0x210>
 8004d6e:	e7eb      	b.n	8004d48 <_printf_i+0x204>
 8004d70:	2500      	movs	r5, #0
 8004d72:	f104 0619 	add.w	r6, r4, #25
 8004d76:	e7f5      	b.n	8004d64 <_printf_i+0x220>
 8004d78:	08005f15 	.word	0x08005f15
 8004d7c:	08005f26 	.word	0x08005f26

08004d80 <memmove>:
 8004d80:	4288      	cmp	r0, r1
 8004d82:	b510      	push	{r4, lr}
 8004d84:	eb01 0402 	add.w	r4, r1, r2
 8004d88:	d902      	bls.n	8004d90 <memmove+0x10>
 8004d8a:	4284      	cmp	r4, r0
 8004d8c:	4623      	mov	r3, r4
 8004d8e:	d807      	bhi.n	8004da0 <memmove+0x20>
 8004d90:	1e43      	subs	r3, r0, #1
 8004d92:	42a1      	cmp	r1, r4
 8004d94:	d008      	beq.n	8004da8 <memmove+0x28>
 8004d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d9e:	e7f8      	b.n	8004d92 <memmove+0x12>
 8004da0:	4402      	add	r2, r0
 8004da2:	4601      	mov	r1, r0
 8004da4:	428a      	cmp	r2, r1
 8004da6:	d100      	bne.n	8004daa <memmove+0x2a>
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004db2:	e7f7      	b.n	8004da4 <memmove+0x24>

08004db4 <_sbrk_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d06      	ldr	r5, [pc, #24]	@ (8004dd0 <_sbrk_r+0x1c>)
 8004db8:	2300      	movs	r3, #0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	f7fc f950 	bl	8001064 <_sbrk>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_sbrk_r+0x1a>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_sbrk_r+0x1a>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	20000360 	.word	0x20000360

08004dd4 <memcpy>:
 8004dd4:	440a      	add	r2, r1
 8004dd6:	4291      	cmp	r1, r2
 8004dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ddc:	d100      	bne.n	8004de0 <memcpy+0xc>
 8004dde:	4770      	bx	lr
 8004de0:	b510      	push	{r4, lr}
 8004de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dea:	4291      	cmp	r1, r2
 8004dec:	d1f9      	bne.n	8004de2 <memcpy+0xe>
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <_realloc_r>:
 8004df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df4:	4607      	mov	r7, r0
 8004df6:	4614      	mov	r4, r2
 8004df8:	460d      	mov	r5, r1
 8004dfa:	b921      	cbnz	r1, 8004e06 <_realloc_r+0x16>
 8004dfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e00:	4611      	mov	r1, r2
 8004e02:	f7ff bc4d 	b.w	80046a0 <_malloc_r>
 8004e06:	b92a      	cbnz	r2, 8004e14 <_realloc_r+0x24>
 8004e08:	f7ff fbde 	bl	80045c8 <_free_r>
 8004e0c:	4625      	mov	r5, r4
 8004e0e:	4628      	mov	r0, r5
 8004e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e14:	f000 f81a 	bl	8004e4c <_malloc_usable_size_r>
 8004e18:	4284      	cmp	r4, r0
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	d802      	bhi.n	8004e24 <_realloc_r+0x34>
 8004e1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e22:	d8f4      	bhi.n	8004e0e <_realloc_r+0x1e>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff fc3a 	bl	80046a0 <_malloc_r>
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	b908      	cbnz	r0, 8004e34 <_realloc_r+0x44>
 8004e30:	4645      	mov	r5, r8
 8004e32:	e7ec      	b.n	8004e0e <_realloc_r+0x1e>
 8004e34:	42b4      	cmp	r4, r6
 8004e36:	4622      	mov	r2, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	bf28      	it	cs
 8004e3c:	4632      	movcs	r2, r6
 8004e3e:	f7ff ffc9 	bl	8004dd4 <memcpy>
 8004e42:	4629      	mov	r1, r5
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff fbbf 	bl	80045c8 <_free_r>
 8004e4a:	e7f1      	b.n	8004e30 <_realloc_r+0x40>

08004e4c <_malloc_usable_size_r>:
 8004e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e50:	1f18      	subs	r0, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfbc      	itt	lt
 8004e56:	580b      	ldrlt	r3, [r1, r0]
 8004e58:	18c0      	addlt	r0, r0, r3
 8004e5a:	4770      	bx	lr
 8004e5c:	0000      	movs	r0, r0
	...

08004e60 <sin>:
 8004e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e62:	ec53 2b10 	vmov	r2, r3, d0
 8004e66:	4826      	ldr	r0, [pc, #152]	@ (8004f00 <sin+0xa0>)
 8004e68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e6c:	4281      	cmp	r1, r0
 8004e6e:	d807      	bhi.n	8004e80 <sin+0x20>
 8004e70:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004ef8 <sin+0x98>
 8004e74:	2000      	movs	r0, #0
 8004e76:	b005      	add	sp, #20
 8004e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e7c:	f000 b90c 	b.w	8005098 <__kernel_sin>
 8004e80:	4820      	ldr	r0, [pc, #128]	@ (8004f04 <sin+0xa4>)
 8004e82:	4281      	cmp	r1, r0
 8004e84:	d908      	bls.n	8004e98 <sin+0x38>
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fb27 	bl	80004dc <__aeabi_dsub>
 8004e8e:	ec41 0b10 	vmov	d0, r0, r1
 8004e92:	b005      	add	sp, #20
 8004e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e98:	4668      	mov	r0, sp
 8004e9a:	f000 f9b9 	bl	8005210 <__ieee754_rem_pio2>
 8004e9e:	f000 0003 	and.w	r0, r0, #3
 8004ea2:	2801      	cmp	r0, #1
 8004ea4:	d00c      	beq.n	8004ec0 <sin+0x60>
 8004ea6:	2802      	cmp	r0, #2
 8004ea8:	d011      	beq.n	8004ece <sin+0x6e>
 8004eaa:	b9e8      	cbnz	r0, 8004ee8 <sin+0x88>
 8004eac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004eb0:	ed9d 0b00 	vldr	d0, [sp]
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f000 f8ef 	bl	8005098 <__kernel_sin>
 8004eba:	ec51 0b10 	vmov	r0, r1, d0
 8004ebe:	e7e6      	b.n	8004e8e <sin+0x2e>
 8004ec0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ec4:	ed9d 0b00 	vldr	d0, [sp]
 8004ec8:	f000 f81e 	bl	8004f08 <__kernel_cos>
 8004ecc:	e7f5      	b.n	8004eba <sin+0x5a>
 8004ece:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004ed2:	ed9d 0b00 	vldr	d0, [sp]
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f000 f8de 	bl	8005098 <__kernel_sin>
 8004edc:	ec53 2b10 	vmov	r2, r3, d0
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004ee6:	e7d2      	b.n	8004e8e <sin+0x2e>
 8004ee8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004eec:	ed9d 0b00 	vldr	d0, [sp]
 8004ef0:	f000 f80a 	bl	8004f08 <__kernel_cos>
 8004ef4:	e7f2      	b.n	8004edc <sin+0x7c>
 8004ef6:	bf00      	nop
	...
 8004f00:	3fe921fb 	.word	0x3fe921fb
 8004f04:	7fefffff 	.word	0x7fefffff

08004f08 <__kernel_cos>:
 8004f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	ec57 6b10 	vmov	r6, r7, d0
 8004f10:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004f14:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004f18:	ed8d 1b00 	vstr	d1, [sp]
 8004f1c:	d206      	bcs.n	8004f2c <__kernel_cos+0x24>
 8004f1e:	4630      	mov	r0, r6
 8004f20:	4639      	mov	r1, r7
 8004f22:	f7fb fd1b 	bl	800095c <__aeabi_d2iz>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f000 8088 	beq.w	800503c <__kernel_cos+0x134>
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	463b      	mov	r3, r7
 8004f30:	4630      	mov	r0, r6
 8004f32:	4639      	mov	r1, r7
 8004f34:	f7fb f9a4 	bl	8000280 <__aeabi_dmul>
 8004f38:	4b51      	ldr	r3, [pc, #324]	@ (8005080 <__kernel_cos+0x178>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	460d      	mov	r5, r1
 8004f40:	f7fb f99e 	bl	8000280 <__aeabi_dmul>
 8004f44:	a340      	add	r3, pc, #256	@ (adr r3, 8005048 <__kernel_cos+0x140>)
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	4682      	mov	sl, r0
 8004f4c:	468b      	mov	fp, r1
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4629      	mov	r1, r5
 8004f52:	f7fb f995 	bl	8000280 <__aeabi_dmul>
 8004f56:	a33e      	add	r3, pc, #248	@ (adr r3, 8005050 <__kernel_cos+0x148>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fac0 	bl	80004e0 <__adddf3>
 8004f60:	4622      	mov	r2, r4
 8004f62:	462b      	mov	r3, r5
 8004f64:	f7fb f98c 	bl	8000280 <__aeabi_dmul>
 8004f68:	a33b      	add	r3, pc, #236	@ (adr r3, 8005058 <__kernel_cos+0x150>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fab5 	bl	80004dc <__aeabi_dsub>
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	f7fb f983 	bl	8000280 <__aeabi_dmul>
 8004f7a:	a339      	add	r3, pc, #228	@ (adr r3, 8005060 <__kernel_cos+0x158>)
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f7fb faae 	bl	80004e0 <__adddf3>
 8004f84:	4622      	mov	r2, r4
 8004f86:	462b      	mov	r3, r5
 8004f88:	f7fb f97a 	bl	8000280 <__aeabi_dmul>
 8004f8c:	a336      	add	r3, pc, #216	@ (adr r3, 8005068 <__kernel_cos+0x160>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb faa3 	bl	80004dc <__aeabi_dsub>
 8004f96:	4622      	mov	r2, r4
 8004f98:	462b      	mov	r3, r5
 8004f9a:	f7fb f971 	bl	8000280 <__aeabi_dmul>
 8004f9e:	a334      	add	r3, pc, #208	@ (adr r3, 8005070 <__kernel_cos+0x168>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f7fb fa9c 	bl	80004e0 <__adddf3>
 8004fa8:	4622      	mov	r2, r4
 8004faa:	462b      	mov	r3, r5
 8004fac:	f7fb f968 	bl	8000280 <__aeabi_dmul>
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	f7fb f964 	bl	8000280 <__aeabi_dmul>
 8004fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	f7fb f95c 	bl	8000280 <__aeabi_dmul>
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4620      	mov	r0, r4
 8004fd0:	f7fb fa84 	bl	80004dc <__aeabi_dsub>
 8004fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <__kernel_cos+0x17c>)
 8004fd6:	4598      	cmp	r8, r3
 8004fd8:	4606      	mov	r6, r0
 8004fda:	460f      	mov	r7, r1
 8004fdc:	d810      	bhi.n	8005000 <__kernel_cos+0xf8>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	f7fb fa79 	bl	80004dc <__aeabi_dsub>
 8004fea:	460b      	mov	r3, r1
 8004fec:	4926      	ldr	r1, [pc, #152]	@ (8005088 <__kernel_cos+0x180>)
 8004fee:	4602      	mov	r2, r0
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f7fb fa73 	bl	80004dc <__aeabi_dsub>
 8004ff6:	ec41 0b10 	vmov	d0, r0, r1
 8004ffa:	b003      	add	sp, #12
 8004ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005000:	4b22      	ldr	r3, [pc, #136]	@ (800508c <__kernel_cos+0x184>)
 8005002:	4921      	ldr	r1, [pc, #132]	@ (8005088 <__kernel_cos+0x180>)
 8005004:	4598      	cmp	r8, r3
 8005006:	bf8c      	ite	hi
 8005008:	4d21      	ldrhi	r5, [pc, #132]	@ (8005090 <__kernel_cos+0x188>)
 800500a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800500e:	2400      	movs	r4, #0
 8005010:	4622      	mov	r2, r4
 8005012:	462b      	mov	r3, r5
 8005014:	2000      	movs	r0, #0
 8005016:	f7fb fa61 	bl	80004dc <__aeabi_dsub>
 800501a:	4622      	mov	r2, r4
 800501c:	4680      	mov	r8, r0
 800501e:	4689      	mov	r9, r1
 8005020:	462b      	mov	r3, r5
 8005022:	4650      	mov	r0, sl
 8005024:	4659      	mov	r1, fp
 8005026:	f7fb fa59 	bl	80004dc <__aeabi_dsub>
 800502a:	4632      	mov	r2, r6
 800502c:	463b      	mov	r3, r7
 800502e:	f7fb fa55 	bl	80004dc <__aeabi_dsub>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4640      	mov	r0, r8
 8005038:	4649      	mov	r1, r9
 800503a:	e7da      	b.n	8004ff2 <__kernel_cos+0xea>
 800503c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005078 <__kernel_cos+0x170>
 8005040:	e7db      	b.n	8004ffa <__kernel_cos+0xf2>
 8005042:	bf00      	nop
 8005044:	f3af 8000 	nop.w
 8005048:	be8838d4 	.word	0xbe8838d4
 800504c:	bda8fae9 	.word	0xbda8fae9
 8005050:	bdb4b1c4 	.word	0xbdb4b1c4
 8005054:	3e21ee9e 	.word	0x3e21ee9e
 8005058:	809c52ad 	.word	0x809c52ad
 800505c:	3e927e4f 	.word	0x3e927e4f
 8005060:	19cb1590 	.word	0x19cb1590
 8005064:	3efa01a0 	.word	0x3efa01a0
 8005068:	16c15177 	.word	0x16c15177
 800506c:	3f56c16c 	.word	0x3f56c16c
 8005070:	5555554c 	.word	0x5555554c
 8005074:	3fa55555 	.word	0x3fa55555
 8005078:	00000000 	.word	0x00000000
 800507c:	3ff00000 	.word	0x3ff00000
 8005080:	3fe00000 	.word	0x3fe00000
 8005084:	3fd33332 	.word	0x3fd33332
 8005088:	3ff00000 	.word	0x3ff00000
 800508c:	3fe90000 	.word	0x3fe90000
 8005090:	3fd20000 	.word	0x3fd20000
 8005094:	00000000 	.word	0x00000000

08005098 <__kernel_sin>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	ec55 4b10 	vmov	r4, r5, d0
 80050a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80050a4:	b085      	sub	sp, #20
 80050a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80050aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80050ae:	4680      	mov	r8, r0
 80050b0:	d205      	bcs.n	80050be <__kernel_sin+0x26>
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7fb fc51 	bl	800095c <__aeabi_d2iz>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d052      	beq.n	8005164 <__kernel_sin+0xcc>
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	4620      	mov	r0, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	f7fb f8db 	bl	8000280 <__aeabi_dmul>
 80050ca:	4682      	mov	sl, r0
 80050cc:	468b      	mov	fp, r1
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	f7fb f8d3 	bl	8000280 <__aeabi_dmul>
 80050da:	a342      	add	r3, pc, #264	@ (adr r3, 80051e4 <__kernel_sin+0x14c>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	e9cd 0100 	strd	r0, r1, [sp]
 80050e4:	4650      	mov	r0, sl
 80050e6:	4659      	mov	r1, fp
 80050e8:	f7fb f8ca 	bl	8000280 <__aeabi_dmul>
 80050ec:	a33f      	add	r3, pc, #252	@ (adr r3, 80051ec <__kernel_sin+0x154>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb f9f3 	bl	80004dc <__aeabi_dsub>
 80050f6:	4652      	mov	r2, sl
 80050f8:	465b      	mov	r3, fp
 80050fa:	f7fb f8c1 	bl	8000280 <__aeabi_dmul>
 80050fe:	a33d      	add	r3, pc, #244	@ (adr r3, 80051f4 <__kernel_sin+0x15c>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb f9ec 	bl	80004e0 <__adddf3>
 8005108:	4652      	mov	r2, sl
 800510a:	465b      	mov	r3, fp
 800510c:	f7fb f8b8 	bl	8000280 <__aeabi_dmul>
 8005110:	a33a      	add	r3, pc, #232	@ (adr r3, 80051fc <__kernel_sin+0x164>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f9e1 	bl	80004dc <__aeabi_dsub>
 800511a:	4652      	mov	r2, sl
 800511c:	465b      	mov	r3, fp
 800511e:	f7fb f8af 	bl	8000280 <__aeabi_dmul>
 8005122:	a338      	add	r3, pc, #224	@ (adr r3, 8005204 <__kernel_sin+0x16c>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb f9da 	bl	80004e0 <__adddf3>
 800512c:	4606      	mov	r6, r0
 800512e:	460f      	mov	r7, r1
 8005130:	f1b8 0f00 	cmp.w	r8, #0
 8005134:	d11b      	bne.n	800516e <__kernel_sin+0xd6>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4650      	mov	r0, sl
 800513c:	4659      	mov	r1, fp
 800513e:	f7fb f89f 	bl	8000280 <__aeabi_dmul>
 8005142:	a325      	add	r3, pc, #148	@ (adr r3, 80051d8 <__kernel_sin+0x140>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	f7fb f9c8 	bl	80004dc <__aeabi_dsub>
 800514c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005150:	f7fb f896 	bl	8000280 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4620      	mov	r0, r4
 800515a:	4629      	mov	r1, r5
 800515c:	f7fb f9c0 	bl	80004e0 <__adddf3>
 8005160:	4604      	mov	r4, r0
 8005162:	460d      	mov	r5, r1
 8005164:	ec45 4b10 	vmov	d0, r4, r5
 8005168:	b005      	add	sp, #20
 800516a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800516e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005172:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <__kernel_sin+0x148>)
 8005174:	2200      	movs	r2, #0
 8005176:	f7fb f883 	bl	8000280 <__aeabi_dmul>
 800517a:	4632      	mov	r2, r6
 800517c:	4680      	mov	r8, r0
 800517e:	4689      	mov	r9, r1
 8005180:	463b      	mov	r3, r7
 8005182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005186:	f7fb f87b 	bl	8000280 <__aeabi_dmul>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4640      	mov	r0, r8
 8005190:	4649      	mov	r1, r9
 8005192:	f7fb f9a3 	bl	80004dc <__aeabi_dsub>
 8005196:	4652      	mov	r2, sl
 8005198:	465b      	mov	r3, fp
 800519a:	f7fb f871 	bl	8000280 <__aeabi_dmul>
 800519e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051a2:	f7fb f99b 	bl	80004dc <__aeabi_dsub>
 80051a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80051d8 <__kernel_sin+0x140>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	4606      	mov	r6, r0
 80051ae:	460f      	mov	r7, r1
 80051b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051b4:	f7fb f864 	bl	8000280 <__aeabi_dmul>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb f98e 	bl	80004e0 <__adddf3>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4620      	mov	r0, r4
 80051ca:	4629      	mov	r1, r5
 80051cc:	f7fb f986 	bl	80004dc <__aeabi_dsub>
 80051d0:	e7c6      	b.n	8005160 <__kernel_sin+0xc8>
 80051d2:	bf00      	nop
 80051d4:	f3af 8000 	nop.w
 80051d8:	55555549 	.word	0x55555549
 80051dc:	3fc55555 	.word	0x3fc55555
 80051e0:	3fe00000 	.word	0x3fe00000
 80051e4:	5acfd57c 	.word	0x5acfd57c
 80051e8:	3de5d93a 	.word	0x3de5d93a
 80051ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80051f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80051f4:	57b1fe7d 	.word	0x57b1fe7d
 80051f8:	3ec71de3 	.word	0x3ec71de3
 80051fc:	19c161d5 	.word	0x19c161d5
 8005200:	3f2a01a0 	.word	0x3f2a01a0
 8005204:	1110f8a6 	.word	0x1110f8a6
 8005208:	3f811111 	.word	0x3f811111
 800520c:	00000000 	.word	0x00000000

08005210 <__ieee754_rem_pio2>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	ec57 6b10 	vmov	r6, r7, d0
 8005218:	4bc5      	ldr	r3, [pc, #788]	@ (8005530 <__ieee754_rem_pio2+0x320>)
 800521a:	b08d      	sub	sp, #52	@ 0x34
 800521c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005220:	4598      	cmp	r8, r3
 8005222:	4604      	mov	r4, r0
 8005224:	9704      	str	r7, [sp, #16]
 8005226:	d807      	bhi.n	8005238 <__ieee754_rem_pio2+0x28>
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	ed80 0b00 	vstr	d0, [r0]
 8005230:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005234:	2500      	movs	r5, #0
 8005236:	e028      	b.n	800528a <__ieee754_rem_pio2+0x7a>
 8005238:	4bbe      	ldr	r3, [pc, #760]	@ (8005534 <__ieee754_rem_pio2+0x324>)
 800523a:	4598      	cmp	r8, r3
 800523c:	d878      	bhi.n	8005330 <__ieee754_rem_pio2+0x120>
 800523e:	9b04      	ldr	r3, [sp, #16]
 8005240:	4dbd      	ldr	r5, [pc, #756]	@ (8005538 <__ieee754_rem_pio2+0x328>)
 8005242:	2b00      	cmp	r3, #0
 8005244:	4630      	mov	r0, r6
 8005246:	a3ac      	add	r3, pc, #688	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x2e8>)
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	4639      	mov	r1, r7
 800524e:	dd38      	ble.n	80052c2 <__ieee754_rem_pio2+0xb2>
 8005250:	f7fb f944 	bl	80004dc <__aeabi_dsub>
 8005254:	45a8      	cmp	r8, r5
 8005256:	4606      	mov	r6, r0
 8005258:	460f      	mov	r7, r1
 800525a:	d01a      	beq.n	8005292 <__ieee754_rem_pio2+0x82>
 800525c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005500 <__ieee754_rem_pio2+0x2f0>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb f93b 	bl	80004dc <__aeabi_dsub>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4680      	mov	r8, r0
 800526c:	4689      	mov	r9, r1
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fb f933 	bl	80004dc <__aeabi_dsub>
 8005276:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005500 <__ieee754_rem_pio2+0x2f0>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7fb f92e 	bl	80004dc <__aeabi_dsub>
 8005280:	e9c4 8900 	strd	r8, r9, [r4]
 8005284:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005288:	2501      	movs	r5, #1
 800528a:	4628      	mov	r0, r5
 800528c:	b00d      	add	sp, #52	@ 0x34
 800528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005292:	a39d      	add	r3, pc, #628	@ (adr r3, 8005508 <__ieee754_rem_pio2+0x2f8>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f920 	bl	80004dc <__aeabi_dsub>
 800529c:	a39c      	add	r3, pc, #624	@ (adr r3, 8005510 <__ieee754_rem_pio2+0x300>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	4606      	mov	r6, r0
 80052a4:	460f      	mov	r7, r1
 80052a6:	f7fb f919 	bl	80004dc <__aeabi_dsub>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4680      	mov	r8, r0
 80052b0:	4689      	mov	r9, r1
 80052b2:	4630      	mov	r0, r6
 80052b4:	4639      	mov	r1, r7
 80052b6:	f7fb f911 	bl	80004dc <__aeabi_dsub>
 80052ba:	a395      	add	r3, pc, #596	@ (adr r3, 8005510 <__ieee754_rem_pio2+0x300>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	e7dc      	b.n	800527c <__ieee754_rem_pio2+0x6c>
 80052c2:	f7fb f90d 	bl	80004e0 <__adddf3>
 80052c6:	45a8      	cmp	r8, r5
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	d018      	beq.n	8005300 <__ieee754_rem_pio2+0xf0>
 80052ce:	a38c      	add	r3, pc, #560	@ (adr r3, 8005500 <__ieee754_rem_pio2+0x2f0>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f904 	bl	80004e0 <__adddf3>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4680      	mov	r8, r0
 80052de:	4689      	mov	r9, r1
 80052e0:	4630      	mov	r0, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	f7fb f8fa 	bl	80004dc <__aeabi_dsub>
 80052e8:	a385      	add	r3, pc, #532	@ (adr r3, 8005500 <__ieee754_rem_pio2+0x2f0>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb f8f7 	bl	80004e0 <__adddf3>
 80052f2:	f04f 35ff 	mov.w	r5, #4294967295
 80052f6:	e9c4 8900 	strd	r8, r9, [r4]
 80052fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052fe:	e7c4      	b.n	800528a <__ieee754_rem_pio2+0x7a>
 8005300:	a381      	add	r3, pc, #516	@ (adr r3, 8005508 <__ieee754_rem_pio2+0x2f8>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb f8eb 	bl	80004e0 <__adddf3>
 800530a:	a381      	add	r3, pc, #516	@ (adr r3, 8005510 <__ieee754_rem_pio2+0x300>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	4606      	mov	r6, r0
 8005312:	460f      	mov	r7, r1
 8005314:	f7fb f8e4 	bl	80004e0 <__adddf3>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4680      	mov	r8, r0
 800531e:	4689      	mov	r9, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb f8da 	bl	80004dc <__aeabi_dsub>
 8005328:	a379      	add	r3, pc, #484	@ (adr r3, 8005510 <__ieee754_rem_pio2+0x300>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	e7de      	b.n	80052ee <__ieee754_rem_pio2+0xde>
 8005330:	4b82      	ldr	r3, [pc, #520]	@ (800553c <__ieee754_rem_pio2+0x32c>)
 8005332:	4598      	cmp	r8, r3
 8005334:	f200 80d1 	bhi.w	80054da <__ieee754_rem_pio2+0x2ca>
 8005338:	f000 f966 	bl	8005608 <fabs>
 800533c:	ec57 6b10 	vmov	r6, r7, d0
 8005340:	a375      	add	r3, pc, #468	@ (adr r3, 8005518 <__ieee754_rem_pio2+0x308>)
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fa ff99 	bl	8000280 <__aeabi_dmul>
 800534e:	4b7c      	ldr	r3, [pc, #496]	@ (8005540 <__ieee754_rem_pio2+0x330>)
 8005350:	2200      	movs	r2, #0
 8005352:	f7fb f8c5 	bl	80004e0 <__adddf3>
 8005356:	f7fb fb01 	bl	800095c <__aeabi_d2iz>
 800535a:	4605      	mov	r5, r0
 800535c:	f7fb fa0c 	bl	8000778 <__aeabi_i2d>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005368:	a363      	add	r3, pc, #396	@ (adr r3, 80054f8 <__ieee754_rem_pio2+0x2e8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fa ff87 	bl	8000280 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4630      	mov	r0, r6
 8005378:	4639      	mov	r1, r7
 800537a:	f7fb f8af 	bl	80004dc <__aeabi_dsub>
 800537e:	a360      	add	r3, pc, #384	@ (adr r3, 8005500 <__ieee754_rem_pio2+0x2f0>)
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	4682      	mov	sl, r0
 8005386:	468b      	mov	fp, r1
 8005388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800538c:	f7fa ff78 	bl	8000280 <__aeabi_dmul>
 8005390:	2d1f      	cmp	r5, #31
 8005392:	4606      	mov	r6, r0
 8005394:	460f      	mov	r7, r1
 8005396:	dc0c      	bgt.n	80053b2 <__ieee754_rem_pio2+0x1a2>
 8005398:	4b6a      	ldr	r3, [pc, #424]	@ (8005544 <__ieee754_rem_pio2+0x334>)
 800539a:	1e6a      	subs	r2, r5, #1
 800539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a0:	4543      	cmp	r3, r8
 80053a2:	d006      	beq.n	80053b2 <__ieee754_rem_pio2+0x1a2>
 80053a4:	4632      	mov	r2, r6
 80053a6:	463b      	mov	r3, r7
 80053a8:	4650      	mov	r0, sl
 80053aa:	4659      	mov	r1, fp
 80053ac:	f7fb f896 	bl	80004dc <__aeabi_dsub>
 80053b0:	e00e      	b.n	80053d0 <__ieee754_rem_pio2+0x1c0>
 80053b2:	463b      	mov	r3, r7
 80053b4:	4632      	mov	r2, r6
 80053b6:	4650      	mov	r0, sl
 80053b8:	4659      	mov	r1, fp
 80053ba:	f7fb f88f 	bl	80004dc <__aeabi_dsub>
 80053be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053c2:	9305      	str	r3, [sp, #20]
 80053c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	dc02      	bgt.n	80053d6 <__ieee754_rem_pio2+0x1c6>
 80053d0:	e9c4 0100 	strd	r0, r1, [r4]
 80053d4:	e039      	b.n	800544a <__ieee754_rem_pio2+0x23a>
 80053d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8005508 <__ieee754_rem_pio2+0x2f8>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e0:	f7fa ff4e 	bl	8000280 <__aeabi_dmul>
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4650      	mov	r0, sl
 80053ee:	4659      	mov	r1, fp
 80053f0:	f7fb f874 	bl	80004dc <__aeabi_dsub>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4680      	mov	r8, r0
 80053fa:	4689      	mov	r9, r1
 80053fc:	4650      	mov	r0, sl
 80053fe:	4659      	mov	r1, fp
 8005400:	f7fb f86c 	bl	80004dc <__aeabi_dsub>
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	f7fb f868 	bl	80004dc <__aeabi_dsub>
 800540c:	a340      	add	r3, pc, #256	@ (adr r3, 8005510 <__ieee754_rem_pio2+0x300>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	4606      	mov	r6, r0
 8005414:	460f      	mov	r7, r1
 8005416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541a:	f7fa ff31 	bl	8000280 <__aeabi_dmul>
 800541e:	4632      	mov	r2, r6
 8005420:	463b      	mov	r3, r7
 8005422:	f7fb f85b 	bl	80004dc <__aeabi_dsub>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4606      	mov	r6, r0
 800542c:	460f      	mov	r7, r1
 800542e:	4640      	mov	r0, r8
 8005430:	4649      	mov	r1, r9
 8005432:	f7fb f853 	bl	80004dc <__aeabi_dsub>
 8005436:	9a05      	ldr	r2, [sp, #20]
 8005438:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b31      	cmp	r3, #49	@ 0x31
 8005440:	dc20      	bgt.n	8005484 <__ieee754_rem_pio2+0x274>
 8005442:	e9c4 0100 	strd	r0, r1, [r4]
 8005446:	46c2      	mov	sl, r8
 8005448:	46cb      	mov	fp, r9
 800544a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800544e:	4650      	mov	r0, sl
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	4659      	mov	r1, fp
 8005456:	f7fb f841 	bl	80004dc <__aeabi_dsub>
 800545a:	463b      	mov	r3, r7
 800545c:	4632      	mov	r2, r6
 800545e:	f7fb f83d 	bl	80004dc <__aeabi_dsub>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800546a:	f6bf af0e 	bge.w	800528a <__ieee754_rem_pio2+0x7a>
 800546e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005478:	f8c4 8000 	str.w	r8, [r4]
 800547c:	60a0      	str	r0, [r4, #8]
 800547e:	60e3      	str	r3, [r4, #12]
 8005480:	426d      	negs	r5, r5
 8005482:	e702      	b.n	800528a <__ieee754_rem_pio2+0x7a>
 8005484:	a326      	add	r3, pc, #152	@ (adr r3, 8005520 <__ieee754_rem_pio2+0x310>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800548e:	f7fa fef7 	bl	8000280 <__aeabi_dmul>
 8005492:	4606      	mov	r6, r0
 8005494:	460f      	mov	r7, r1
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4640      	mov	r0, r8
 800549c:	4649      	mov	r1, r9
 800549e:	f7fb f81d 	bl	80004dc <__aeabi_dsub>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4682      	mov	sl, r0
 80054a8:	468b      	mov	fp, r1
 80054aa:	4640      	mov	r0, r8
 80054ac:	4649      	mov	r1, r9
 80054ae:	f7fb f815 	bl	80004dc <__aeabi_dsub>
 80054b2:	4632      	mov	r2, r6
 80054b4:	463b      	mov	r3, r7
 80054b6:	f7fb f811 	bl	80004dc <__aeabi_dsub>
 80054ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8005528 <__ieee754_rem_pio2+0x318>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	4606      	mov	r6, r0
 80054c2:	460f      	mov	r7, r1
 80054c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054c8:	f7fa feda 	bl	8000280 <__aeabi_dmul>
 80054cc:	4632      	mov	r2, r6
 80054ce:	463b      	mov	r3, r7
 80054d0:	f7fb f804 	bl	80004dc <__aeabi_dsub>
 80054d4:	4606      	mov	r6, r0
 80054d6:	460f      	mov	r7, r1
 80054d8:	e764      	b.n	80053a4 <__ieee754_rem_pio2+0x194>
 80054da:	4b1b      	ldr	r3, [pc, #108]	@ (8005548 <__ieee754_rem_pio2+0x338>)
 80054dc:	4598      	cmp	r8, r3
 80054de:	d935      	bls.n	800554c <__ieee754_rem_pio2+0x33c>
 80054e0:	4632      	mov	r2, r6
 80054e2:	463b      	mov	r3, r7
 80054e4:	4630      	mov	r0, r6
 80054e6:	4639      	mov	r1, r7
 80054e8:	f7fa fff8 	bl	80004dc <__aeabi_dsub>
 80054ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054f0:	e9c4 0100 	strd	r0, r1, [r4]
 80054f4:	e69e      	b.n	8005234 <__ieee754_rem_pio2+0x24>
 80054f6:	bf00      	nop
 80054f8:	54400000 	.word	0x54400000
 80054fc:	3ff921fb 	.word	0x3ff921fb
 8005500:	1a626331 	.word	0x1a626331
 8005504:	3dd0b461 	.word	0x3dd0b461
 8005508:	1a600000 	.word	0x1a600000
 800550c:	3dd0b461 	.word	0x3dd0b461
 8005510:	2e037073 	.word	0x2e037073
 8005514:	3ba3198a 	.word	0x3ba3198a
 8005518:	6dc9c883 	.word	0x6dc9c883
 800551c:	3fe45f30 	.word	0x3fe45f30
 8005520:	2e000000 	.word	0x2e000000
 8005524:	3ba3198a 	.word	0x3ba3198a
 8005528:	252049c1 	.word	0x252049c1
 800552c:	397b839a 	.word	0x397b839a
 8005530:	3fe921fb 	.word	0x3fe921fb
 8005534:	4002d97b 	.word	0x4002d97b
 8005538:	3ff921fb 	.word	0x3ff921fb
 800553c:	413921fb 	.word	0x413921fb
 8005540:	3fe00000 	.word	0x3fe00000
 8005544:	08005f38 	.word	0x08005f38
 8005548:	7fefffff 	.word	0x7fefffff
 800554c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005550:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005554:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005558:	4630      	mov	r0, r6
 800555a:	460f      	mov	r7, r1
 800555c:	f7fb f9fe 	bl	800095c <__aeabi_d2iz>
 8005560:	f7fb f90a 	bl	8000778 <__aeabi_i2d>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4630      	mov	r0, r6
 800556a:	4639      	mov	r1, r7
 800556c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005570:	f7fa ffb4 	bl	80004dc <__aeabi_dsub>
 8005574:	4b22      	ldr	r3, [pc, #136]	@ (8005600 <__ieee754_rem_pio2+0x3f0>)
 8005576:	2200      	movs	r2, #0
 8005578:	f7fa fe82 	bl	8000280 <__aeabi_dmul>
 800557c:	460f      	mov	r7, r1
 800557e:	4606      	mov	r6, r0
 8005580:	f7fb f9ec 	bl	800095c <__aeabi_d2iz>
 8005584:	f7fb f8f8 	bl	8000778 <__aeabi_i2d>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4630      	mov	r0, r6
 800558e:	4639      	mov	r1, r7
 8005590:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005594:	f7fa ffa2 	bl	80004dc <__aeabi_dsub>
 8005598:	4b19      	ldr	r3, [pc, #100]	@ (8005600 <__ieee754_rem_pio2+0x3f0>)
 800559a:	2200      	movs	r2, #0
 800559c:	f7fa fe70 	bl	8000280 <__aeabi_dmul>
 80055a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80055a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80055a8:	f04f 0803 	mov.w	r8, #3
 80055ac:	2600      	movs	r6, #0
 80055ae:	2700      	movs	r7, #0
 80055b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	46c2      	mov	sl, r8
 80055ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80055be:	f7fb f99b 	bl	80008f8 <__aeabi_dcmpeq>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d1f4      	bne.n	80055b0 <__ieee754_rem_pio2+0x3a0>
 80055c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <__ieee754_rem_pio2+0x3f4>)
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	2302      	movs	r3, #2
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	462a      	mov	r2, r5
 80055d0:	4653      	mov	r3, sl
 80055d2:	4621      	mov	r1, r4
 80055d4:	a806      	add	r0, sp, #24
 80055d6:	f000 f81f 	bl	8005618 <__kernel_rem_pio2>
 80055da:	9b04      	ldr	r3, [sp, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	4605      	mov	r5, r0
 80055e0:	f6bf ae53 	bge.w	800528a <__ieee754_rem_pio2+0x7a>
 80055e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80055e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055ec:	e9c4 2300 	strd	r2, r3, [r4]
 80055f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80055f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80055fc:	e740      	b.n	8005480 <__ieee754_rem_pio2+0x270>
 80055fe:	bf00      	nop
 8005600:	41700000 	.word	0x41700000
 8005604:	08005fb8 	.word	0x08005fb8

08005608 <fabs>:
 8005608:	ec51 0b10 	vmov	r0, r1, d0
 800560c:	4602      	mov	r2, r0
 800560e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005612:	ec43 2b10 	vmov	d0, r2, r3
 8005616:	4770      	bx	lr

08005618 <__kernel_rem_pio2>:
 8005618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	ed2d 8b02 	vpush	{d8}
 8005620:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005624:	f112 0f14 	cmn.w	r2, #20
 8005628:	9306      	str	r3, [sp, #24]
 800562a:	9104      	str	r1, [sp, #16]
 800562c:	4bc2      	ldr	r3, [pc, #776]	@ (8005938 <__kernel_rem_pio2+0x320>)
 800562e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005630:	9008      	str	r0, [sp, #32]
 8005632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	9b06      	ldr	r3, [sp, #24]
 800563a:	f103 33ff 	add.w	r3, r3, #4294967295
 800563e:	bfa8      	it	ge
 8005640:	1ed4      	subge	r4, r2, #3
 8005642:	9305      	str	r3, [sp, #20]
 8005644:	bfb2      	itee	lt
 8005646:	2400      	movlt	r4, #0
 8005648:	2318      	movge	r3, #24
 800564a:	fb94 f4f3 	sdivge	r4, r4, r3
 800564e:	f06f 0317 	mvn.w	r3, #23
 8005652:	fb04 3303 	mla	r3, r4, r3, r3
 8005656:	eb03 0b02 	add.w	fp, r3, r2
 800565a:	9b00      	ldr	r3, [sp, #0]
 800565c:	9a05      	ldr	r2, [sp, #20]
 800565e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005928 <__kernel_rem_pio2+0x310>
 8005662:	eb03 0802 	add.w	r8, r3, r2
 8005666:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005668:	1aa7      	subs	r7, r4, r2
 800566a:	ae20      	add	r6, sp, #128	@ 0x80
 800566c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005670:	2500      	movs	r5, #0
 8005672:	4545      	cmp	r5, r8
 8005674:	dd12      	ble.n	800569c <__kernel_rem_pio2+0x84>
 8005676:	9b06      	ldr	r3, [sp, #24]
 8005678:	aa20      	add	r2, sp, #128	@ 0x80
 800567a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800567e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005682:	2700      	movs	r7, #0
 8005684:	9b00      	ldr	r3, [sp, #0]
 8005686:	429f      	cmp	r7, r3
 8005688:	dc2e      	bgt.n	80056e8 <__kernel_rem_pio2+0xd0>
 800568a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005928 <__kernel_rem_pio2+0x310>
 800568e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005692:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005696:	46a8      	mov	r8, r5
 8005698:	2600      	movs	r6, #0
 800569a:	e01b      	b.n	80056d4 <__kernel_rem_pio2+0xbc>
 800569c:	42ef      	cmn	r7, r5
 800569e:	d407      	bmi.n	80056b0 <__kernel_rem_pio2+0x98>
 80056a0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80056a4:	f7fb f868 	bl	8000778 <__aeabi_i2d>
 80056a8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80056ac:	3501      	adds	r5, #1
 80056ae:	e7e0      	b.n	8005672 <__kernel_rem_pio2+0x5a>
 80056b0:	ec51 0b18 	vmov	r0, r1, d8
 80056b4:	e7f8      	b.n	80056a8 <__kernel_rem_pio2+0x90>
 80056b6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80056ba:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80056be:	f7fa fddf 	bl	8000280 <__aeabi_dmul>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ca:	f7fa ff09 	bl	80004e0 <__adddf3>
 80056ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056d2:	3601      	adds	r6, #1
 80056d4:	9b05      	ldr	r3, [sp, #20]
 80056d6:	429e      	cmp	r6, r3
 80056d8:	dded      	ble.n	80056b6 <__kernel_rem_pio2+0x9e>
 80056da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056de:	3701      	adds	r7, #1
 80056e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80056e4:	3508      	adds	r5, #8
 80056e6:	e7cd      	b.n	8005684 <__kernel_rem_pio2+0x6c>
 80056e8:	9b00      	ldr	r3, [sp, #0]
 80056ea:	f8dd 8000 	ldr.w	r8, [sp]
 80056ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80056f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80056f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80056f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80056fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005704:	ab98      	add	r3, sp, #608	@ 0x260
 8005706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800570a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800570e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005712:	ac0c      	add	r4, sp, #48	@ 0x30
 8005714:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005716:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800571a:	46a1      	mov	r9, r4
 800571c:	46c2      	mov	sl, r8
 800571e:	f1ba 0f00 	cmp.w	sl, #0
 8005722:	dc77      	bgt.n	8005814 <__kernel_rem_pio2+0x1fc>
 8005724:	4658      	mov	r0, fp
 8005726:	ed9d 0b02 	vldr	d0, [sp, #8]
 800572a:	f000 fac5 	bl	8005cb8 <scalbn>
 800572e:	ec57 6b10 	vmov	r6, r7, d0
 8005732:	2200      	movs	r2, #0
 8005734:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	f7fa fda0 	bl	8000280 <__aeabi_dmul>
 8005740:	ec41 0b10 	vmov	d0, r0, r1
 8005744:	f000 fb34 	bl	8005db0 <floor>
 8005748:	4b7c      	ldr	r3, [pc, #496]	@ (800593c <__kernel_rem_pio2+0x324>)
 800574a:	ec51 0b10 	vmov	r0, r1, d0
 800574e:	2200      	movs	r2, #0
 8005750:	f7fa fd96 	bl	8000280 <__aeabi_dmul>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4630      	mov	r0, r6
 800575a:	4639      	mov	r1, r7
 800575c:	f7fa febe 	bl	80004dc <__aeabi_dsub>
 8005760:	460f      	mov	r7, r1
 8005762:	4606      	mov	r6, r0
 8005764:	f7fb f8fa 	bl	800095c <__aeabi_d2iz>
 8005768:	9002      	str	r0, [sp, #8]
 800576a:	f7fb f805 	bl	8000778 <__aeabi_i2d>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4630      	mov	r0, r6
 8005774:	4639      	mov	r1, r7
 8005776:	f7fa feb1 	bl	80004dc <__aeabi_dsub>
 800577a:	f1bb 0f00 	cmp.w	fp, #0
 800577e:	4606      	mov	r6, r0
 8005780:	460f      	mov	r7, r1
 8005782:	dd6c      	ble.n	800585e <__kernel_rem_pio2+0x246>
 8005784:	f108 31ff 	add.w	r1, r8, #4294967295
 8005788:	ab0c      	add	r3, sp, #48	@ 0x30
 800578a:	9d02      	ldr	r5, [sp, #8]
 800578c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005790:	f1cb 0018 	rsb	r0, fp, #24
 8005794:	fa43 f200 	asr.w	r2, r3, r0
 8005798:	4415      	add	r5, r2
 800579a:	4082      	lsls	r2, r0
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	aa0c      	add	r2, sp, #48	@ 0x30
 80057a0:	9502      	str	r5, [sp, #8]
 80057a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80057a6:	f1cb 0217 	rsb	r2, fp, #23
 80057aa:	fa43 f902 	asr.w	r9, r3, r2
 80057ae:	f1b9 0f00 	cmp.w	r9, #0
 80057b2:	dd64      	ble.n	800587e <__kernel_rem_pio2+0x266>
 80057b4:	9b02      	ldr	r3, [sp, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	3301      	adds	r3, #1
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	4615      	mov	r5, r2
 80057be:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80057c2:	4590      	cmp	r8, r2
 80057c4:	f300 80a1 	bgt.w	800590a <__kernel_rem_pio2+0x2f2>
 80057c8:	f1bb 0f00 	cmp.w	fp, #0
 80057cc:	dd07      	ble.n	80057de <__kernel_rem_pio2+0x1c6>
 80057ce:	f1bb 0f01 	cmp.w	fp, #1
 80057d2:	f000 80c1 	beq.w	8005958 <__kernel_rem_pio2+0x340>
 80057d6:	f1bb 0f02 	cmp.w	fp, #2
 80057da:	f000 80c8 	beq.w	800596e <__kernel_rem_pio2+0x356>
 80057de:	f1b9 0f02 	cmp.w	r9, #2
 80057e2:	d14c      	bne.n	800587e <__kernel_rem_pio2+0x266>
 80057e4:	4632      	mov	r2, r6
 80057e6:	463b      	mov	r3, r7
 80057e8:	4955      	ldr	r1, [pc, #340]	@ (8005940 <__kernel_rem_pio2+0x328>)
 80057ea:	2000      	movs	r0, #0
 80057ec:	f7fa fe76 	bl	80004dc <__aeabi_dsub>
 80057f0:	4606      	mov	r6, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	d042      	beq.n	800587e <__kernel_rem_pio2+0x266>
 80057f8:	4658      	mov	r0, fp
 80057fa:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005930 <__kernel_rem_pio2+0x318>
 80057fe:	f000 fa5b 	bl	8005cb8 <scalbn>
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	ec53 2b10 	vmov	r2, r3, d0
 800580a:	f7fa fe67 	bl	80004dc <__aeabi_dsub>
 800580e:	4606      	mov	r6, r0
 8005810:	460f      	mov	r7, r1
 8005812:	e034      	b.n	800587e <__kernel_rem_pio2+0x266>
 8005814:	4b4b      	ldr	r3, [pc, #300]	@ (8005944 <__kernel_rem_pio2+0x32c>)
 8005816:	2200      	movs	r2, #0
 8005818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800581c:	f7fa fd30 	bl	8000280 <__aeabi_dmul>
 8005820:	f7fb f89c 	bl	800095c <__aeabi_d2iz>
 8005824:	f7fa ffa8 	bl	8000778 <__aeabi_i2d>
 8005828:	4b47      	ldr	r3, [pc, #284]	@ (8005948 <__kernel_rem_pio2+0x330>)
 800582a:	2200      	movs	r2, #0
 800582c:	4606      	mov	r6, r0
 800582e:	460f      	mov	r7, r1
 8005830:	f7fa fd26 	bl	8000280 <__aeabi_dmul>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800583c:	f7fa fe4e 	bl	80004dc <__aeabi_dsub>
 8005840:	f7fb f88c 	bl	800095c <__aeabi_d2iz>
 8005844:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005848:	f849 0b04 	str.w	r0, [r9], #4
 800584c:	4639      	mov	r1, r7
 800584e:	4630      	mov	r0, r6
 8005850:	f7fa fe46 	bl	80004e0 <__adddf3>
 8005854:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800585c:	e75f      	b.n	800571e <__kernel_rem_pio2+0x106>
 800585e:	d107      	bne.n	8005870 <__kernel_rem_pio2+0x258>
 8005860:	f108 33ff 	add.w	r3, r8, #4294967295
 8005864:	aa0c      	add	r2, sp, #48	@ 0x30
 8005866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800586a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800586e:	e79e      	b.n	80057ae <__kernel_rem_pio2+0x196>
 8005870:	4b36      	ldr	r3, [pc, #216]	@ (800594c <__kernel_rem_pio2+0x334>)
 8005872:	2200      	movs	r2, #0
 8005874:	f7fb f85e 	bl	8000934 <__aeabi_dcmpge>
 8005878:	2800      	cmp	r0, #0
 800587a:	d143      	bne.n	8005904 <__kernel_rem_pio2+0x2ec>
 800587c:	4681      	mov	r9, r0
 800587e:	2200      	movs	r2, #0
 8005880:	2300      	movs	r3, #0
 8005882:	4630      	mov	r0, r6
 8005884:	4639      	mov	r1, r7
 8005886:	f7fb f837 	bl	80008f8 <__aeabi_dcmpeq>
 800588a:	2800      	cmp	r0, #0
 800588c:	f000 80c1 	beq.w	8005a12 <__kernel_rem_pio2+0x3fa>
 8005890:	f108 33ff 	add.w	r3, r8, #4294967295
 8005894:	2200      	movs	r2, #0
 8005896:	9900      	ldr	r1, [sp, #0]
 8005898:	428b      	cmp	r3, r1
 800589a:	da70      	bge.n	800597e <__kernel_rem_pio2+0x366>
 800589c:	2a00      	cmp	r2, #0
 800589e:	f000 808b 	beq.w	80059b8 <__kernel_rem_pio2+0x3a0>
 80058a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80058a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80058a8:	f1ab 0b18 	sub.w	fp, fp, #24
 80058ac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f6      	beq.n	80058a2 <__kernel_rem_pio2+0x28a>
 80058b4:	4658      	mov	r0, fp
 80058b6:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005930 <__kernel_rem_pio2+0x318>
 80058ba:	f000 f9fd 	bl	8005cb8 <scalbn>
 80058be:	f108 0301 	add.w	r3, r8, #1
 80058c2:	00da      	lsls	r2, r3, #3
 80058c4:	9205      	str	r2, [sp, #20]
 80058c6:	ec55 4b10 	vmov	r4, r5, d0
 80058ca:	aa70      	add	r2, sp, #448	@ 0x1c0
 80058cc:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8005944 <__kernel_rem_pio2+0x32c>
 80058d0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80058d4:	4646      	mov	r6, r8
 80058d6:	f04f 0a00 	mov.w	sl, #0
 80058da:	2e00      	cmp	r6, #0
 80058dc:	f280 80d1 	bge.w	8005a82 <__kernel_rem_pio2+0x46a>
 80058e0:	4644      	mov	r4, r8
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	f2c0 80ff 	blt.w	8005ae6 <__kernel_rem_pio2+0x4ce>
 80058e8:	4b19      	ldr	r3, [pc, #100]	@ (8005950 <__kernel_rem_pio2+0x338>)
 80058ea:	461f      	mov	r7, r3
 80058ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80058ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058f2:	9306      	str	r3, [sp, #24]
 80058f4:	f04f 0a00 	mov.w	sl, #0
 80058f8:	f04f 0b00 	mov.w	fp, #0
 80058fc:	2600      	movs	r6, #0
 80058fe:	eba8 0504 	sub.w	r5, r8, r4
 8005902:	e0e4      	b.n	8005ace <__kernel_rem_pio2+0x4b6>
 8005904:	f04f 0902 	mov.w	r9, #2
 8005908:	e754      	b.n	80057b4 <__kernel_rem_pio2+0x19c>
 800590a:	f854 3b04 	ldr.w	r3, [r4], #4
 800590e:	bb0d      	cbnz	r5, 8005954 <__kernel_rem_pio2+0x33c>
 8005910:	b123      	cbz	r3, 800591c <__kernel_rem_pio2+0x304>
 8005912:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005916:	f844 3c04 	str.w	r3, [r4, #-4]
 800591a:	2301      	movs	r3, #1
 800591c:	3201      	adds	r2, #1
 800591e:	461d      	mov	r5, r3
 8005920:	e74f      	b.n	80057c2 <__kernel_rem_pio2+0x1aa>
 8005922:	bf00      	nop
 8005924:	f3af 8000 	nop.w
	...
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	08006100 	.word	0x08006100
 800593c:	40200000 	.word	0x40200000
 8005940:	3ff00000 	.word	0x3ff00000
 8005944:	3e700000 	.word	0x3e700000
 8005948:	41700000 	.word	0x41700000
 800594c:	3fe00000 	.word	0x3fe00000
 8005950:	080060c0 	.word	0x080060c0
 8005954:	1acb      	subs	r3, r1, r3
 8005956:	e7de      	b.n	8005916 <__kernel_rem_pio2+0x2fe>
 8005958:	f108 32ff 	add.w	r2, r8, #4294967295
 800595c:	ab0c      	add	r3, sp, #48	@ 0x30
 800595e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005962:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005966:	a90c      	add	r1, sp, #48	@ 0x30
 8005968:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800596c:	e737      	b.n	80057de <__kernel_rem_pio2+0x1c6>
 800596e:	f108 32ff 	add.w	r2, r8, #4294967295
 8005972:	ab0c      	add	r3, sp, #48	@ 0x30
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800597c:	e7f3      	b.n	8005966 <__kernel_rem_pio2+0x34e>
 800597e:	a90c      	add	r1, sp, #48	@ 0x30
 8005980:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005984:	3b01      	subs	r3, #1
 8005986:	430a      	orrs	r2, r1
 8005988:	e785      	b.n	8005896 <__kernel_rem_pio2+0x27e>
 800598a:	3401      	adds	r4, #1
 800598c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005990:	2a00      	cmp	r2, #0
 8005992:	d0fa      	beq.n	800598a <__kernel_rem_pio2+0x372>
 8005994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005996:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800599a:	eb0d 0503 	add.w	r5, sp, r3
 800599e:	9b06      	ldr	r3, [sp, #24]
 80059a0:	aa20      	add	r2, sp, #128	@ 0x80
 80059a2:	4443      	add	r3, r8
 80059a4:	f108 0701 	add.w	r7, r8, #1
 80059a8:	3d98      	subs	r5, #152	@ 0x98
 80059aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80059ae:	4444      	add	r4, r8
 80059b0:	42bc      	cmp	r4, r7
 80059b2:	da04      	bge.n	80059be <__kernel_rem_pio2+0x3a6>
 80059b4:	46a0      	mov	r8, r4
 80059b6:	e6a2      	b.n	80056fe <__kernel_rem_pio2+0xe6>
 80059b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ba:	2401      	movs	r4, #1
 80059bc:	e7e6      	b.n	800598c <__kernel_rem_pio2+0x374>
 80059be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80059c4:	f7fa fed8 	bl	8000778 <__aeabi_i2d>
 80059c8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8005c88 <__kernel_rem_pio2+0x670>
 80059cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80059d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059d8:	46b2      	mov	sl, r6
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	9b05      	ldr	r3, [sp, #20]
 80059e0:	4598      	cmp	r8, r3
 80059e2:	dd05      	ble.n	80059f0 <__kernel_rem_pio2+0x3d8>
 80059e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059e8:	3701      	adds	r7, #1
 80059ea:	eca5 7b02 	vstmia	r5!, {d7}
 80059ee:	e7df      	b.n	80059b0 <__kernel_rem_pio2+0x398>
 80059f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80059f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80059f8:	f7fa fc42 	bl	8000280 <__aeabi_dmul>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a04:	f7fa fd6c 	bl	80004e0 <__adddf3>
 8005a08:	f108 0801 	add.w	r8, r8, #1
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	e7e5      	b.n	80059de <__kernel_rem_pio2+0x3c6>
 8005a12:	f1cb 0000 	rsb	r0, fp, #0
 8005a16:	ec47 6b10 	vmov	d0, r6, r7
 8005a1a:	f000 f94d 	bl	8005cb8 <scalbn>
 8005a1e:	ec55 4b10 	vmov	r4, r5, d0
 8005a22:	4b9b      	ldr	r3, [pc, #620]	@ (8005c90 <__kernel_rem_pio2+0x678>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa ff83 	bl	8000934 <__aeabi_dcmpge>
 8005a2e:	b300      	cbz	r0, 8005a72 <__kernel_rem_pio2+0x45a>
 8005a30:	4b98      	ldr	r3, [pc, #608]	@ (8005c94 <__kernel_rem_pio2+0x67c>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	4620      	mov	r0, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	f7fa fc22 	bl	8000280 <__aeabi_dmul>
 8005a3c:	f7fa ff8e 	bl	800095c <__aeabi_d2iz>
 8005a40:	4606      	mov	r6, r0
 8005a42:	f7fa fe99 	bl	8000778 <__aeabi_i2d>
 8005a46:	4b92      	ldr	r3, [pc, #584]	@ (8005c90 <__kernel_rem_pio2+0x678>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f7fa fc19 	bl	8000280 <__aeabi_dmul>
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4602      	mov	r2, r0
 8005a52:	4629      	mov	r1, r5
 8005a54:	4620      	mov	r0, r4
 8005a56:	f7fa fd41 	bl	80004dc <__aeabi_dsub>
 8005a5a:	f7fa ff7f 	bl	800095c <__aeabi_d2iz>
 8005a5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a60:	f10b 0b18 	add.w	fp, fp, #24
 8005a64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005a68:	f108 0801 	add.w	r8, r8, #1
 8005a6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005a70:	e720      	b.n	80058b4 <__kernel_rem_pio2+0x29c>
 8005a72:	4620      	mov	r0, r4
 8005a74:	4629      	mov	r1, r5
 8005a76:	f7fa ff71 	bl	800095c <__aeabi_d2iz>
 8005a7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005a80:	e718      	b.n	80058b4 <__kernel_rem_pio2+0x29c>
 8005a82:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a88:	f7fa fe76 	bl	8000778 <__aeabi_i2d>
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	462b      	mov	r3, r5
 8005a90:	f7fa fbf6 	bl	8000280 <__aeabi_dmul>
 8005a94:	4652      	mov	r2, sl
 8005a96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005a9a:	465b      	mov	r3, fp
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa fbee 	bl	8000280 <__aeabi_dmul>
 8005aa4:	3e01      	subs	r6, #1
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	e716      	b.n	80058da <__kernel_rem_pio2+0x2c2>
 8005aac:	9906      	ldr	r1, [sp, #24]
 8005aae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005ab2:	9106      	str	r1, [sp, #24]
 8005ab4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005ab8:	f7fa fbe2 	bl	8000280 <__aeabi_dmul>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	f7fa fd0c 	bl	80004e0 <__adddf3>
 8005ac8:	3601      	adds	r6, #1
 8005aca:	4682      	mov	sl, r0
 8005acc:	468b      	mov	fp, r1
 8005ace:	9b00      	ldr	r3, [sp, #0]
 8005ad0:	429e      	cmp	r6, r3
 8005ad2:	dc01      	bgt.n	8005ad8 <__kernel_rem_pio2+0x4c0>
 8005ad4:	42ae      	cmp	r6, r5
 8005ad6:	dde9      	ble.n	8005aac <__kernel_rem_pio2+0x494>
 8005ad8:	ab48      	add	r3, sp, #288	@ 0x120
 8005ada:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ade:	e9c5 ab00 	strd	sl, fp, [r5]
 8005ae2:	3c01      	subs	r4, #1
 8005ae4:	e6fd      	b.n	80058e2 <__kernel_rem_pio2+0x2ca>
 8005ae6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	dc0b      	bgt.n	8005b04 <__kernel_rem_pio2+0x4ec>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dc35      	bgt.n	8005b5c <__kernel_rem_pio2+0x544>
 8005af0:	d059      	beq.n	8005ba6 <__kernel_rem_pio2+0x58e>
 8005af2:	9b02      	ldr	r3, [sp, #8]
 8005af4:	f003 0007 	and.w	r0, r3, #7
 8005af8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005afc:	ecbd 8b02 	vpop	{d8}
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d1f3      	bne.n	8005af2 <__kernel_rem_pio2+0x4da>
 8005b0a:	9b05      	ldr	r3, [sp, #20]
 8005b0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005b10:	eb0d 0403 	add.w	r4, sp, r3
 8005b14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005b18:	4625      	mov	r5, r4
 8005b1a:	46c2      	mov	sl, r8
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	dc69      	bgt.n	8005bf6 <__kernel_rem_pio2+0x5de>
 8005b22:	4645      	mov	r5, r8
 8005b24:	2d01      	cmp	r5, #1
 8005b26:	f300 8087 	bgt.w	8005c38 <__kernel_rem_pio2+0x620>
 8005b2a:	9c05      	ldr	r4, [sp, #20]
 8005b2c:	ab48      	add	r3, sp, #288	@ 0x120
 8005b2e:	441c      	add	r4, r3
 8005b30:	2000      	movs	r0, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	f1b8 0f01 	cmp.w	r8, #1
 8005b38:	f300 809c 	bgt.w	8005c74 <__kernel_rem_pio2+0x65c>
 8005b3c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8005b40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8005b44:	f1b9 0f00 	cmp.w	r9, #0
 8005b48:	f040 80a6 	bne.w	8005c98 <__kernel_rem_pio2+0x680>
 8005b4c:	9b04      	ldr	r3, [sp, #16]
 8005b4e:	e9c3 5600 	strd	r5, r6, [r3]
 8005b52:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005b56:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005b5a:	e7ca      	b.n	8005af2 <__kernel_rem_pio2+0x4da>
 8005b5c:	9d05      	ldr	r5, [sp, #20]
 8005b5e:	ab48      	add	r3, sp, #288	@ 0x120
 8005b60:	441d      	add	r5, r3
 8005b62:	4644      	mov	r4, r8
 8005b64:	2000      	movs	r0, #0
 8005b66:	2100      	movs	r1, #0
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	da35      	bge.n	8005bd8 <__kernel_rem_pio2+0x5c0>
 8005b6c:	f1b9 0f00 	cmp.w	r9, #0
 8005b70:	d038      	beq.n	8005be4 <__kernel_rem_pio2+0x5cc>
 8005b72:	4602      	mov	r2, r0
 8005b74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b78:	9c04      	ldr	r4, [sp, #16]
 8005b7a:	e9c4 2300 	strd	r2, r3, [r4]
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005b86:	f7fa fca9 	bl	80004dc <__aeabi_dsub>
 8005b8a:	ad4a      	add	r5, sp, #296	@ 0x128
 8005b8c:	2401      	movs	r4, #1
 8005b8e:	45a0      	cmp	r8, r4
 8005b90:	da2b      	bge.n	8005bea <__kernel_rem_pio2+0x5d2>
 8005b92:	f1b9 0f00 	cmp.w	r9, #0
 8005b96:	d002      	beq.n	8005b9e <__kernel_rem_pio2+0x586>
 8005b98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	9b04      	ldr	r3, [sp, #16]
 8005ba0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ba4:	e7a5      	b.n	8005af2 <__kernel_rem_pio2+0x4da>
 8005ba6:	9c05      	ldr	r4, [sp, #20]
 8005ba8:	ab48      	add	r3, sp, #288	@ 0x120
 8005baa:	441c      	add	r4, r3
 8005bac:	2000      	movs	r0, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	f1b8 0f00 	cmp.w	r8, #0
 8005bb4:	da09      	bge.n	8005bca <__kernel_rem_pio2+0x5b2>
 8005bb6:	f1b9 0f00 	cmp.w	r9, #0
 8005bba:	d002      	beq.n	8005bc2 <__kernel_rem_pio2+0x5aa>
 8005bbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	e9c3 0100 	strd	r0, r1, [r3]
 8005bc8:	e793      	b.n	8005af2 <__kernel_rem_pio2+0x4da>
 8005bca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bce:	f7fa fc87 	bl	80004e0 <__adddf3>
 8005bd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bd6:	e7eb      	b.n	8005bb0 <__kernel_rem_pio2+0x598>
 8005bd8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005bdc:	f7fa fc80 	bl	80004e0 <__adddf3>
 8005be0:	3c01      	subs	r4, #1
 8005be2:	e7c1      	b.n	8005b68 <__kernel_rem_pio2+0x550>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	e7c6      	b.n	8005b78 <__kernel_rem_pio2+0x560>
 8005bea:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005bee:	f7fa fc77 	bl	80004e0 <__adddf3>
 8005bf2:	3401      	adds	r4, #1
 8005bf4:	e7cb      	b.n	8005b8e <__kernel_rem_pio2+0x576>
 8005bf6:	ed35 7b02 	vldmdb	r5!, {d7}
 8005bfa:	ed8d 7b00 	vstr	d7, [sp]
 8005bfe:	ed95 7b02 	vldr	d7, [r5, #8]
 8005c02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c06:	ec53 2b17 	vmov	r2, r3, d7
 8005c0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c0e:	f7fa fc67 	bl	80004e0 <__adddf3>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c1e:	f7fa fc5d 	bl	80004dc <__aeabi_dsub>
 8005c22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c26:	f7fa fc5b 	bl	80004e0 <__adddf3>
 8005c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c2e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005c32:	e9c5 6700 	strd	r6, r7, [r5]
 8005c36:	e771      	b.n	8005b1c <__kernel_rem_pio2+0x504>
 8005c38:	ed34 7b02 	vldmdb	r4!, {d7}
 8005c3c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005c40:	ec51 0b17 	vmov	r0, r1, d7
 8005c44:	4652      	mov	r2, sl
 8005c46:	465b      	mov	r3, fp
 8005c48:	ed8d 7b00 	vstr	d7, [sp]
 8005c4c:	f7fa fc48 	bl	80004e0 <__adddf3>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4606      	mov	r6, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c5c:	f7fa fc3e 	bl	80004dc <__aeabi_dsub>
 8005c60:	4652      	mov	r2, sl
 8005c62:	465b      	mov	r3, fp
 8005c64:	f7fa fc3c 	bl	80004e0 <__adddf3>
 8005c68:	3d01      	subs	r5, #1
 8005c6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c6e:	e9c4 6700 	strd	r6, r7, [r4]
 8005c72:	e757      	b.n	8005b24 <__kernel_rem_pio2+0x50c>
 8005c74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c78:	f7fa fc32 	bl	80004e0 <__adddf3>
 8005c7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c80:	e758      	b.n	8005b34 <__kernel_rem_pio2+0x51c>
 8005c82:	bf00      	nop
 8005c84:	f3af 8000 	nop.w
	...
 8005c90:	41700000 	.word	0x41700000
 8005c94:	3e700000 	.word	0x3e700000
 8005c98:	9b04      	ldr	r3, [sp, #16]
 8005c9a:	9a04      	ldr	r2, [sp, #16]
 8005c9c:	601d      	str	r5, [r3, #0]
 8005c9e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8005ca2:	605c      	str	r4, [r3, #4]
 8005ca4:	609f      	str	r7, [r3, #8]
 8005ca6:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8005caa:	60d3      	str	r3, [r2, #12]
 8005cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cb0:	6110      	str	r0, [r2, #16]
 8005cb2:	6153      	str	r3, [r2, #20]
 8005cb4:	e71d      	b.n	8005af2 <__kernel_rem_pio2+0x4da>
 8005cb6:	bf00      	nop

08005cb8 <scalbn>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	ec55 4b10 	vmov	r4, r5, d0
 8005cbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	b991      	cbnz	r1, 8005cee <scalbn+0x36>
 8005cc8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005ccc:	4323      	orrs	r3, r4
 8005cce:	d03b      	beq.n	8005d48 <scalbn+0x90>
 8005cd0:	4b33      	ldr	r3, [pc, #204]	@ (8005da0 <scalbn+0xe8>)
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f7fa fad2 	bl	8000280 <__aeabi_dmul>
 8005cdc:	4b31      	ldr	r3, [pc, #196]	@ (8005da4 <scalbn+0xec>)
 8005cde:	429e      	cmp	r6, r3
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	da0f      	bge.n	8005d06 <scalbn+0x4e>
 8005ce6:	a326      	add	r3, pc, #152	@ (adr r3, 8005d80 <scalbn+0xc8>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	e01e      	b.n	8005d2c <scalbn+0x74>
 8005cee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005cf2:	4291      	cmp	r1, r2
 8005cf4:	d10b      	bne.n	8005d0e <scalbn+0x56>
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fbf0 	bl	80004e0 <__adddf3>
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	e020      	b.n	8005d48 <scalbn+0x90>
 8005d06:	460b      	mov	r3, r1
 8005d08:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005d0c:	3936      	subs	r1, #54	@ 0x36
 8005d0e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005d12:	4296      	cmp	r6, r2
 8005d14:	dd0d      	ble.n	8005d32 <scalbn+0x7a>
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	a11b      	add	r1, pc, #108	@ (adr r1, 8005d88 <scalbn+0xd0>)
 8005d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d1e:	da02      	bge.n	8005d26 <scalbn+0x6e>
 8005d20:	a11b      	add	r1, pc, #108	@ (adr r1, 8005d90 <scalbn+0xd8>)
 8005d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d26:	a318      	add	r3, pc, #96	@ (adr r3, 8005d88 <scalbn+0xd0>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa faa8 	bl	8000280 <__aeabi_dmul>
 8005d30:	e7e6      	b.n	8005d00 <scalbn+0x48>
 8005d32:	1872      	adds	r2, r6, r1
 8005d34:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005d38:	428a      	cmp	r2, r1
 8005d3a:	dcec      	bgt.n	8005d16 <scalbn+0x5e>
 8005d3c:	2a00      	cmp	r2, #0
 8005d3e:	dd06      	ble.n	8005d4e <scalbn+0x96>
 8005d40:	f36f 531e 	bfc	r3, #20, #11
 8005d44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d48:	ec45 4b10 	vmov	d0, r4, r5
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
 8005d4e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005d52:	da08      	bge.n	8005d66 <scalbn+0xae>
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	a10a      	add	r1, pc, #40	@ (adr r1, 8005d80 <scalbn+0xc8>)
 8005d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d5c:	dac3      	bge.n	8005ce6 <scalbn+0x2e>
 8005d5e:	a10e      	add	r1, pc, #56	@ (adr r1, 8005d98 <scalbn+0xe0>)
 8005d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d64:	e7bf      	b.n	8005ce6 <scalbn+0x2e>
 8005d66:	3236      	adds	r2, #54	@ 0x36
 8005d68:	f36f 531e 	bfc	r3, #20, #11
 8005d6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d70:	4620      	mov	r0, r4
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <scalbn+0xf0>)
 8005d74:	4629      	mov	r1, r5
 8005d76:	2200      	movs	r2, #0
 8005d78:	e7d8      	b.n	8005d2c <scalbn+0x74>
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w
 8005d80:	c2f8f359 	.word	0xc2f8f359
 8005d84:	01a56e1f 	.word	0x01a56e1f
 8005d88:	8800759c 	.word	0x8800759c
 8005d8c:	7e37e43c 	.word	0x7e37e43c
 8005d90:	8800759c 	.word	0x8800759c
 8005d94:	fe37e43c 	.word	0xfe37e43c
 8005d98:	c2f8f359 	.word	0xc2f8f359
 8005d9c:	81a56e1f 	.word	0x81a56e1f
 8005da0:	43500000 	.word	0x43500000
 8005da4:	ffff3cb0 	.word	0xffff3cb0
 8005da8:	3c900000 	.word	0x3c900000
 8005dac:	00000000 	.word	0x00000000

08005db0 <floor>:
 8005db0:	ec51 0b10 	vmov	r0, r1, d0
 8005db4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005dc0:	2e13      	cmp	r6, #19
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	dc34      	bgt.n	8005e34 <floor+0x84>
 8005dca:	2e00      	cmp	r6, #0
 8005dcc:	da17      	bge.n	8005dfe <floor+0x4e>
 8005dce:	a332      	add	r3, pc, #200	@ (adr r3, 8005e98 <floor+0xe8>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fb84 	bl	80004e0 <__adddf3>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f7fa fdb4 	bl	8000948 <__aeabi_dcmpgt>
 8005de0:	b150      	cbz	r0, 8005df8 <floor+0x48>
 8005de2:	2c00      	cmp	r4, #0
 8005de4:	da55      	bge.n	8005e92 <floor+0xe2>
 8005de6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005dea:	432c      	orrs	r4, r5
 8005dec:	2500      	movs	r5, #0
 8005dee:	42ac      	cmp	r4, r5
 8005df0:	4c2b      	ldr	r4, [pc, #172]	@ (8005ea0 <floor+0xf0>)
 8005df2:	bf08      	it	eq
 8005df4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	e023      	b.n	8005e46 <floor+0x96>
 8005dfe:	4f29      	ldr	r7, [pc, #164]	@ (8005ea4 <floor+0xf4>)
 8005e00:	4137      	asrs	r7, r6
 8005e02:	ea01 0307 	and.w	r3, r1, r7
 8005e06:	4303      	orrs	r3, r0
 8005e08:	d01d      	beq.n	8005e46 <floor+0x96>
 8005e0a:	a323      	add	r3, pc, #140	@ (adr r3, 8005e98 <floor+0xe8>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f7fa fb66 	bl	80004e0 <__adddf3>
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	f7fa fd96 	bl	8000948 <__aeabi_dcmpgt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d0eb      	beq.n	8005df8 <floor+0x48>
 8005e20:	2c00      	cmp	r4, #0
 8005e22:	bfbe      	ittt	lt
 8005e24:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005e28:	4133      	asrlt	r3, r6
 8005e2a:	18e4      	addlt	r4, r4, r3
 8005e2c:	ea24 0407 	bic.w	r4, r4, r7
 8005e30:	2500      	movs	r5, #0
 8005e32:	e7e1      	b.n	8005df8 <floor+0x48>
 8005e34:	2e33      	cmp	r6, #51	@ 0x33
 8005e36:	dd0a      	ble.n	8005e4e <floor+0x9e>
 8005e38:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005e3c:	d103      	bne.n	8005e46 <floor+0x96>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	f7fa fb4d 	bl	80004e0 <__adddf3>
 8005e46:	ec41 0b10 	vmov	d0, r0, r1
 8005e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e4e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005e52:	f04f 37ff 	mov.w	r7, #4294967295
 8005e56:	40df      	lsrs	r7, r3
 8005e58:	4207      	tst	r7, r0
 8005e5a:	d0f4      	beq.n	8005e46 <floor+0x96>
 8005e5c:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e98 <floor+0xe8>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa fb3d 	bl	80004e0 <__adddf3>
 8005e66:	2200      	movs	r2, #0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f7fa fd6d 	bl	8000948 <__aeabi_dcmpgt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d0c2      	beq.n	8005df8 <floor+0x48>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	da0a      	bge.n	8005e8c <floor+0xdc>
 8005e76:	2e14      	cmp	r6, #20
 8005e78:	d101      	bne.n	8005e7e <floor+0xce>
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	e006      	b.n	8005e8c <floor+0xdc>
 8005e7e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005e82:	2301      	movs	r3, #1
 8005e84:	40b3      	lsls	r3, r6
 8005e86:	441d      	add	r5, r3
 8005e88:	4545      	cmp	r5, r8
 8005e8a:	d3f6      	bcc.n	8005e7a <floor+0xca>
 8005e8c:	ea25 0507 	bic.w	r5, r5, r7
 8005e90:	e7b2      	b.n	8005df8 <floor+0x48>
 8005e92:	2500      	movs	r5, #0
 8005e94:	462c      	mov	r4, r5
 8005e96:	e7af      	b.n	8005df8 <floor+0x48>
 8005e98:	8800759c 	.word	0x8800759c
 8005e9c:	7e37e43c 	.word	0x7e37e43c
 8005ea0:	bff00000 	.word	0xbff00000
 8005ea4:	000fffff 	.word	0x000fffff

08005ea8 <_init>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_fini>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr
