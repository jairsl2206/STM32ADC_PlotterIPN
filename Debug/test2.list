
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004680  08004680  00005680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004688  08004688  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00005688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004690  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000310  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a839  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f2  00000000  00000000  000108c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  000120b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061b  00000000  00000000  000128a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020179  00000000  00000000  00012ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b68d  00000000  00000000  00033034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c11b2  00000000  00000000  0003e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ff873  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002454  00000000  00000000  000ff8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00101d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045f0 	.word	0x080045f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080045f0 	.word	0x080045f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

uint32_t adcValue;
char buffer[64];

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fb4e 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f83e 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f968 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000290:	f000 f936 	bl	8000500 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000294:	f000 f894 	bl	80003c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000298:	f000 f902 	bl	80004a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  //int fake_value = 0;

  HAL_Init();
 800029c:	f000 fb42 	bl	8000924 <HAL_Init>
  SystemClock_Config();
 80002a0:	f000 f832 	bl	8000308 <SystemClock_Config>
  MX_GPIO_Init();
 80002a4:	f000 f95c 	bl	8000560 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002a8:	f000 f88a 	bl	80003c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80002ac:	f000 f928 	bl	8000500 <MX_USART2_UART_Init>

  HAL_ADC_Start(&hadc1); // Inicia ADC
 80002b0:	4810      	ldr	r0, [pc, #64]	@ (80002f4 <main+0x74>)
 80002b2:	f000 fd2f 	bl	8000d14 <HAL_ADC_Start>
      sprintf(buffer, "%u\n", fake_value);  // convierte el n√∫mero en texto + newline
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
      HAL_Delay(10);
      */
      //Datos de ADC de la tarjeta
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002b6:	f04f 31ff 	mov.w	r1, #4294967295
 80002ba:	480e      	ldr	r0, [pc, #56]	@ (80002f4 <main+0x74>)
 80002bc:	f000 fde0 	bl	8000e80 <HAL_ADC_PollForConversion>
        adcValue = HAL_ADC_GetValue(&hadc1);
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <main+0x74>)
 80002c2:	f000 feab 	bl	800101c <HAL_ADC_GetValue>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a0b      	ldr	r2, [pc, #44]	@ (80002f8 <main+0x78>)
 80002ca:	6013      	str	r3, [r2, #0]

        // Enviar por UART
        sprintf(buffer, "ADC:%lu\n", adcValue);
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <main+0x78>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	461a      	mov	r2, r3
 80002d2:	490a      	ldr	r1, [pc, #40]	@ (80002fc <main+0x7c>)
 80002d4:	480a      	ldr	r0, [pc, #40]	@ (8000300 <main+0x80>)
 80002d6:	f003 fceb 	bl	8003cb0 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80002da:	4809      	ldr	r0, [pc, #36]	@ (8000300 <main+0x80>)
 80002dc:	f7ff ff78 	bl	80001d0 <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	f04f 33ff 	mov.w	r3, #4294967295
 80002e8:	4905      	ldr	r1, [pc, #20]	@ (8000300 <main+0x80>)
 80002ea:	4806      	ldr	r0, [pc, #24]	@ (8000304 <main+0x84>)
 80002ec:	f003 f904 	bl	80034f8 <HAL_UART_Transmit>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002f0:	bf00      	nop
 80002f2:	e7e0      	b.n	80002b6 <main+0x36>
 80002f4:	20000078 	.word	0x20000078
 80002f8:	200001d8 	.word	0x200001d8
 80002fc:	08004608 	.word	0x08004608
 8000300:	200001dc 	.word	0x200001dc
 8000304:	20000150 	.word	0x20000150

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b096      	sub	sp, #88	@ 0x58
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fcec 	bl	8003cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	2310      	movs	r3, #16
 8000348:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2302      	movs	r3, #2
 800034c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034e:	2300      	movs	r3, #0
 8000350:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000352:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000356:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fd29 	bl	8001db4 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000368:	f000 f960 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800037c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000382:	f107 031c 	add.w	r3, r7, #28
 8000386:	2102      	movs	r1, #2
 8000388:	4618      	mov	r0, r3
 800038a:	f002 fd21 	bl	8002dd0 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000394:	f000 f94a 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000398:	2381      	movs	r3, #129	@ 0x81
 800039a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a6:	463b      	mov	r3, r7
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 ff23 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003b4:	f000 f93a 	bl	800062c <Error_Handler>
  }
}
 80003b8:	bf00      	nop
 80003ba:	3758      	adds	r7, #88	@ 0x58
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e2:	4b2e      	ldr	r3, [pc, #184]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ea:	4b2c      	ldr	r3, [pc, #176]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003f0:	4b2a      	ldr	r3, [pc, #168]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f6:	4b29      	ldr	r3, [pc, #164]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003fc:	4b27      	ldr	r3, [pc, #156]	@ (800049c <MX_ADC1_Init+0xdc>)
 80003fe:	2201      	movs	r2, #1
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000402:	4b26      	ldr	r3, [pc, #152]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040a:	4b24      	ldr	r3, [pc, #144]	@ (800049c <MX_ADC1_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b22      	ldr	r3, [pc, #136]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000412:	2201      	movs	r2, #1
 8000414:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000416:	4b21      	ldr	r3, [pc, #132]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800041c:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <MX_ADC1_Init+0xdc>)
 800041e:	2201      	movs	r2, #1
 8000420:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000422:	4b1e      	ldr	r3, [pc, #120]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800042a:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <MX_ADC1_Init+0xdc>)
 800042c:	2204      	movs	r2, #4
 800042e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000432:	2200      	movs	r2, #0
 8000434:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000436:	4b19      	ldr	r3, [pc, #100]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000438:	2200      	movs	r2, #0
 800043a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800043c:	4817      	ldr	r0, [pc, #92]	@ (800049c <MX_ADC1_Init+0xdc>)
 800043e:	f000 fad7 	bl	80009f0 <HAL_ADC_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000448:	f000 f8f0 	bl	800062c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	4619      	mov	r1, r3
 8000456:	4811      	ldr	r0, [pc, #68]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000458:	f001 f8ac 	bl	80015b4 <HAL_ADCEx_MultiModeConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000462:	f000 f8e3 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000466:	2301      	movs	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046a:	2301      	movs	r3, #1
 800046c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800046e:	2301      	movs	r3, #1
 8000470:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4619      	mov	r1, r3
 8000482:	4806      	ldr	r0, [pc, #24]	@ (800049c <MX_ADC1_Init+0xdc>)
 8000484:	f000 fdd8 	bl	8001038 <HAL_ADC_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800048e:	f000 f8cd 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	@ 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	20000078 	.word	0x20000078

080004a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a4:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004a6:	4a15      	ldr	r2, [pc, #84]	@ (80004fc <MX_USART1_UART_Init+0x5c>)
 80004a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004c6:	220c      	movs	r2, #12
 80004c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d0:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	@ (80004f8 <MX_USART1_UART_Init+0x58>)
 80004e4:	f002 ffba 	bl	800345c <HAL_UART_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004ee:	f000 f89d 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000c8 	.word	0x200000c8
 80004fc:	40013800 	.word	0x40013800

08000500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000506:	4a15      	ldr	r2, [pc, #84]	@ (800055c <MX_USART2_UART_Init+0x5c>)
 8000508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 800050c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <MX_USART2_UART_Init+0x58>)
 8000544:	f002 ff8a 	bl	800345c <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800054e:	f000 f86d 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000150 	.word	0x20000150
 800055c:	40004400 	.word	0x40004400

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800057c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <MX_GPIO_Init+0xc4>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <MX_GPIO_Init+0xc4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a18      	ldr	r2, [pc, #96]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_GPIO_Init+0xc4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f001 fbd1 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <MX_GPIO_Init+0xc8>)
 80005fa:	f001 fa51 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f001 fa42 	bl	8001aa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	@ 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a0e      	ldr	r2, [pc, #56]	@ (800067c <HAL_MspInit+0x44>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <HAL_MspInit+0x44>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a08      	ldr	r2, [pc, #32]	@ (800067c <HAL_MspInit+0x44>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800066e:	2007      	movs	r0, #7
 8000670:	f001 f9e2 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006a0:	d124      	bne.n	80006ec <HAL_ADC_MspInit+0x6c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_ADC_MspInit+0x74>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d2:	2303      	movs	r3, #3
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e8:	f001 f9da 	bl	8001aa0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	@ 0x30
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a2f      	ldr	r2, [pc, #188]	@ (80007d4 <HAL_UART_MspInit+0xdc>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d12a      	bne.n	8000770 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800071a:	4b2f      	ldr	r3, [pc, #188]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a2e      	ldr	r2, [pc, #184]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a28      	ldr	r2, [pc, #160]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800074a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800075c:	2307      	movs	r3, #7
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f001 f999 	bl	8001aa0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800076e:	e02d      	b.n	80007cc <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_UART_MspInit+0xe4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d128      	bne.n	80007cc <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a16      	ldr	r2, [pc, #88]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_UART_MspInit+0xe0>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007aa:	230c      	movs	r3, #12
 80007ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ba:	2307      	movs	r3, #7
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c8:	f001 f96a 	bl	8001aa0 <HAL_GPIO_Init>
}
 80007cc:	bf00      	nop
 80007ce:	3730      	adds	r7, #48	@ 0x30
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40013800 	.word	0x40013800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40004400 	.word	0x40004400

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <NMI_Handler+0x4>

080007e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <MemManage_Handler+0x4>

080007f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <UsageFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000836:	f000 f8bb 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	@ (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f003 fa48 	bl	8003d04 <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20003000 	.word	0x20003000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	2000021c 	.word	0x2000021c
 80008a8:	20000370 	.word	0x20000370

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000908 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff ffea 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	@ (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f003 fa07 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000902:	f7ff fcbd 	bl	8000280 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000908:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000914:	08004690 	.word	0x08004690
  ldr r2, =_sbss
 8000918:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800091c:	2000036c 	.word	0x2000036c

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	@ (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f001 f87f 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff fe7a 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f889 	bl	8001a86 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f001 f85f 	bl	8001a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000220 	.word	0x20000220

080009d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;  
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000220 	.word	0x20000220

080009f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09a      	sub	sp, #104	@ 0x68
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009fe:	2300      	movs	r3, #0
 8000a00:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d101      	bne.n	8000a10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e172      	b.n	8000cf6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d176      	bne.n	8000b10 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d152      	bne.n	8000ad0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fe1b 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d13b      	bne.n	8000ad0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f000 fed5 	bl	8001808 <ADC_Disable>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d12f      	bne.n	8000ad0 <HAL_ADC_Init+0xe0>
 8000a70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d12b      	bne.n	8000ad0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a80:	f023 0302 	bic.w	r3, r3, #2
 8000a84:	f043 0202 	orr.w	r2, r3, #2
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a9a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000aaa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000aac:	4b94      	ldr	r3, [pc, #592]	@ (8000d00 <HAL_ADC_Init+0x310>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a94      	ldr	r2, [pc, #592]	@ (8000d04 <HAL_ADC_Init+0x314>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	0c9a      	lsrs	r2, r3, #18
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ac2:	e002      	b.n	8000aca <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f9      	bne.n	8000ac4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d007      	beq.n	8000aee <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aec:	d110      	bne.n	8000b10 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f023 0312 	bic.w	r3, r3, #18
 8000af6:	f043 0210 	orr.w	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f043 0201 	orr.w	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f040 80df 	bne.w	8000cdc <HAL_ADC_Init+0x2ec>
 8000b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 80da 	bne.w	8000cdc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 80d2 	bne.w	8000cdc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000b40:	f043 0202 	orr.w	r2, r3, #2
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b48:	4b6f      	ldr	r3, [pc, #444]	@ (8000d08 <HAL_ADC_Init+0x318>)
 8000b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b54:	d102      	bne.n	8000b5c <HAL_ADC_Init+0x16c>
 8000b56:	4b6d      	ldr	r3, [pc, #436]	@ (8000d0c <HAL_ADC_Init+0x31c>)
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	e002      	b.n	8000b62 <HAL_ADC_Init+0x172>
 8000b5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000b60:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d108      	bne.n	8000b82 <HAL_ADC_Init+0x192>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d101      	bne.n	8000b82 <HAL_ADC_Init+0x192>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e000      	b.n	8000b84 <HAL_ADC_Init+0x194>
 8000b82:	2300      	movs	r3, #0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11c      	bne.n	8000bc2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b88:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d010      	beq.n	8000bb0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d107      	bne.n	8000baa <HAL_ADC_Init+0x1ba>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x1ba>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_ADC_Init+0x1bc>
 8000baa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d108      	bne.n	8000bc2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bc0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7e5b      	ldrb	r3, [r3, #25]
 8000bc6:	035b      	lsls	r3, r3, #13
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000bcc:	2a01      	cmp	r2, #1
 8000bce:	d002      	beq.n	8000bd6 <HAL_ADC_Init+0x1e6>
 8000bd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bd4:	e000      	b.n	8000bd8 <HAL_ADC_Init+0x1e8>
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000be8:	4313      	orrs	r3, r2
 8000bea:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d11b      	bne.n	8000c2e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7e5b      	ldrb	r3, [r3, #25]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d109      	bne.n	8000c12 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	3b01      	subs	r3, #1
 8000c04:	045a      	lsls	r2, r3, #17
 8000c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c10:	e00d      	b.n	8000c2e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000c1a:	f043 0220 	orr.w	r2, r3, #32
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d007      	beq.n	8000c46 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c42:	4313      	orrs	r3, r2
 8000c44:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 030c 	and.w	r3, r3, #12
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d114      	bne.n	8000c7e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c62:	f023 0302 	bic.w	r3, r3, #2
 8000c66:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7e1b      	ldrb	r3, [r3, #24]
 8000c6c:	039a      	lsls	r2, r3, #14
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4313      	orrs	r3, r2
 8000c78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <HAL_ADC_Init+0x320>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d10c      	bne.n	8000cb4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca0:	f023 010f 	bic.w	r1, r3, #15
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69db      	ldr	r3, [r3, #28]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cb2:	e007      	b.n	8000cc4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 020f 	bic.w	r2, r2, #15
 8000cc2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cda:	e00a      	b.n	8000cf2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce0:	f023 0312 	bic.w	r3, r3, #18
 8000ce4:	f043 0210 	orr.w	r2, r3, #16
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cec:	2301      	movs	r3, #1
 8000cee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3768      	adds	r7, #104	@ 0x68
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	431bde83 	.word	0x431bde83
 8000d08:	50000300 	.word	0x50000300
 8000d0c:	50000100 	.word	0x50000100
 8000d10:	fff0c007 	.word	0xfff0c007

08000d14 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 809c 	bne.w	8000e68 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_ADC_Start+0x2a>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e097      	b.n	8000e6e <HAL_ADC_Start+0x15a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 fcfa 	bl	8001740 <ADC_Enable>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8083 	bne.w	8000e5e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d6c:	4b42      	ldr	r3, [pc, #264]	@ (8000e78 <HAL_ADC_Start+0x164>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <HAL_ADC_Start+0x6e>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d80:	d115      	bne.n	8000dae <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d027      	beq.n	8000dec <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000da4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000dac:	e01e      	b.n	8000dec <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dc2:	d004      	beq.n	8000dce <HAL_ADC_Start+0xba>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e7c <HAL_ADC_Start+0x168>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10e      	bne.n	8000dec <HAL_ADC_Start+0xd8>
 8000dce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d007      	beq.n	8000dec <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000de4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000df8:	d106      	bne.n	8000e08 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f023 0206 	bic.w	r2, r3, #6
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e06:	e002      	b.n	8000e0e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	221c      	movs	r2, #28
 8000e1c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e1e:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_ADC_Start+0x164>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d010      	beq.n	8000e4c <HAL_ADC_Start+0x138>
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_ADC_Start+0x164>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	d00a      	beq.n	8000e4c <HAL_ADC_Start+0x138>
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <HAL_ADC_Start+0x164>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	2b09      	cmp	r3, #9
 8000e40:	d004      	beq.n	8000e4c <HAL_ADC_Start+0x138>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e4a:	d10f      	bne.n	8000e6c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0204 	orr.w	r2, r2, #4
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	e006      	b.n	8000e6c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e66:	e001      	b.n	8000e6c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	50000300 	.word	0x50000300
 8000e7c:	50000100 	.word	0x50000100

08000e80 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d102      	bne.n	8000e9c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e96:	2308      	movs	r3, #8
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e02e      	b.n	8000efa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001018 <HAL_ADC_PollForConversion+0x198>)
 8000e9e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d112      	bne.n	8000ed2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d11d      	bne.n	8000ef6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f043 0220 	orr.w	r2, r3, #32
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e09d      	b.n	800100e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f043 0220 	orr.w	r2, r3, #32
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e08b      	b.n	800100e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000efa:	4b47      	ldr	r3, [pc, #284]	@ (8001018 <HAL_ADC_PollForConversion+0x198>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <HAL_ADC_PollForConversion+0x90>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f0e:	d104      	bne.n	8000f1a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	e003      	b.n	8000f22 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000f1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000f22:	f7ff fd59 	bl	80009d8 <HAL_GetTick>
 8000f26:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f28:	e021      	b.n	8000f6e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d01d      	beq.n	8000f6e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_ADC_PollForConversion+0xc8>
 8000f38:	f7ff fd4e 	bl	80009d8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d212      	bcs.n	8000f6e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10b      	bne.n	8000f6e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f043 0204 	orr.w	r2, r3, #4
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e04f      	b.n	800100e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0d6      	beq.n	8000f2a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d131      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d12c      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d125      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d112      	bne.n	8000fe2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d112      	bne.n	8000ffa <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe0:	e00b      	b.n	8000ffa <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f043 0220 	orr.w	r2, r3, #32
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	50000300 	.word	0x50000300

0800101c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001038:	b480      	push	{r7}
 800103a:	b09b      	sub	sp, #108	@ 0x6c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_ConfigChannel+0x22>
 8001056:	2302      	movs	r3, #2
 8001058:	e2a1      	b.n	800159e <HAL_ADC_ConfigChannel+0x566>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 8285 	bne.w	800157c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d81c      	bhi.n	80010b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	461a      	mov	r2, r3
 800108e:	231f      	movs	r3, #31
 8001090:	4093      	lsls	r3, r2
 8001092:	43db      	mvns	r3, r3
 8001094:	4019      	ands	r1, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa00 f203 	lsl.w	r2, r0, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010b2:	e063      	b.n	800117c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d81e      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	3b1e      	subs	r3, #30
 80010d0:	221f      	movs	r2, #31
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	4019      	ands	r1, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	3b1e      	subs	r3, #30
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f8:	e040      	b.n	800117c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b0e      	cmp	r3, #14
 8001100:	d81e      	bhi.n	8001140 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	3b3c      	subs	r3, #60	@ 0x3c
 8001116:	221f      	movs	r2, #31
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4019      	ands	r1, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	3b3c      	subs	r3, #60	@ 0x3c
 8001132:	fa00 f203 	lsl.w	r2, r0, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	639a      	str	r2, [r3, #56]	@ 0x38
 800113e:	e01d      	b.n	800117c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	3b5a      	subs	r3, #90	@ 0x5a
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4019      	ands	r1, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	3b5a      	subs	r3, #90	@ 0x5a
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 80e5 	bne.w	8001356 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d91c      	bls.n	80011ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6999      	ldr	r1, [r3, #24]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	3b1e      	subs	r3, #30
 80011a6:	2207      	movs	r2, #7
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	3b1e      	subs	r3, #30
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	e019      	b.n	8001202 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6959      	ldr	r1, [r3, #20]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4019      	ands	r1, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	3b01      	subs	r3, #1
 8001220:	2b03      	cmp	r3, #3
 8001222:	d84f      	bhi.n	80012c4 <HAL_ADC_ConfigChannel+0x28c>
 8001224:	a201      	add	r2, pc, #4	@ (adr r2, 800122c <HAL_ADC_ConfigChannel+0x1f4>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	0800123d 	.word	0x0800123d
 8001230:	0800125f 	.word	0x0800125f
 8001234:	08001281 	.word	0x08001281
 8001238:	080012a3 	.word	0x080012a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001242:	4b9c      	ldr	r3, [pc, #624]	@ (80014b4 <HAL_ADC_ConfigChannel+0x47c>)
 8001244:	4013      	ands	r3, r2
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	0691      	lsls	r1, r2, #26
 800124c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800124e:	430a      	orrs	r2, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800125a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800125c:	e07b      	b.n	8001356 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001264:	4b93      	ldr	r3, [pc, #588]	@ (80014b4 <HAL_ADC_ConfigChannel+0x47c>)
 8001266:	4013      	ands	r3, r2
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	0691      	lsls	r1, r2, #26
 800126e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001270:	430a      	orrs	r2, r1
 8001272:	431a      	orrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800127c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800127e:	e06a      	b.n	8001356 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001286:	4b8b      	ldr	r3, [pc, #556]	@ (80014b4 <HAL_ADC_ConfigChannel+0x47c>)
 8001288:	4013      	ands	r3, r2
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	0691      	lsls	r1, r2, #26
 8001290:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001292:	430a      	orrs	r2, r1
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800129e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012a0:	e059      	b.n	8001356 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80012a8:	4b82      	ldr	r3, [pc, #520]	@ (80014b4 <HAL_ADC_ConfigChannel+0x47c>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	0691      	lsls	r1, r2, #26
 80012b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012b4:	430a      	orrs	r2, r1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012c0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012c2:	e048      	b.n	8001356 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	069b      	lsls	r3, r3, #26
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d107      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80012e6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80012ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	069b      	lsls	r3, r3, #26
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d107      	bne.n	800130c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800130a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	069b      	lsls	r3, r3, #26
 800131c:	429a      	cmp	r2, r3
 800131e:	d107      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800132e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001336:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	069b      	lsls	r3, r3, #26
 8001340:	429a      	cmp	r2, r3
 8001342:	d107      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001352:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001354:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x33e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x33e>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_ADC_ConfigChannel+0x340>
 8001376:	2300      	movs	r3, #0
 8001378:	2b00      	cmp	r3, #0
 800137a:	f040 810a 	bne.w	8001592 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d00f      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43da      	mvns	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	400a      	ands	r2, r1
 80013a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80013a4:	e049      	b.n	800143a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b09      	cmp	r3, #9
 80013c6:	d91c      	bls.n	8001402 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6999      	ldr	r1, [r3, #24]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1b      	subs	r3, #27
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4019      	ands	r1, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	6898      	ldr	r0, [r3, #8]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	3b1b      	subs	r3, #27
 80013f4:	fa00 f203 	lsl.w	r2, r0, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	619a      	str	r2, [r3, #24]
 8001400:	e01b      	b.n	800143a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6959      	ldr	r1, [r3, #20]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	2207      	movs	r2, #7
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	4019      	ands	r1, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	6898      	ldr	r0, [r3, #8]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	fa00 f203 	lsl.w	r2, r0, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_ADC_ConfigChannel+0x480>)
 800143c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d105      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001456:	2b11      	cmp	r3, #17
 8001458:	d105      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800145a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800146a:	2b12      	cmp	r3, #18
 800146c:	f040 8091 	bne.w	8001592 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 808a 	bne.w	8001592 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001486:	d102      	bne.n	800148e <HAL_ADC_ConfigChannel+0x456>
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_ADC_ConfigChannel+0x484>)
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e002      	b.n	8001494 <HAL_ADC_ConfigChannel+0x45c>
 800148e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001492:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d10e      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x488>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d107      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x488>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e006      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x48a>
 80014b4:	83fff000 	.word	0x83fff000
 80014b8:	50000300 	.word	0x50000300
 80014bc:	50000100 	.word	0x50000100
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d150      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d010      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x4b0>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x4b0>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_ADC_ConfigChannel+0x4b2>
 80014e8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d13c      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d11d      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x4fa>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014fe:	d118      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800150a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150c:	4b27      	ldr	r3, [pc, #156]	@ (80015ac <HAL_ADC_ConfigChannel+0x574>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a27      	ldr	r2, [pc, #156]	@ (80015b0 <HAL_ADC_ConfigChannel+0x578>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0c9a      	lsrs	r2, r3, #18
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001522:	e002      	b.n	800152a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3b01      	subs	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f9      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001530:	e02e      	b.n	8001590 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b11      	cmp	r3, #17
 8001538:	d10b      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x51a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001542:	d106      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800154c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800154e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001550:	e01e      	b.n	8001590 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d11a      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800155a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001564:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001566:	e013      	b.n	8001590 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f043 0220 	orr.w	r2, r3, #32
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800157a:	e00a      	b.n	8001592 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f043 0220 	orr.w	r2, r3, #32
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800158e:	e000      	b.n	8001592 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001590:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800159a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800159e:	4618      	mov	r0, r3
 80015a0:	376c      	adds	r7, #108	@ 0x6c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000000 	.word	0x20000000
 80015b0:	431bde83 	.word	0x431bde83

080015b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b099      	sub	sp, #100	@ 0x64
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015cc:	d102      	bne.n	80015d4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80015ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001738 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	e002      	b.n	80015da <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80015d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0a2      	b.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e09b      	b.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d17f      	bne.n	8001708 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d179      	bne.n	8001708 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001614:	4b49      	ldr	r3, [pc, #292]	@ (800173c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001616:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d040      	beq.n	80016a2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001632:	035b      	lsls	r3, r3, #13
 8001634:	430b      	orrs	r3, r1
 8001636:	431a      	orrs	r2, r3
 8001638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800163a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d108      	bne.n	800165c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d15c      	bne.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800167e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001680:	2b00      	cmp	r3, #0
 8001682:	d14b      	bne.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001684:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800168c:	f023 030f 	bic.w	r3, r3, #15
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	6811      	ldr	r1, [r2, #0]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	6892      	ldr	r2, [r2, #8]
 8001698:	430a      	orrs	r2, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800169e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016a0:	e03c      	b.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016ac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80016ce:	2300      	movs	r3, #0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d123      	bne.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80016f0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d112      	bne.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80016f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80016fe:	f023 030f 	bic.w	r3, r3, #15
 8001702:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001704:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001706:	e009      	b.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170c:	f043 0220 	orr.w	r2, r3, #32
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800171a:	e000      	b.n	800171e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800171c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001726:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800172a:	4618      	mov	r0, r3
 800172c:	3764      	adds	r7, #100	@ 0x64
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	50000100 	.word	0x50000100
 800173c:	50000300 	.word	0x50000300

08001740 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <ADC_Enable+0x2c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <ADC_Enable+0x2c>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <ADC_Enable+0x2e>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d143      	bne.n	80017fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <ADC_Enable+0xc4>)
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00d      	beq.n	800179c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	f043 0210 	orr.w	r2, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001790:	f043 0201 	orr.w	r2, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e02f      	b.n	80017fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80017ac:	f7ff f914 	bl	80009d8 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017b2:	e01b      	b.n	80017ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017b4:	f7ff f910 	bl	80009d8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d914      	bls.n	80017ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d00d      	beq.n	80017ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f043 0210 	orr.w	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e007      	b.n	80017fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d1dc      	bne.n	80017b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	8000003f 	.word	0x8000003f

08001808 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <ADC_Disable+0x2c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <ADC_Disable+0x2c>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <ADC_Disable+0x2e>
 8001834:	2300      	movs	r3, #0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d047      	beq.n	80018ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 030d 	and.w	r3, r3, #13
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10f      	bne.n	8001868 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0202 	orr.w	r2, r2, #2
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2203      	movs	r2, #3
 800185e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001860:	f7ff f8ba 	bl	80009d8 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001866:	e029      	b.n	80018bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f043 0210 	orr.w	r2, r3, #16
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e023      	b.n	80018cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001884:	f7ff f8a8 	bl	80009d8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d914      	bls.n	80018bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10d      	bne.n	80018bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	f043 0210 	orr.w	r2, r3, #16
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e007      	b.n	80018cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d0dc      	beq.n	8001884 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	@ (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	@ (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	@ 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff47 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff5c 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffb0 	bl	80019f4 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e14e      	b.n	8001d4e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8140 	beq.w	8001d48 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x40>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d017      	beq.n	8001b7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d123      	bne.n	8001bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	6939      	ldr	r1, [r7, #16]
 8001bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0203 	and.w	r2, r3, #3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 809a 	beq.w	8001d48 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	4b55      	ldr	r3, [pc, #340]	@ (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a54      	ldr	r2, [pc, #336]	@ (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b52      	ldr	r3, [pc, #328]	@ (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c2c:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c56:	d013      	beq.n	8001c80 <HAL_GPIO_Init+0x1e0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a46      	ldr	r2, [pc, #280]	@ (8001d74 <HAL_GPIO_Init+0x2d4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00d      	beq.n	8001c7c <HAL_GPIO_Init+0x1dc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a45      	ldr	r2, [pc, #276]	@ (8001d78 <HAL_GPIO_Init+0x2d8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d007      	beq.n	8001c78 <HAL_GPIO_Init+0x1d8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a44      	ldr	r2, [pc, #272]	@ (8001d7c <HAL_GPIO_Init+0x2dc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_GPIO_Init+0x1d4>
 8001c70:	2303      	movs	r3, #3
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c74:	2305      	movs	r3, #5
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c80:	2300      	movs	r3, #0
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c92:	4937      	ldr	r1, [pc, #220]	@ (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca0:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cca:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cee:	4a24      	ldr	r2, [pc, #144]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d18:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d42:	4a0f      	ldr	r2, [pc, #60]	@ (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f aea9 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48000800 	.word	0x48000800
 8001d7c:	48000c00 	.word	0x48000c00
 8001d80:	40010400 	.word	0x40010400

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f000 bff4 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 816d 	beq.w	80020ca <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001df0:	4bb4      	ldr	r3, [pc, #720]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d00c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfc:	4bb1      	ldr	r3, [pc, #708]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d157      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x104>
 8001e08:	4bae      	ldr	r3, [pc, #696]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e14:	d150      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x104>
 8001e16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e1a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e36:	d802      	bhi.n	8001e3e <HAL_RCC_OscConfig+0x8a>
 8001e38:	4ba2      	ldr	r3, [pc, #648]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0xb6>
 8001e3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e42:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e56:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e5a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001e66:	4b97      	ldr	r3, [pc, #604]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e6e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001e72:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001e76:	fa92 f2a2 	rbit	r2, r2
 8001e7a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001e7e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001e82:	fab2 f282 	clz	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f002 021f 	and.w	r2, r2, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f202 	lsl.w	r2, r1, r2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8114 	beq.w	80020c8 <HAL_RCC_OscConfig+0x314>
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f040 810b 	bne.w	80020c8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f000 bf85 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x124>
 8001eca:	4b7e      	ldr	r3, [pc, #504]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7d      	ldr	r2, [pc, #500]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e036      	b.n	8001f46 <HAL_RCC_OscConfig+0x192>
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x14e>
 8001ee8:	4b76      	ldr	r3, [pc, #472]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a75      	ldr	r2, [pc, #468]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b73      	ldr	r3, [pc, #460]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a72      	ldr	r2, [pc, #456]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	e021      	b.n	8001f46 <HAL_RCC_OscConfig+0x192>
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x17a>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCC_OscConfig+0x192>
 8001f2e:	4b65      	ldr	r3, [pc, #404]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a64      	ldr	r2, [pc, #400]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b62      	ldr	r3, [pc, #392]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a61      	ldr	r2, [pc, #388]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	495a      	ldr	r1, [pc, #360]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d054      	beq.n	800201a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fd32 	bl	80009d8 <HAL_GetTick>
 8001f74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7a:	f7fe fd2d 	bl	80009d8 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d902      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	f000 bf19 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8001f90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f94:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001fa4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fb0:	d802      	bhi.n	8001fb8 <HAL_RCC_OscConfig+0x204>
 8001fb2:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e015      	b.n	8001fe4 <HAL_RCC_OscConfig+0x230>
 8001fb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fbc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001fcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001fd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001fe0:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fe8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001fec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ff8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0b0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1c6>
 8002018:	e057      	b.n	80020ca <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe fcdd 	bl	80009d8 <HAL_GetTick>
 800201e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe fcd8 	bl	80009d8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	@ 0x64
 8002032:	d902      	bls.n	800203a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	f000 bec4 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
 800203a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800203e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800204e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b3f      	cmp	r3, #63	@ 0x3f
 800205a:	d802      	bhi.n	8002062 <HAL_RCC_OscConfig+0x2ae>
 800205c:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x2da>
 8002062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002066:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002076:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800207a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800207e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_RCC_OscConfig+0x310>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002092:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002096:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800209a:	fa92 f2a2 	rbit	r2, r2
 800209e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80020a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80020a6:	fab2 f282 	clz	r2, r2
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f042 0220 	orr.w	r2, r2, #32
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f002 021f 	and.w	r2, r2, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f202 	lsl.w	r2, r1, r2
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1b0      	bne.n	8002024 <HAL_RCC_OscConfig+0x270>
 80020c2:	e002      	b.n	80020ca <HAL_RCC_OscConfig+0x316>
 80020c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 816c 	beq.w	80023b8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020e0:	4bcc      	ldr	r3, [pc, #816]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020ec:	4bc9      	ldr	r3, [pc, #804]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d16d      	bne.n	80021d4 <HAL_RCC_OscConfig+0x420>
 80020f8:	4bc6      	ldr	r3, [pc, #792]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d167      	bne.n	80021d4 <HAL_RCC_OscConfig+0x420>
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002116:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b3f      	cmp	r3, #63	@ 0x3f
 8002122:	d802      	bhi.n	800212a <HAL_RCC_OscConfig+0x376>
 8002124:	4bbb      	ldr	r3, [pc, #748]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	e013      	b.n	8002152 <HAL_RCC_OscConfig+0x39e>
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002142:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800214e:	4bb1      	ldr	r3, [pc, #708]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	2202      	movs	r2, #2
 8002154:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002158:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002164:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f042 0220 	orr.w	r2, r2, #32
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f002 021f 	and.w	r2, r2, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCC_OscConfig+0x3e6>
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d002      	beq.n	800219a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	f000 be14 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b9e      	ldr	r3, [pc, #632]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	21f8      	movs	r1, #248	@ 0xf8
 80021b0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80021b8:	fa91 f1a1 	rbit	r1, r1
 80021bc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80021c0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80021c4:	fab1 f181 	clz	r1, r1
 80021c8:	b2c9      	uxtb	r1, r1
 80021ca:	408b      	lsls	r3, r1
 80021cc:	4991      	ldr	r1, [pc, #580]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e0f1      	b.n	80023b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8083 	beq.w	80022ec <HAL_RCC_OscConfig+0x538>
 80021e6:	2301      	movs	r3, #1
 80021e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80021f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002206:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	461a      	mov	r2, r3
 800220e:	2301      	movs	r3, #1
 8002210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fbe1 	bl	80009d8 <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221c:	f7fe fbdc 	bl	80009d8 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d902      	bls.n	8002232 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	f000 bdc8 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8002232:	2302      	movs	r3, #2
 8002234:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002244:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002250:	d802      	bhi.n	8002258 <HAL_RCC_OscConfig+0x4a4>
 8002252:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e013      	b.n	8002280 <HAL_RCC_OscConfig+0x4cc>
 8002258:	2302      	movs	r3, #2
 800225a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002270:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800227c:	4b65      	ldr	r3, [pc, #404]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	2202      	movs	r2, #2
 8002282:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002286:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002292:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f042 0220 	orr.w	r2, r2, #32
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	f002 021f 	and.w	r2, r2, #31
 80022a6:	2101      	movs	r1, #1
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0b4      	beq.n	800221c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b58      	ldr	r3, [pc, #352]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	21f8      	movs	r1, #248	@ 0xf8
 80022c8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80022d0:	fa91 f1a1 	rbit	r1, r1
 80022d4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80022d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80022dc:	fab1 f181 	clz	r1, r1
 80022e0:	b2c9      	uxtb	r1, r1
 80022e2:	408b      	lsls	r3, r1
 80022e4:	494b      	ldr	r1, [pc, #300]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
 80022ea:	e065      	b.n	80023b8 <HAL_RCC_OscConfig+0x604>
 80022ec:	2301      	movs	r3, #1
 80022ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80022fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800230c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	461a      	mov	r2, r3
 8002314:	2300      	movs	r3, #0
 8002316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fb5e 	bl	80009d8 <HAL_GetTick>
 800231c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002322:	f7fe fb59 	bl	80009d8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d902      	bls.n	8002338 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	f000 bd45 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800234a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b3f      	cmp	r3, #63	@ 0x3f
 8002356:	d802      	bhi.n	800235e <HAL_RCC_OscConfig+0x5aa>
 8002358:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e013      	b.n	8002386 <HAL_RCC_OscConfig+0x5d2>
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002376:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002382:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_RCC_OscConfig+0x660>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2202      	movs	r2, #2
 8002388:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800238c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002390:	fa92 f2a2 	rbit	r2, r2
 8002394:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002398:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f042 0220 	orr.w	r2, r2, #32
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f002 021f 	and.w	r2, r2, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1b4      	bne.n	8002322 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8115 	beq.w	80025f8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d07e      	beq.n	80024dc <HAL_RCC_OscConfig+0x728>
 80023de:	2301      	movs	r3, #1
 80023e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80023f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_RCC_OscConfig+0x664>)
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2301      	movs	r3, #1
 8002406:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe fae6 	bl	80009d8 <HAL_GetTick>
 800240c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002410:	e00f      	b.n	8002432 <HAL_RCC_OscConfig+0x67e>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fadc 	bl	80009d8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d902      	bls.n	8002432 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	f000 bcc8 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002448:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002462:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002470:	2202      	movs	r2, #2
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	fa93 f2a3 	rbit	r2, r3
 8002482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002486:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800248a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248c:	4bb0      	ldr	r3, [pc, #704]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 800248e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002498:	2102      	movs	r1, #2
 800249a:	6019      	str	r1, [r3, #0]
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f1a3 	rbit	r1, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024b2:	6019      	str	r1, [r3, #0]
  return result;
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0a0      	beq.n	800241c <HAL_RCC_OscConfig+0x668>
 80024da:	e08d      	b.n	80025f8 <HAL_RCC_OscConfig+0x844>
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024fe:	601a      	str	r2, [r3, #0]
  return result;
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002508:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4b90      	ldr	r3, [pc, #576]	@ (8002754 <HAL_RCC_OscConfig+0x9a0>)
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	461a      	mov	r2, r3
 800251a:	2300      	movs	r3, #0
 800251c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7fe fa5b 	bl	80009d8 <HAL_GetTick>
 8002522:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fa56 	bl	80009d8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d902      	bls.n	800253e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	f000 bc42 	b.w	8002dc2 <HAL_RCC_OscConfig+0x100e>
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	fa93 f2a3 	rbit	r2, r3
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025aa:	4b69      	ldr	r3, [pc, #420]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80025ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025b6:	2102      	movs	r1, #2
 80025b8:	6019      	str	r1, [r3, #0]
 80025ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fa93 f1a3 	rbit	r1, r3
 80025c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025d0:	6019      	str	r1, [r3, #0]
  return result;
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d197      	bne.n	8002528 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 819e 	beq.w	800294a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002614:	4b4e      	ldr	r3, [pc, #312]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002620:	4b4b      	ldr	r3, [pc, #300]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a4a      	ldr	r2, [pc, #296]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262a:	61d3      	str	r3, [r2, #28]
 800262c:	4b48      	ldr	r3, [pc, #288]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002638:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002642:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002646:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x9a4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11a      	bne.n	8002690 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <HAL_RCC_OscConfig+0x9a4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a3e      	ldr	r2, [pc, #248]	@ (8002758 <HAL_RCC_OscConfig+0x9a4>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7fe f9b7 	bl	80009d8 <HAL_GetTick>
 800266a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	e009      	b.n	8002684 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe f9b2 	bl	80009d8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	@ 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e39e      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b34      	ldr	r3, [pc, #208]	@ (8002758 <HAL_RCC_OscConfig+0x9a4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x8fa>
 80026a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	e035      	b.n	800271a <HAL_RCC_OscConfig+0x966>
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x924>
 80026be:	4b24      	ldr	r3, [pc, #144]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a23      	ldr	r2, [pc, #140]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6213      	str	r3, [r2, #32]
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a20      	ldr	r2, [pc, #128]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	e020      	b.n	800271a <HAL_RCC_OscConfig+0x966>
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x94e>
 80026e8:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x966>
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a0f      	ldr	r2, [pc, #60]	@ (8002750 <HAL_RCC_OscConfig+0x99c>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8087 	beq.w	800283a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe f954 	bl	80009d8 <HAL_GetTick>
 8002730:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	e012      	b.n	800275c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe f94f 	bl	80009d8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d908      	bls.n	800275c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e339      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	10908120 	.word	0x10908120
 8002758:	40007000 	.word	0x40007000
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002764:	2202      	movs	r2, #2
 8002766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027a2:	601a      	str	r2, [r3, #0]
  return result;
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_RCC_OscConfig+0xa10>
 80027be:	4b98      	ldr	r3, [pc, #608]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0xa38>
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027cc:	2202      	movs	r2, #2
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80027f4:	2102      	movs	r1, #2
 80027f6:	6011      	str	r1, [r2, #0]
 80027f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	fa92 f1a2 	rbit	r1, r2
 8002806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800280a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800280e:	6011      	str	r1, [r2, #0]
  return result;
 8002810:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002814:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f002 021f 	and.w	r2, r2, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	f43f af7f 	beq.w	8002736 <HAL_RCC_OscConfig+0x982>
 8002838:	e07d      	b.n	8002936 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe f8cd 	bl	80009d8 <HAL_GetTick>
 800283e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fe f8c8 	bl	80009d8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e2b2      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
 800285c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002860:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002864:	2202      	movs	r2, #2
 8002866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fa93 f2a3 	rbit	r2, r3
 8002876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002888:	2202      	movs	r2, #2
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0xb10>
 80028be:	4b58      	ldr	r3, [pc, #352]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	e013      	b.n	80028ec <HAL_RCC_OscConfig+0xb38>
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028f0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80028f4:	2102      	movs	r1, #2
 80028f6:	6011      	str	r1, [r2, #0]
 80028f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028fc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	fa92 f1a2 	rbit	r1, r2
 8002906:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800290a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800290e:	6011      	str	r1, [r2, #0]
  return result;
 8002910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002914:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d186      	bne.n	8002844 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002936:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800293a:	2b01      	cmp	r3, #1
 800293c:	d105      	bne.n	800294a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4b38      	ldr	r3, [pc, #224]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	4a37      	ldr	r2, [pc, #220]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002948:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8232 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295c:	4b30      	ldr	r3, [pc, #192]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	f000 8201 	beq.w	8002d6c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800296a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b02      	cmp	r3, #2
 8002978:	f040 8157 	bne.w	8002c2a <HAL_RCC_OscConfig+0xe76>
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002984:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029a0:	601a      	str	r2, [r3, #0]
  return result;
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe f809 	bl	80009d8 <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ca:	e009      	b.n	80029e0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe f804 	bl	80009d8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e1f0      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
 80029e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a04:	601a      	str	r2, [r3, #0]
  return result;
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a18:	d804      	bhi.n	8002a24 <HAL_RCC_OscConfig+0xc70>
 8002a1a:	4b01      	ldr	r3, [pc, #4]	@ (8002a20 <HAL_RCC_OscConfig+0xc6c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e029      	b.n	8002a74 <HAL_RCC_OscConfig+0xcc0>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	fa93 f2a3 	rbit	r2, r3
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	fa93 f2a3 	rbit	r2, r3
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	4bc3      	ldr	r3, [pc, #780]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a78:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a86:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	fa92 f1a2 	rbit	r1, r2
 8002a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002a98:	6011      	str	r1, [r2, #0]
  return result;
 8002a9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a9e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d185      	bne.n	80029cc <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4baf      	ldr	r3, [pc, #700]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	49a7      	ldr	r1, [pc, #668]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b0c:	601a      	str	r2, [r3, #0]
  return result;
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b22:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fd ff53 	bl	80009d8 <HAL_GetTick>
 8002b32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b36:	e009      	b.n	8002b4c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fd ff4e 	bl	80009d8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e13a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8002b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b50:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fa93 f2a3 	rbit	r2, r3
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b70:	601a      	str	r2, [r3, #0]
  return result;
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002b7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b84:	d802      	bhi.n	8002b8c <HAL_RCC_OscConfig+0xdd8>
 8002b86:	4b7e      	ldr	r3, [pc, #504]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	e027      	b.n	8002bdc <HAL_RCC_OscConfig+0xe28>
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002b94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002bba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	4b69      	ldr	r3, [pc, #420]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002be0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002be4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002be8:	6011      	str	r1, [r2, #0]
 8002bea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	fa92 f1a2 	rbit	r1, r2
 8002bf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bfc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c00:	6011      	str	r1, [r2, #0]
  return result;
 8002c02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c06:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	fab2 f282 	clz	r2, r2
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f042 0220 	orr.w	r2, r2, #32
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	f002 021f 	and.w	r2, r2, #31
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d087      	beq.n	8002b38 <HAL_RCC_OscConfig+0xd84>
 8002c28:	e0ca      	b.n	8002dc0 <HAL_RCC_OscConfig+0x100c>
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c4e:	601a      	str	r2, [r3, #0]
  return result;
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002c58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fd feb2 	bl	80009d8 <HAL_GetTick>
 8002c74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c78:	e009      	b.n	8002c8e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fd fead 	bl	80009d8 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e099      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002c96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cb2:	601a      	str	r2, [r3, #0]
  return result;
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002cbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc6:	d802      	bhi.n	8002cce <HAL_RCC_OscConfig+0xf1a>
 8002cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e027      	b.n	8002d1e <HAL_RCC_OscConfig+0xf6a>
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002cd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	fa93 f2a3 	rbit	r2, r3
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d06:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_RCC_OscConfig+0xfcc>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d22:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d26:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d2a:	6011      	str	r1, [r2, #0]
 8002d2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d30:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	fa92 f1a2 	rbit	r1, r2
 8002d3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d3e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d42:	6011      	str	r1, [r2, #0]
  return result;
 8002d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d48:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	fab2 f282 	clz	r2, r2
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	f042 0220 	orr.w	r2, r2, #32
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f002 021f 	and.w	r2, r2, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f202 	lsl.w	r2, r1, r2
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d187      	bne.n	8002c7a <HAL_RCC_OscConfig+0xec6>
 8002d6a:	e029      	b.n	8002dc0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d103      	bne.n	8002d84 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e020      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
 8002d80:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d84:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_OscConfig+0x1018>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d8c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002d90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002da4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002da8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b09e      	sub	sp, #120	@ 0x78
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e154      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b89      	ldr	r3, [pc, #548]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d910      	bls.n	8002e18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b86      	ldr	r3, [pc, #536]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0207 	bic.w	r2, r3, #7
 8002dfe:	4984      	ldr	r1, [pc, #528]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e06:	4b82      	ldr	r3, [pc, #520]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e13c      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b7b      	ldr	r3, [pc, #492]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4978      	ldr	r1, [pc, #480]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80cd 	beq.w	8002fde <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d137      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xec>
 8002e4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e50:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e64:	d802      	bhi.n	8002e6c <HAL_RCC_ClockConfig+0x9c>
 8002e66:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e00f      	b.n	8002e8c <HAL_RCC_ClockConfig+0xbc>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e88:	4b62      	ldr	r3, [pc, #392]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e94:	fa92 f2a2 	rbit	r2, r2
 8002e98:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002e9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e9c:	fab2 f282 	clz	r2, r2
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f002 021f 	and.w	r2, r2, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d171      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0ea      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d137      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x164>
 8002ec4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b3f      	cmp	r3, #63	@ 0x3f
 8002edc:	d802      	bhi.n	8002ee4 <HAL_RCC_ClockConfig+0x114>
 8002ede:	4b4d      	ldr	r3, [pc, #308]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCC_ClockConfig+0x134>
 8002ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ef2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f00:	4b44      	ldr	r3, [pc, #272]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f08:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f0c:	fa92 f2a2 	rbit	r2, r2
 8002f10:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f042 0220 	orr.w	r2, r2, #32
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f002 021f 	and.w	r2, r2, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d135      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0ae      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
 8002f34:	2302      	movs	r3, #2
 8002f36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f4a:	d802      	bhi.n	8002f52 <HAL_RCC_ClockConfig+0x182>
 8002f4c:	4b31      	ldr	r3, [pc, #196]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e00d      	b.n	8002f6e <HAL_RCC_ClockConfig+0x19e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5e:	2302      	movs	r3, #2
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	2202      	movs	r2, #2
 8002f70:	61ba      	str	r2, [r7, #24]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	fa92 f2a2 	rbit	r2, r2
 8002f78:	617a      	str	r2, [r7, #20]
  return result;
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e07a      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 0203 	bic.w	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	491a      	ldr	r1, [pc, #104]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fae:	f7fd fd13 	bl	80009d8 <HAL_GetTick>
 8002fb2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb6:	f7fd fd0f 	bl	80009d8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e062      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 020c 	and.w	r2, r3, #12
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d1eb      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fde:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d215      	bcs.n	8003018 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 0207 	bic.w	r2, r3, #7
 8002ff4:	4906      	ldr	r1, [pc, #24]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffc:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <HAL_RCC_ClockConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d006      	beq.n	8003018 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e041      	b.n	8003092 <HAL_RCC_ClockConfig+0x2c2>
 800300e:	bf00      	nop
 8003010:	40022000 	.word	0x40022000
 8003014:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003024:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <HAL_RCC_ClockConfig+0x2cc>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	491a      	ldr	r1, [pc, #104]	@ (800309c <HAL_RCC_ClockConfig+0x2cc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003042:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_RCC_ClockConfig+0x2cc>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4912      	ldr	r1, [pc, #72]	@ (800309c <HAL_RCC_ClockConfig+0x2cc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003056:	f000 f829 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800305a:	4601      	mov	r1, r0
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <HAL_RCC_ClockConfig+0x2cc>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003064:	22f0      	movs	r2, #240	@ 0xf0
 8003066:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	fa92 f2a2 	rbit	r2, r2
 800306e:	60fa      	str	r2, [r7, #12]
  return result;
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	fab2 f282 	clz	r2, r2
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	40d3      	lsrs	r3, r2
 800307a:	4a09      	ldr	r2, [pc, #36]	@ (80030a0 <HAL_RCC_ClockConfig+0x2d0>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	fa21 f303 	lsr.w	r3, r1, r3
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <HAL_RCC_ClockConfig+0x2d4>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_RCC_ClockConfig+0x2d8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fc60 	bl	8000950 <HAL_InitTick>
  
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3778      	adds	r7, #120	@ 0x78
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	08004614 	.word	0x08004614
 80030a4:	20000000 	.word	0x20000000
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x30>
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d003      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x36>
 80030da:	e026      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x98>)
 80030de:	613b      	str	r3, [r7, #16]
      break;
 80030e0:	e026      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0c9b      	lsrs	r3, r3, #18
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	4a17      	ldr	r2, [pc, #92]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
 80030ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80030f0:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x94>)
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	4a14      	ldr	r2, [pc, #80]	@ (800314c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003108:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x98>)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e004      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a0c      	ldr	r2, [pc, #48]	@ (8003150 <HAL_RCC_GetSysClockFreq+0xa4>)
 800311e:	fb02 f303 	mul.w	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
      break;
 8003128:	e002      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800312a:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x98>)
 800312c:	613b      	str	r3, [r7, #16]
      break;
 800312e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003130:	693b      	ldr	r3, [r7, #16]
}
 8003132:	4618      	mov	r0, r3
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	007a1200 	.word	0x007a1200
 8003148:	0800462c 	.word	0x0800462c
 800314c:	0800463c 	.word	0x0800463c
 8003150:	003d0900 	.word	0x003d0900

08003154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <HAL_RCC_GetHCLKFreq+0x14>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003172:	f7ff ffef 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8003176:	4601      	mov	r1, r0
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003180:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	fa92 f2a2 	rbit	r2, r2
 800318c:	603a      	str	r2, [r7, #0]
  return result;
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	fab2 f282 	clz	r2, r2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	40d3      	lsrs	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800319a:	5cd3      	ldrb	r3, [r2, r3]
 800319c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	08004624 	.word	0x08004624

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031b6:	f7ff ffcd 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 80031ba:	4601      	mov	r1, r0
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80031c4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80031c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	603a      	str	r2, [r7, #0]
  return result;
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	40d3      	lsrs	r3, r2
 80031dc:	4a04      	ldr	r2, [pc, #16]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08004624 	.word	0x08004624

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b092      	sub	sp, #72	@ 0x48
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80cb 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003218:	4b8d      	ldr	r3, [pc, #564]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10e      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b8a      	ldr	r3, [pc, #552]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4a89      	ldr	r2, [pc, #548]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322e:	61d3      	str	r3, [r2, #28]
 8003230:	4b87      	ldr	r3, [pc, #540]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b84      	ldr	r3, [pc, #528]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b81      	ldr	r3, [pc, #516]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a80      	ldr	r2, [pc, #512]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003258:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7fd fbbd 	bl	80009d8 <HAL_GetTick>
 800325e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7fd fbb9 	bl	80009d8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b64      	cmp	r3, #100	@ 0x64
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0e8      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x252>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b77      	ldr	r3, [pc, #476]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003280:	4b73      	ldr	r3, [pc, #460]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003288:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800328a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d07b      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800329a:	429a      	cmp	r2, r3
 800329c:	d074      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329e:	4b6c      	ldr	r3, [pc, #432]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032ac:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	4b65      	ldr	r3, [pc, #404]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	461a      	mov	r2, r3
 80032c8:	2301      	movs	r3, #1
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032f0:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80032f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d043      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fd fb6a 	bl	80009d8 <HAL_GetTick>
 8003304:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fd fb66 	bl	80009d8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e093      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x252>
 800331e:	2302      	movs	r3, #2
 8003320:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	61fb      	str	r3, [r7, #28]
  return result;
 8003336:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003348:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	e007      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800334e:	2302      	movs	r3, #2
 8003350:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	4b3d      	ldr	r3, [pc, #244]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2202      	movs	r2, #2
 8003360:	613a      	str	r2, [r7, #16]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	fa92 f2a2 	rbit	r2, r2
 8003368:	60fa      	str	r2, [r7, #12]
  return result;
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	fab2 f282 	clz	r2, r2
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f002 021f 	and.w	r2, r2, #31
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0bf      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	492e      	ldr	r1, [pc, #184]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800339a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ba:	4b25      	ldr	r3, [pc, #148]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4922      	ldr	r1, [pc, #136]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	f023 0210 	bic.w	r2, r3, #16
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	491a      	ldr	r1, [pc, #104]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033f6:	4b16      	ldr	r3, [pc, #88]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	4913      	ldr	r1, [pc, #76]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	490b      	ldr	r1, [pc, #44]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	4904      	ldr	r1, [pc, #16]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3748      	adds	r7, #72	@ 0x48
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
 8003458:	10908100 	.word	0x10908100

0800345c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e040      	b.n	80034f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd f93a 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	@ 0x24
 8003488:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f9e8 	bl	8003878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8af 	bl	800360c <UART_SetConfig>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e01b      	b.n	80034f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fa67 	bl	80039bc <UART_CheckIdleState>
 80034ee:	4603      	mov	r3, r0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	@ 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800350c:	2b20      	cmp	r3, #32
 800350e:	d177      	bne.n	8003600 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <HAL_UART_Transmit+0x24>
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e070      	b.n	8003602 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2221      	movs	r2, #33	@ 0x21
 800352c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352e:	f7fd fa53 	bl	80009d8 <HAL_GetTick>
 8003532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	88fa      	ldrh	r2, [r7, #6]
 8003540:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354c:	d108      	bne.n	8003560 <HAL_UART_Transmit+0x68>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e003      	b.n	8003568 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003564:	2300      	movs	r3, #0
 8003566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003568:	e02f      	b.n	80035ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	@ 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fac9 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e03b      	b.n	8003602 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359c:	b292      	uxth	r2, r2
 800359e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	3302      	adds	r3, #2
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e007      	b.n	80035b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1c9      	bne.n	800356a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	2140      	movs	r1, #64	@ 0x40
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fa93 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d004      	beq.n	80035f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e005      	b.n	8003602 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b8a      	ldr	r3, [pc, #552]	@ (8003860 <UART_SetConfig+0x254>)
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	6979      	ldr	r1, [r7, #20]
 8003640:	430b      	orrs	r3, r1
 8003642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a78      	ldr	r2, [pc, #480]	@ (8003864 <UART_SetConfig+0x258>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d120      	bne.n	80036ca <UART_SetConfig+0xbe>
 8003688:	4b77      	ldr	r3, [pc, #476]	@ (8003868 <UART_SetConfig+0x25c>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d817      	bhi.n	80036c4 <UART_SetConfig+0xb8>
 8003694:	a201      	add	r2, pc, #4	@ (adr r2, 800369c <UART_SetConfig+0x90>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036b9 	.word	0x080036b9
 80036a4:	080036bf 	.word	0x080036bf
 80036a8:	080036b3 	.word	0x080036b3
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e01d      	b.n	80036ee <UART_SetConfig+0xe2>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e01a      	b.n	80036ee <UART_SetConfig+0xe2>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e017      	b.n	80036ee <UART_SetConfig+0xe2>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e014      	b.n	80036ee <UART_SetConfig+0xe2>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e011      	b.n	80036ee <UART_SetConfig+0xe2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a67      	ldr	r2, [pc, #412]	@ (800386c <UART_SetConfig+0x260>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d102      	bne.n	80036da <UART_SetConfig+0xce>
 80036d4:	2300      	movs	r3, #0
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e009      	b.n	80036ee <UART_SetConfig+0xe2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a64      	ldr	r2, [pc, #400]	@ (8003870 <UART_SetConfig+0x264>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d102      	bne.n	80036ea <UART_SetConfig+0xde>
 80036e4:	2300      	movs	r3, #0
 80036e6:	77fb      	strb	r3, [r7, #31]
 80036e8:	e001      	b.n	80036ee <UART_SetConfig+0xe2>
 80036ea:	2310      	movs	r3, #16
 80036ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f6:	d15a      	bne.n	80037ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80036f8:	7ffb      	ldrb	r3, [r7, #31]
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d827      	bhi.n	800374e <UART_SetConfig+0x142>
 80036fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <UART_SetConfig+0xf8>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003729 	.word	0x08003729
 8003708:	08003731 	.word	0x08003731
 800370c:	08003739 	.word	0x08003739
 8003710:	0800374f 	.word	0x0800374f
 8003714:	0800373f 	.word	0x0800373f
 8003718:	0800374f 	.word	0x0800374f
 800371c:	0800374f 	.word	0x0800374f
 8003720:	0800374f 	.word	0x0800374f
 8003724:	08003747 	.word	0x08003747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003728:	f7ff fd20 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 800372c:	61b8      	str	r0, [r7, #24]
        break;
 800372e:	e013      	b.n	8003758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003730:	f7ff fd3e 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8003734:	61b8      	str	r0, [r7, #24]
        break;
 8003736:	e00f      	b.n	8003758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003738:	4b4e      	ldr	r3, [pc, #312]	@ (8003874 <UART_SetConfig+0x268>)
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e00c      	b.n	8003758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7ff fcb5 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8003742:	61b8      	str	r0, [r7, #24]
        break;
 8003744:	e008      	b.n	8003758 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374a:	61bb      	str	r3, [r7, #24]
        break;
 800374c:	e004      	b.n	8003758 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	77bb      	strb	r3, [r7, #30]
        break;
 8003756:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d074      	beq.n	8003848 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	005a      	lsls	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b0f      	cmp	r3, #15
 8003778:	d916      	bls.n	80037a8 <UART_SetConfig+0x19c>
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003780:	d212      	bcs.n	80037a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f023 030f 	bic.w	r3, r3, #15
 800378a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	b29a      	uxth	r2, r3
 8003798:	89fb      	ldrh	r3, [r7, #14]
 800379a:	4313      	orrs	r3, r2
 800379c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	89fa      	ldrh	r2, [r7, #14]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	e04f      	b.n	8003848 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77bb      	strb	r3, [r7, #30]
 80037ac:	e04c      	b.n	8003848 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ae:	7ffb      	ldrb	r3, [r7, #31]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d828      	bhi.n	8003806 <UART_SetConfig+0x1fa>
 80037b4:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <UART_SetConfig+0x1b0>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e9 	.word	0x080037e9
 80037c4:	080037f1 	.word	0x080037f1
 80037c8:	08003807 	.word	0x08003807
 80037cc:	080037f7 	.word	0x080037f7
 80037d0:	08003807 	.word	0x08003807
 80037d4:	08003807 	.word	0x08003807
 80037d8:	08003807 	.word	0x08003807
 80037dc:	080037ff 	.word	0x080037ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e0:	f7ff fcc4 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 80037e4:	61b8      	str	r0, [r7, #24]
        break;
 80037e6:	e013      	b.n	8003810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7ff fce2 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 80037ec:	61b8      	str	r0, [r7, #24]
        break;
 80037ee:	e00f      	b.n	8003810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f0:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <UART_SetConfig+0x268>)
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e00c      	b.n	8003810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f6:	f7ff fc59 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 80037fa:	61b8      	str	r0, [r7, #24]
        break;
 80037fc:	e008      	b.n	8003810 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003802:	61bb      	str	r3, [r7, #24]
        break;
 8003804:	e004      	b.n	8003810 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	77bb      	strb	r3, [r7, #30]
        break;
 800380e:	bf00      	nop
    }

    if (pclk != 0U)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	085a      	lsrs	r2, r3, #1
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	441a      	add	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b0f      	cmp	r3, #15
 800382e:	d909      	bls.n	8003844 <UART_SetConfig+0x238>
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003836:	d205      	bcs.n	8003844 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	e001      	b.n	8003848 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003854:	7fbb      	ldrb	r3, [r7, #30]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	efff69f3 	.word	0xefff69f3
 8003864:	40013800 	.word	0x40013800
 8003868:	40021000 	.word	0x40021000
 800386c:	40004400 	.word	0x40004400
 8003870:	40004800 	.word	0x40004800
 8003874:	007a1200 	.word	0x007a1200

08003878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003976:	d10a      	bne.n	800398e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b098      	sub	sp, #96	@ 0x60
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039cc:	f7fd f804 	bl	80009d8 <HAL_GetTick>
 80039d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d12e      	bne.n	8003a3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f88c 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d021      	beq.n	8003a3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e062      	b.n	8003b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d149      	bne.n	8003ae0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f856 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03c      	beq.n	8003ae0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	623b      	str	r3, [r7, #32]
   return(result);
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e6      	bne.n	8003a66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab8:	61fa      	str	r2, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e011      	b.n	8003b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3758      	adds	r7, #88	@ 0x58
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e04f      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d04b      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fc ff57 	bl	80009d8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e04e      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d037      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b80      	cmp	r3, #128	@ 0x80
 8003b52:	d034      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d031      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d110      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f838 	bl	8003be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e029      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b98:	d111      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f81e 	bl	8003be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d0a0      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b095      	sub	sp, #84	@ 0x54
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d118      	bne.n	8003c8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
 8003c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	613b      	str	r3, [r7, #16]
   return(result);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ca2:	bf00      	nop
 8003ca4:	3754      	adds	r7, #84	@ 0x54
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <siprintf>:
 8003cb0:	b40e      	push	{r1, r2, r3}
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	b09d      	sub	sp, #116	@ 0x74
 8003cb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003cb8:	9002      	str	r0, [sp, #8]
 8003cba:	9006      	str	r0, [sp, #24]
 8003cbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003cc0:	480a      	ldr	r0, [pc, #40]	@ (8003cec <siprintf+0x3c>)
 8003cc2:	9107      	str	r1, [sp, #28]
 8003cc4:	9104      	str	r1, [sp, #16]
 8003cc6:	490a      	ldr	r1, [pc, #40]	@ (8003cf0 <siprintf+0x40>)
 8003cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ccc:	9105      	str	r1, [sp, #20]
 8003cce:	2400      	movs	r4, #0
 8003cd0:	a902      	add	r1, sp, #8
 8003cd2:	6800      	ldr	r0, [r0, #0]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003cd8:	f000 f994 	bl	8004004 <_svfiprintf_r>
 8003cdc:	9b02      	ldr	r3, [sp, #8]
 8003cde:	701c      	strb	r4, [r3, #0]
 8003ce0:	b01d      	add	sp, #116	@ 0x74
 8003ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce6:	b003      	add	sp, #12
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	ffff0208 	.word	0xffff0208

08003cf4 <memset>:
 8003cf4:	4402      	add	r2, r0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <memset+0xa>
 8003cfc:	4770      	bx	lr
 8003cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003d02:	e7f9      	b.n	8003cf8 <memset+0x4>

08003d04 <__errno>:
 8003d04:	4b01      	ldr	r3, [pc, #4]	@ (8003d0c <__errno+0x8>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	@ (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	@ (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	@ (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	@ (8003d54 <__libc_init_array+0x44>)
 8003d24:	f000 fc64 	bl	80045f0 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08004688 	.word	0x08004688
 8003d4c:	08004688 	.word	0x08004688
 8003d50:	08004688 	.word	0x08004688
 8003d54:	0800468c 	.word	0x0800468c

08003d58 <__retarget_lock_acquire_recursive>:
 8003d58:	4770      	bx	lr

08003d5a <__retarget_lock_release_recursive>:
 8003d5a:	4770      	bx	lr

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d041      	beq.n	8003de8 <_free_r+0x8c>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f000 f8e0 	bl	8003f34 <__malloc_lock>
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <_free_r+0x90>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	b933      	cbnz	r3, 8003d88 <_free_r+0x2c>
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6014      	str	r4, [r2, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d84:	f000 b8dc 	b.w	8003f40 <__malloc_unlock>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d908      	bls.n	8003d9e <_free_r+0x42>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	1821      	adds	r1, r4, r0
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	e7ed      	b.n	8003d7a <_free_r+0x1e>
 8003d9e:	461a      	mov	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b10b      	cbz	r3, 8003da8 <_free_r+0x4c>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d9fa      	bls.n	8003d9e <_free_r+0x42>
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	1850      	adds	r0, r2, r1
 8003dac:	42a0      	cmp	r0, r4
 8003dae:	d10b      	bne.n	8003dc8 <_free_r+0x6c>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4401      	add	r1, r0
 8003db4:	1850      	adds	r0, r2, r1
 8003db6:	4283      	cmp	r3, r0
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	d1e0      	bne.n	8003d7e <_free_r+0x22>
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	4408      	add	r0, r1
 8003dc4:	6010      	str	r0, [r2, #0]
 8003dc6:	e7da      	b.n	8003d7e <_free_r+0x22>
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x74>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e7d6      	b.n	8003d7e <_free_r+0x22>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	1821      	adds	r1, r4, r0
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf04      	itt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	bf04      	itt	eq
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	6054      	str	r4, [r2, #4]
 8003de6:	e7ca      	b.n	8003d7e <_free_r+0x22>
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	bf00      	nop
 8003dec:	20000368 	.word	0x20000368

08003df0 <sbrk_aligned>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e30 <sbrk_aligned+0x40>)
 8003df4:	460c      	mov	r4, r1
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b911      	cbnz	r1, 8003e02 <sbrk_aligned+0x12>
 8003dfc:	f000 fba4 	bl	8004548 <_sbrk_r>
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 fb9f 	bl	8004548 <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d103      	bne.n	8003e16 <sbrk_aligned+0x26>
 8003e0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e12:	4620      	mov	r0, r4
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d0f8      	beq.n	8003e12 <sbrk_aligned+0x22>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 fb90 	bl	8004548 <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1f2      	bne.n	8003e12 <sbrk_aligned+0x22>
 8003e2c:	e7ef      	b.n	8003e0e <sbrk_aligned+0x1e>
 8003e2e:	bf00      	nop
 8003e30:	20000364 	.word	0x20000364

08003e34 <_malloc_r>:
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e38:	1ccd      	adds	r5, r1, #3
 8003e3a:	f025 0503 	bic.w	r5, r5, #3
 8003e3e:	3508      	adds	r5, #8
 8003e40:	2d0c      	cmp	r5, #12
 8003e42:	bf38      	it	cc
 8003e44:	250c      	movcc	r5, #12
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	4606      	mov	r6, r0
 8003e4a:	db01      	blt.n	8003e50 <_malloc_r+0x1c>
 8003e4c:	42a9      	cmp	r1, r5
 8003e4e:	d904      	bls.n	8003e5a <_malloc_r+0x26>
 8003e50:	230c      	movs	r3, #12
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	2000      	movs	r0, #0
 8003e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f30 <_malloc_r+0xfc>
 8003e5e:	f000 f869 	bl	8003f34 <__malloc_lock>
 8003e62:	f8d8 3000 	ldr.w	r3, [r8]
 8003e66:	461c      	mov	r4, r3
 8003e68:	bb44      	cbnz	r4, 8003ebc <_malloc_r+0x88>
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff ffbf 	bl	8003df0 <sbrk_aligned>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	4604      	mov	r4, r0
 8003e76:	d158      	bne.n	8003f2a <_malloc_r+0xf6>
 8003e78:	f8d8 4000 	ldr.w	r4, [r8]
 8003e7c:	4627      	mov	r7, r4
 8003e7e:	2f00      	cmp	r7, #0
 8003e80:	d143      	bne.n	8003f0a <_malloc_r+0xd6>
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	d04b      	beq.n	8003f1e <_malloc_r+0xea>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	eb04 0903 	add.w	r9, r4, r3
 8003e90:	f000 fb5a 	bl	8004548 <_sbrk_r>
 8003e94:	4581      	cmp	r9, r0
 8003e96:	d142      	bne.n	8003f1e <_malloc_r+0xea>
 8003e98:	6821      	ldr	r1, [r4, #0]
 8003e9a:	1a6d      	subs	r5, r5, r1
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff ffa6 	bl	8003df0 <sbrk_aligned>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d03a      	beq.n	8003f1e <_malloc_r+0xea>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	442b      	add	r3, r5
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	bb62      	cbnz	r2, 8003f10 <_malloc_r+0xdc>
 8003eb6:	f8c8 7000 	str.w	r7, [r8]
 8003eba:	e00f      	b.n	8003edc <_malloc_r+0xa8>
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	1b52      	subs	r2, r2, r5
 8003ec0:	d420      	bmi.n	8003f04 <_malloc_r+0xd0>
 8003ec2:	2a0b      	cmp	r2, #11
 8003ec4:	d917      	bls.n	8003ef6 <_malloc_r+0xc2>
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	6025      	str	r5, [r4, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	6059      	strne	r1, [r3, #4]
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	bf08      	it	eq
 8003ed4:	f8c8 1000 	streq.w	r1, [r8]
 8003ed8:	5162      	str	r2, [r4, r5]
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f82f 	bl	8003f40 <__malloc_unlock>
 8003ee2:	f104 000b 	add.w	r0, r4, #11
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	f020 0007 	bic.w	r0, r0, #7
 8003eec:	1ac2      	subs	r2, r0, r3
 8003eee:	bf1c      	itt	ne
 8003ef0:	1a1b      	subne	r3, r3, r0
 8003ef2:	50a3      	strne	r3, [r4, r2]
 8003ef4:	e7af      	b.n	8003e56 <_malloc_r+0x22>
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	bf0c      	ite	eq
 8003efc:	f8c8 2000 	streq.w	r2, [r8]
 8003f00:	605a      	strne	r2, [r3, #4]
 8003f02:	e7eb      	b.n	8003edc <_malloc_r+0xa8>
 8003f04:	4623      	mov	r3, r4
 8003f06:	6864      	ldr	r4, [r4, #4]
 8003f08:	e7ae      	b.n	8003e68 <_malloc_r+0x34>
 8003f0a:	463c      	mov	r4, r7
 8003f0c:	687f      	ldr	r7, [r7, #4]
 8003f0e:	e7b6      	b.n	8003e7e <_malloc_r+0x4a>
 8003f10:	461a      	mov	r2, r3
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d1fb      	bne.n	8003f10 <_malloc_r+0xdc>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6053      	str	r3, [r2, #4]
 8003f1c:	e7de      	b.n	8003edc <_malloc_r+0xa8>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f80c 	bl	8003f40 <__malloc_unlock>
 8003f28:	e794      	b.n	8003e54 <_malloc_r+0x20>
 8003f2a:	6005      	str	r5, [r0, #0]
 8003f2c:	e7d6      	b.n	8003edc <_malloc_r+0xa8>
 8003f2e:	bf00      	nop
 8003f30:	20000368 	.word	0x20000368

08003f34 <__malloc_lock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__malloc_lock+0x8>)
 8003f36:	f7ff bf0f 	b.w	8003d58 <__retarget_lock_acquire_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	20000360 	.word	0x20000360

08003f40 <__malloc_unlock>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__malloc_unlock+0x8>)
 8003f42:	f7ff bf0a 	b.w	8003d5a <__retarget_lock_release_recursive>
 8003f46:	bf00      	nop
 8003f48:	20000360 	.word	0x20000360

08003f4c <__ssputs_r>:
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	688e      	ldr	r6, [r1, #8]
 8003f52:	461f      	mov	r7, r3
 8003f54:	42be      	cmp	r6, r7
 8003f56:	680b      	ldr	r3, [r1, #0]
 8003f58:	4682      	mov	sl, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4690      	mov	r8, r2
 8003f5e:	d82d      	bhi.n	8003fbc <__ssputs_r+0x70>
 8003f60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f68:	d026      	beq.n	8003fb8 <__ssputs_r+0x6c>
 8003f6a:	6965      	ldr	r5, [r4, #20]
 8003f6c:	6909      	ldr	r1, [r1, #16]
 8003f6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f72:	eba3 0901 	sub.w	r9, r3, r1
 8003f76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f7a:	1c7b      	adds	r3, r7, #1
 8003f7c:	444b      	add	r3, r9
 8003f7e:	106d      	asrs	r5, r5, #1
 8003f80:	429d      	cmp	r5, r3
 8003f82:	bf38      	it	cc
 8003f84:	461d      	movcc	r5, r3
 8003f86:	0553      	lsls	r3, r2, #21
 8003f88:	d527      	bpl.n	8003fda <__ssputs_r+0x8e>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7ff ff52 	bl	8003e34 <_malloc_r>
 8003f90:	4606      	mov	r6, r0
 8003f92:	b360      	cbz	r0, 8003fee <__ssputs_r+0xa2>
 8003f94:	6921      	ldr	r1, [r4, #16]
 8003f96:	464a      	mov	r2, r9
 8003f98:	f000 fae6 	bl	8004568 <memcpy>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	6126      	str	r6, [r4, #16]
 8003faa:	6165      	str	r5, [r4, #20]
 8003fac:	444e      	add	r6, r9
 8003fae:	eba5 0509 	sub.w	r5, r5, r9
 8003fb2:	6026      	str	r6, [r4, #0]
 8003fb4:	60a5      	str	r5, [r4, #8]
 8003fb6:	463e      	mov	r6, r7
 8003fb8:	42be      	cmp	r6, r7
 8003fba:	d900      	bls.n	8003fbe <__ssputs_r+0x72>
 8003fbc:	463e      	mov	r6, r7
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	f000 faa6 	bl	8004514 <memmove>
 8003fc8:	68a3      	ldr	r3, [r4, #8]
 8003fca:	1b9b      	subs	r3, r3, r6
 8003fcc:	60a3      	str	r3, [r4, #8]
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4433      	add	r3, r6
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fda:	462a      	mov	r2, r5
 8003fdc:	f000 fad2 	bl	8004584 <_realloc_r>
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d1e0      	bne.n	8003fa8 <__ssputs_r+0x5c>
 8003fe6:	6921      	ldr	r1, [r4, #16]
 8003fe8:	4650      	mov	r0, sl
 8003fea:	f7ff feb7 	bl	8003d5c <_free_r>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	f8ca 3000 	str.w	r3, [sl]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e7e9      	b.n	8003fd6 <__ssputs_r+0x8a>
	...

08004004 <_svfiprintf_r>:
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	4698      	mov	r8, r3
 800400a:	898b      	ldrh	r3, [r1, #12]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	b09d      	sub	sp, #116	@ 0x74
 8004010:	4607      	mov	r7, r0
 8004012:	460d      	mov	r5, r1
 8004014:	4614      	mov	r4, r2
 8004016:	d510      	bpl.n	800403a <_svfiprintf_r+0x36>
 8004018:	690b      	ldr	r3, [r1, #16]
 800401a:	b973      	cbnz	r3, 800403a <_svfiprintf_r+0x36>
 800401c:	2140      	movs	r1, #64	@ 0x40
 800401e:	f7ff ff09 	bl	8003e34 <_malloc_r>
 8004022:	6028      	str	r0, [r5, #0]
 8004024:	6128      	str	r0, [r5, #16]
 8004026:	b930      	cbnz	r0, 8004036 <_svfiprintf_r+0x32>
 8004028:	230c      	movs	r3, #12
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	b01d      	add	sp, #116	@ 0x74
 8004032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004036:	2340      	movs	r3, #64	@ 0x40
 8004038:	616b      	str	r3, [r5, #20]
 800403a:	2300      	movs	r3, #0
 800403c:	9309      	str	r3, [sp, #36]	@ 0x24
 800403e:	2320      	movs	r3, #32
 8004040:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004044:	f8cd 800c 	str.w	r8, [sp, #12]
 8004048:	2330      	movs	r3, #48	@ 0x30
 800404a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041e8 <_svfiprintf_r+0x1e4>
 800404e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004052:	f04f 0901 	mov.w	r9, #1
 8004056:	4623      	mov	r3, r4
 8004058:	469a      	mov	sl, r3
 800405a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800405e:	b10a      	cbz	r2, 8004064 <_svfiprintf_r+0x60>
 8004060:	2a25      	cmp	r2, #37	@ 0x25
 8004062:	d1f9      	bne.n	8004058 <_svfiprintf_r+0x54>
 8004064:	ebba 0b04 	subs.w	fp, sl, r4
 8004068:	d00b      	beq.n	8004082 <_svfiprintf_r+0x7e>
 800406a:	465b      	mov	r3, fp
 800406c:	4622      	mov	r2, r4
 800406e:	4629      	mov	r1, r5
 8004070:	4638      	mov	r0, r7
 8004072:	f7ff ff6b 	bl	8003f4c <__ssputs_r>
 8004076:	3001      	adds	r0, #1
 8004078:	f000 80a7 	beq.w	80041ca <_svfiprintf_r+0x1c6>
 800407c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800407e:	445a      	add	r2, fp
 8004080:	9209      	str	r2, [sp, #36]	@ 0x24
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 809f 	beq.w	80041ca <_svfiprintf_r+0x1c6>
 800408c:	2300      	movs	r3, #0
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004096:	f10a 0a01 	add.w	sl, sl, #1
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	9307      	str	r3, [sp, #28]
 800409e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040a4:	4654      	mov	r4, sl
 80040a6:	2205      	movs	r2, #5
 80040a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ac:	484e      	ldr	r0, [pc, #312]	@ (80041e8 <_svfiprintf_r+0x1e4>)
 80040ae:	f7fc f897 	bl	80001e0 <memchr>
 80040b2:	9a04      	ldr	r2, [sp, #16]
 80040b4:	b9d8      	cbnz	r0, 80040ee <_svfiprintf_r+0xea>
 80040b6:	06d0      	lsls	r0, r2, #27
 80040b8:	bf44      	itt	mi
 80040ba:	2320      	movmi	r3, #32
 80040bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c0:	0711      	lsls	r1, r2, #28
 80040c2:	bf44      	itt	mi
 80040c4:	232b      	movmi	r3, #43	@ 0x2b
 80040c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ca:	f89a 3000 	ldrb.w	r3, [sl]
 80040ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d0:	d015      	beq.n	80040fe <_svfiprintf_r+0xfa>
 80040d2:	9a07      	ldr	r2, [sp, #28]
 80040d4:	4654      	mov	r4, sl
 80040d6:	2000      	movs	r0, #0
 80040d8:	f04f 0c0a 	mov.w	ip, #10
 80040dc:	4621      	mov	r1, r4
 80040de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e2:	3b30      	subs	r3, #48	@ 0x30
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d94b      	bls.n	8004180 <_svfiprintf_r+0x17c>
 80040e8:	b1b0      	cbz	r0, 8004118 <_svfiprintf_r+0x114>
 80040ea:	9207      	str	r2, [sp, #28]
 80040ec:	e014      	b.n	8004118 <_svfiprintf_r+0x114>
 80040ee:	eba0 0308 	sub.w	r3, r0, r8
 80040f2:	fa09 f303 	lsl.w	r3, r9, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	9304      	str	r3, [sp, #16]
 80040fa:	46a2      	mov	sl, r4
 80040fc:	e7d2      	b.n	80040a4 <_svfiprintf_r+0xa0>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9103      	str	r1, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfbb      	ittet	lt
 800410a:	425b      	neglt	r3, r3
 800410c:	f042 0202 	orrlt.w	r2, r2, #2
 8004110:	9307      	strge	r3, [sp, #28]
 8004112:	9307      	strlt	r3, [sp, #28]
 8004114:	bfb8      	it	lt
 8004116:	9204      	strlt	r2, [sp, #16]
 8004118:	7823      	ldrb	r3, [r4, #0]
 800411a:	2b2e      	cmp	r3, #46	@ 0x2e
 800411c:	d10a      	bne.n	8004134 <_svfiprintf_r+0x130>
 800411e:	7863      	ldrb	r3, [r4, #1]
 8004120:	2b2a      	cmp	r3, #42	@ 0x2a
 8004122:	d132      	bne.n	800418a <_svfiprintf_r+0x186>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	9203      	str	r2, [sp, #12]
 800412c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004130:	3402      	adds	r4, #2
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041f8 <_svfiprintf_r+0x1f4>
 8004138:	7821      	ldrb	r1, [r4, #0]
 800413a:	2203      	movs	r2, #3
 800413c:	4650      	mov	r0, sl
 800413e:	f7fc f84f 	bl	80001e0 <memchr>
 8004142:	b138      	cbz	r0, 8004154 <_svfiprintf_r+0x150>
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	eba0 000a 	sub.w	r0, r0, sl
 800414a:	2240      	movs	r2, #64	@ 0x40
 800414c:	4082      	lsls	r2, r0
 800414e:	4313      	orrs	r3, r2
 8004150:	3401      	adds	r4, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	4824      	ldr	r0, [pc, #144]	@ (80041ec <_svfiprintf_r+0x1e8>)
 800415a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800415e:	2206      	movs	r2, #6
 8004160:	f7fc f83e 	bl	80001e0 <memchr>
 8004164:	2800      	cmp	r0, #0
 8004166:	d036      	beq.n	80041d6 <_svfiprintf_r+0x1d2>
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <_svfiprintf_r+0x1ec>)
 800416a:	bb1b      	cbnz	r3, 80041b4 <_svfiprintf_r+0x1b0>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	3307      	adds	r3, #7
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	3308      	adds	r3, #8
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800417a:	4433      	add	r3, r6
 800417c:	9309      	str	r3, [sp, #36]	@ 0x24
 800417e:	e76a      	b.n	8004056 <_svfiprintf_r+0x52>
 8004180:	fb0c 3202 	mla	r2, ip, r2, r3
 8004184:	460c      	mov	r4, r1
 8004186:	2001      	movs	r0, #1
 8004188:	e7a8      	b.n	80040dc <_svfiprintf_r+0xd8>
 800418a:	2300      	movs	r3, #0
 800418c:	3401      	adds	r4, #1
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0c0a 	mov.w	ip, #10
 8004196:	4620      	mov	r0, r4
 8004198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419c:	3a30      	subs	r2, #48	@ 0x30
 800419e:	2a09      	cmp	r2, #9
 80041a0:	d903      	bls.n	80041aa <_svfiprintf_r+0x1a6>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c6      	beq.n	8004134 <_svfiprintf_r+0x130>
 80041a6:	9105      	str	r1, [sp, #20]
 80041a8:	e7c4      	b.n	8004134 <_svfiprintf_r+0x130>
 80041aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ae:	4604      	mov	r4, r0
 80041b0:	2301      	movs	r3, #1
 80041b2:	e7f0      	b.n	8004196 <_svfiprintf_r+0x192>
 80041b4:	ab03      	add	r3, sp, #12
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <_svfiprintf_r+0x1f0>)
 80041bc:	a904      	add	r1, sp, #16
 80041be:	4638      	mov	r0, r7
 80041c0:	f3af 8000 	nop.w
 80041c4:	1c42      	adds	r2, r0, #1
 80041c6:	4606      	mov	r6, r0
 80041c8:	d1d6      	bne.n	8004178 <_svfiprintf_r+0x174>
 80041ca:	89ab      	ldrh	r3, [r5, #12]
 80041cc:	065b      	lsls	r3, r3, #25
 80041ce:	f53f af2d 	bmi.w	800402c <_svfiprintf_r+0x28>
 80041d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041d4:	e72c      	b.n	8004030 <_svfiprintf_r+0x2c>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <_svfiprintf_r+0x1f0>)
 80041de:	a904      	add	r1, sp, #16
 80041e0:	4638      	mov	r0, r7
 80041e2:	f000 f879 	bl	80042d8 <_printf_i>
 80041e6:	e7ed      	b.n	80041c4 <_svfiprintf_r+0x1c0>
 80041e8:	0800464c 	.word	0x0800464c
 80041ec:	08004656 	.word	0x08004656
 80041f0:	00000000 	.word	0x00000000
 80041f4:	08003f4d 	.word	0x08003f4d
 80041f8:	08004652 	.word	0x08004652

080041fc <_printf_common>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	4616      	mov	r6, r2
 8004202:	4698      	mov	r8, r3
 8004204:	688a      	ldr	r2, [r1, #8]
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800420c:	4293      	cmp	r3, r2
 800420e:	bfb8      	it	lt
 8004210:	4613      	movlt	r3, r2
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004218:	4607      	mov	r7, r0
 800421a:	460c      	mov	r4, r1
 800421c:	b10a      	cbz	r2, 8004222 <_printf_common+0x26>
 800421e:	3301      	adds	r3, #1
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	6833      	ldrmi	r3, [r6, #0]
 800422a:	3302      	addmi	r3, #2
 800422c:	6033      	strmi	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	f015 0506 	ands.w	r5, r5, #6
 8004234:	d106      	bne.n	8004244 <_printf_common+0x48>
 8004236:	f104 0a19 	add.w	sl, r4, #25
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	42ab      	cmp	r3, r5
 8004242:	dc26      	bgt.n	8004292 <_printf_common+0x96>
 8004244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	3b00      	subs	r3, #0
 800424c:	bf18      	it	ne
 800424e:	2301      	movne	r3, #1
 8004250:	0692      	lsls	r2, r2, #26
 8004252:	d42b      	bmi.n	80042ac <_printf_common+0xb0>
 8004254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004258:	4641      	mov	r1, r8
 800425a:	4638      	mov	r0, r7
 800425c:	47c8      	blx	r9
 800425e:	3001      	adds	r0, #1
 8004260:	d01e      	beq.n	80042a0 <_printf_common+0xa4>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	6922      	ldr	r2, [r4, #16]
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf02      	ittt	eq
 800426e:	68e5      	ldreq	r5, [r4, #12]
 8004270:	6833      	ldreq	r3, [r6, #0]
 8004272:	1aed      	subeq	r5, r5, r3
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	bf0c      	ite	eq
 8004278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800427c:	2500      	movne	r5, #0
 800427e:	4293      	cmp	r3, r2
 8004280:	bfc4      	itt	gt
 8004282:	1a9b      	subgt	r3, r3, r2
 8004284:	18ed      	addgt	r5, r5, r3
 8004286:	2600      	movs	r6, #0
 8004288:	341a      	adds	r4, #26
 800428a:	42b5      	cmp	r5, r6
 800428c:	d11a      	bne.n	80042c4 <_printf_common+0xc8>
 800428e:	2000      	movs	r0, #0
 8004290:	e008      	b.n	80042a4 <_printf_common+0xa8>
 8004292:	2301      	movs	r3, #1
 8004294:	4652      	mov	r2, sl
 8004296:	4641      	mov	r1, r8
 8004298:	4638      	mov	r0, r7
 800429a:	47c8      	blx	r9
 800429c:	3001      	adds	r0, #1
 800429e:	d103      	bne.n	80042a8 <_printf_common+0xac>
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	3501      	adds	r5, #1
 80042aa:	e7c6      	b.n	800423a <_printf_common+0x3e>
 80042ac:	18e1      	adds	r1, r4, r3
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	2030      	movs	r0, #48	@ 0x30
 80042b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042b6:	4422      	add	r2, r4
 80042b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042c0:	3302      	adds	r3, #2
 80042c2:	e7c7      	b.n	8004254 <_printf_common+0x58>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4622      	mov	r2, r4
 80042c8:	4641      	mov	r1, r8
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c8      	blx	r9
 80042ce:	3001      	adds	r0, #1
 80042d0:	d0e6      	beq.n	80042a0 <_printf_common+0xa4>
 80042d2:	3601      	adds	r6, #1
 80042d4:	e7d9      	b.n	800428a <_printf_common+0x8e>
	...

080042d8 <_printf_i>:
 80042d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	7e0f      	ldrb	r7, [r1, #24]
 80042de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042e0:	2f78      	cmp	r7, #120	@ 0x78
 80042e2:	4691      	mov	r9, r2
 80042e4:	4680      	mov	r8, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	469a      	mov	sl, r3
 80042ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042ee:	d807      	bhi.n	8004300 <_printf_i+0x28>
 80042f0:	2f62      	cmp	r7, #98	@ 0x62
 80042f2:	d80a      	bhi.n	800430a <_printf_i+0x32>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	f000 80d1 	beq.w	800449c <_printf_i+0x1c4>
 80042fa:	2f58      	cmp	r7, #88	@ 0x58
 80042fc:	f000 80b8 	beq.w	8004470 <_printf_i+0x198>
 8004300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004308:	e03a      	b.n	8004380 <_printf_i+0xa8>
 800430a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800430e:	2b15      	cmp	r3, #21
 8004310:	d8f6      	bhi.n	8004300 <_printf_i+0x28>
 8004312:	a101      	add	r1, pc, #4	@ (adr r1, 8004318 <_printf_i+0x40>)
 8004314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004318:	08004371 	.word	0x08004371
 800431c:	08004385 	.word	0x08004385
 8004320:	08004301 	.word	0x08004301
 8004324:	08004301 	.word	0x08004301
 8004328:	08004301 	.word	0x08004301
 800432c:	08004301 	.word	0x08004301
 8004330:	08004385 	.word	0x08004385
 8004334:	08004301 	.word	0x08004301
 8004338:	08004301 	.word	0x08004301
 800433c:	08004301 	.word	0x08004301
 8004340:	08004301 	.word	0x08004301
 8004344:	08004483 	.word	0x08004483
 8004348:	080043af 	.word	0x080043af
 800434c:	0800443d 	.word	0x0800443d
 8004350:	08004301 	.word	0x08004301
 8004354:	08004301 	.word	0x08004301
 8004358:	080044a5 	.word	0x080044a5
 800435c:	08004301 	.word	0x08004301
 8004360:	080043af 	.word	0x080043af
 8004364:	08004301 	.word	0x08004301
 8004368:	08004301 	.word	0x08004301
 800436c:	08004445 	.word	0x08004445
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6032      	str	r2, [r6, #0]
 8004378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800437c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004380:	2301      	movs	r3, #1
 8004382:	e09c      	b.n	80044be <_printf_i+0x1e6>
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	1d19      	adds	r1, r3, #4
 800438a:	6031      	str	r1, [r6, #0]
 800438c:	0606      	lsls	r6, r0, #24
 800438e:	d501      	bpl.n	8004394 <_printf_i+0xbc>
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	e003      	b.n	800439c <_printf_i+0xc4>
 8004394:	0645      	lsls	r5, r0, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0xb8>
 8004398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800439c:	2d00      	cmp	r5, #0
 800439e:	da03      	bge.n	80043a8 <_printf_i+0xd0>
 80043a0:	232d      	movs	r3, #45	@ 0x2d
 80043a2:	426d      	negs	r5, r5
 80043a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043a8:	4858      	ldr	r0, [pc, #352]	@ (800450c <_printf_i+0x234>)
 80043aa:	230a      	movs	r3, #10
 80043ac:	e011      	b.n	80043d2 <_printf_i+0xfa>
 80043ae:	6821      	ldr	r1, [r4, #0]
 80043b0:	6833      	ldr	r3, [r6, #0]
 80043b2:	0608      	lsls	r0, r1, #24
 80043b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043b8:	d402      	bmi.n	80043c0 <_printf_i+0xe8>
 80043ba:	0649      	lsls	r1, r1, #25
 80043bc:	bf48      	it	mi
 80043be:	b2ad      	uxthmi	r5, r5
 80043c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043c2:	4852      	ldr	r0, [pc, #328]	@ (800450c <_printf_i+0x234>)
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	bf14      	ite	ne
 80043c8:	230a      	movne	r3, #10
 80043ca:	2308      	moveq	r3, #8
 80043cc:	2100      	movs	r1, #0
 80043ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043d2:	6866      	ldr	r6, [r4, #4]
 80043d4:	60a6      	str	r6, [r4, #8]
 80043d6:	2e00      	cmp	r6, #0
 80043d8:	db05      	blt.n	80043e6 <_printf_i+0x10e>
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	432e      	orrs	r6, r5
 80043de:	f021 0104 	bic.w	r1, r1, #4
 80043e2:	6021      	str	r1, [r4, #0]
 80043e4:	d04b      	beq.n	800447e <_printf_i+0x1a6>
 80043e6:	4616      	mov	r6, r2
 80043e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ec:	fb03 5711 	mls	r7, r3, r1, r5
 80043f0:	5dc7      	ldrb	r7, [r0, r7]
 80043f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043f6:	462f      	mov	r7, r5
 80043f8:	42bb      	cmp	r3, r7
 80043fa:	460d      	mov	r5, r1
 80043fc:	d9f4      	bls.n	80043e8 <_printf_i+0x110>
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d10b      	bne.n	800441a <_printf_i+0x142>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	07df      	lsls	r7, r3, #31
 8004406:	d508      	bpl.n	800441a <_printf_i+0x142>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	6861      	ldr	r1, [r4, #4]
 800440c:	4299      	cmp	r1, r3
 800440e:	bfde      	ittt	le
 8004410:	2330      	movle	r3, #48	@ 0x30
 8004412:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004416:	f106 36ff 	addle.w	r6, r6, #4294967295
 800441a:	1b92      	subs	r2, r2, r6
 800441c:	6122      	str	r2, [r4, #16]
 800441e:	f8cd a000 	str.w	sl, [sp]
 8004422:	464b      	mov	r3, r9
 8004424:	aa03      	add	r2, sp, #12
 8004426:	4621      	mov	r1, r4
 8004428:	4640      	mov	r0, r8
 800442a:	f7ff fee7 	bl	80041fc <_printf_common>
 800442e:	3001      	adds	r0, #1
 8004430:	d14a      	bne.n	80044c8 <_printf_i+0x1f0>
 8004432:	f04f 30ff 	mov.w	r0, #4294967295
 8004436:	b004      	add	sp, #16
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	f043 0320 	orr.w	r3, r3, #32
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	4832      	ldr	r0, [pc, #200]	@ (8004510 <_printf_i+0x238>)
 8004446:	2778      	movs	r7, #120	@ 0x78
 8004448:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	6831      	ldr	r1, [r6, #0]
 8004450:	061f      	lsls	r7, r3, #24
 8004452:	f851 5b04 	ldr.w	r5, [r1], #4
 8004456:	d402      	bmi.n	800445e <_printf_i+0x186>
 8004458:	065f      	lsls	r7, r3, #25
 800445a:	bf48      	it	mi
 800445c:	b2ad      	uxthmi	r5, r5
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	07d9      	lsls	r1, r3, #31
 8004462:	bf44      	itt	mi
 8004464:	f043 0320 	orrmi.w	r3, r3, #32
 8004468:	6023      	strmi	r3, [r4, #0]
 800446a:	b11d      	cbz	r5, 8004474 <_printf_i+0x19c>
 800446c:	2310      	movs	r3, #16
 800446e:	e7ad      	b.n	80043cc <_printf_i+0xf4>
 8004470:	4826      	ldr	r0, [pc, #152]	@ (800450c <_printf_i+0x234>)
 8004472:	e7e9      	b.n	8004448 <_printf_i+0x170>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f023 0320 	bic.w	r3, r3, #32
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	e7f6      	b.n	800446c <_printf_i+0x194>
 800447e:	4616      	mov	r6, r2
 8004480:	e7bd      	b.n	80043fe <_printf_i+0x126>
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	6825      	ldr	r5, [r4, #0]
 8004486:	6961      	ldr	r1, [r4, #20]
 8004488:	1d18      	adds	r0, r3, #4
 800448a:	6030      	str	r0, [r6, #0]
 800448c:	062e      	lsls	r6, r5, #24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	d501      	bpl.n	8004496 <_printf_i+0x1be>
 8004492:	6019      	str	r1, [r3, #0]
 8004494:	e002      	b.n	800449c <_printf_i+0x1c4>
 8004496:	0668      	lsls	r0, r5, #25
 8004498:	d5fb      	bpl.n	8004492 <_printf_i+0x1ba>
 800449a:	8019      	strh	r1, [r3, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	6123      	str	r3, [r4, #16]
 80044a0:	4616      	mov	r6, r2
 80044a2:	e7bc      	b.n	800441e <_printf_i+0x146>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	6032      	str	r2, [r6, #0]
 80044aa:	681e      	ldr	r6, [r3, #0]
 80044ac:	6862      	ldr	r2, [r4, #4]
 80044ae:	2100      	movs	r1, #0
 80044b0:	4630      	mov	r0, r6
 80044b2:	f7fb fe95 	bl	80001e0 <memchr>
 80044b6:	b108      	cbz	r0, 80044bc <_printf_i+0x1e4>
 80044b8:	1b80      	subs	r0, r0, r6
 80044ba:	6060      	str	r0, [r4, #4]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	2300      	movs	r3, #0
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044c6:	e7aa      	b.n	800441e <_printf_i+0x146>
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	4632      	mov	r2, r6
 80044cc:	4649      	mov	r1, r9
 80044ce:	4640      	mov	r0, r8
 80044d0:	47d0      	blx	sl
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0ad      	beq.n	8004432 <_printf_i+0x15a>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	d413      	bmi.n	8004504 <_printf_i+0x22c>
 80044dc:	68e0      	ldr	r0, [r4, #12]
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	4298      	cmp	r0, r3
 80044e2:	bfb8      	it	lt
 80044e4:	4618      	movlt	r0, r3
 80044e6:	e7a6      	b.n	8004436 <_printf_i+0x15e>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4632      	mov	r2, r6
 80044ec:	4649      	mov	r1, r9
 80044ee:	4640      	mov	r0, r8
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d09d      	beq.n	8004432 <_printf_i+0x15a>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	42ab      	cmp	r3, r5
 8004500:	dcf2      	bgt.n	80044e8 <_printf_i+0x210>
 8004502:	e7eb      	b.n	80044dc <_printf_i+0x204>
 8004504:	2500      	movs	r5, #0
 8004506:	f104 0619 	add.w	r6, r4, #25
 800450a:	e7f5      	b.n	80044f8 <_printf_i+0x220>
 800450c:	0800465d 	.word	0x0800465d
 8004510:	0800466e 	.word	0x0800466e

08004514 <memmove>:
 8004514:	4288      	cmp	r0, r1
 8004516:	b510      	push	{r4, lr}
 8004518:	eb01 0402 	add.w	r4, r1, r2
 800451c:	d902      	bls.n	8004524 <memmove+0x10>
 800451e:	4284      	cmp	r4, r0
 8004520:	4623      	mov	r3, r4
 8004522:	d807      	bhi.n	8004534 <memmove+0x20>
 8004524:	1e43      	subs	r3, r0, #1
 8004526:	42a1      	cmp	r1, r4
 8004528:	d008      	beq.n	800453c <memmove+0x28>
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004532:	e7f8      	b.n	8004526 <memmove+0x12>
 8004534:	4402      	add	r2, r0
 8004536:	4601      	mov	r1, r0
 8004538:	428a      	cmp	r2, r1
 800453a:	d100      	bne.n	800453e <memmove+0x2a>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004546:	e7f7      	b.n	8004538 <memmove+0x24>

08004548 <_sbrk_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d06      	ldr	r5, [pc, #24]	@ (8004564 <_sbrk_r+0x1c>)
 800454c:	2300      	movs	r3, #0
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc f974 	bl	8000840 <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_sbrk_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_sbrk_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	2000035c 	.word	0x2000035c

08004568 <memcpy>:
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004570:	d100      	bne.n	8004574 <memcpy+0xc>
 8004572:	4770      	bx	lr
 8004574:	b510      	push	{r4, lr}
 8004576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457e:	4291      	cmp	r1, r2
 8004580:	d1f9      	bne.n	8004576 <memcpy+0xe>
 8004582:	bd10      	pop	{r4, pc}

08004584 <_realloc_r>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	4607      	mov	r7, r0
 800458a:	4614      	mov	r4, r2
 800458c:	460d      	mov	r5, r1
 800458e:	b921      	cbnz	r1, 800459a <_realloc_r+0x16>
 8004590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004594:	4611      	mov	r1, r2
 8004596:	f7ff bc4d 	b.w	8003e34 <_malloc_r>
 800459a:	b92a      	cbnz	r2, 80045a8 <_realloc_r+0x24>
 800459c:	f7ff fbde 	bl	8003d5c <_free_r>
 80045a0:	4625      	mov	r5, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	f000 f81a 	bl	80045e0 <_malloc_usable_size_r>
 80045ac:	4284      	cmp	r4, r0
 80045ae:	4606      	mov	r6, r0
 80045b0:	d802      	bhi.n	80045b8 <_realloc_r+0x34>
 80045b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045b6:	d8f4      	bhi.n	80045a2 <_realloc_r+0x1e>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4638      	mov	r0, r7
 80045bc:	f7ff fc3a 	bl	8003e34 <_malloc_r>
 80045c0:	4680      	mov	r8, r0
 80045c2:	b908      	cbnz	r0, 80045c8 <_realloc_r+0x44>
 80045c4:	4645      	mov	r5, r8
 80045c6:	e7ec      	b.n	80045a2 <_realloc_r+0x1e>
 80045c8:	42b4      	cmp	r4, r6
 80045ca:	4622      	mov	r2, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	bf28      	it	cs
 80045d0:	4632      	movcs	r2, r6
 80045d2:	f7ff ffc9 	bl	8004568 <memcpy>
 80045d6:	4629      	mov	r1, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff fbbf 	bl	8003d5c <_free_r>
 80045de:	e7f1      	b.n	80045c4 <_realloc_r+0x40>

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr
